import tkinter as tk
from tkinter import ttk, messagebox
import json
import os
import datetime
from plyer import notification
import threading
import time
import random
from vocabulary import VOCABULARY

class ItalianLearningApp:
    def __init__(self):
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –æ–∫–Ω–∞
        self.root = tk.Tk()
        self.root.title("–ò–∑—É—á–µ–Ω–∏–µ –∏—Ç–∞–ª—å—è–Ω—Å–∫–æ–≥–æ —è–∑—ã–∫–∞")
        self.root.geometry("800x600")
        
        # –ó–∞–≥—Ä—É–∑–∫–∞ —Å–ª–æ–≤–∞—Ä—è
        self.vocabulary = VOCABULARY
        
        # –°–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        self.is_review_active = False
        self.last_activity_time = time.time()
        self.current_review_window = None
        self.is_answering = False
        self.answer_checked = False
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ü–≤–µ—Ç–æ–≤
        self.colors = {
            "primary": "#1976D2",
            "success": "#4CAF50",
            "error": "#f44336",
            "warning": "#FFA726",
            "hint": "#673AB7",
            "background": "#FFFFFF",
            "text": "#212121",
            "secondary_text": "#757575",
            "feedback_bg": "#F5F5F5"
        }
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
        self.setup_styles()
        self.setup_main_window()
        self.load_schedule()
        self.start_auto_update()
        
        # –ü—Ä–∏–≤—è–∑–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
        self.root.bind_all('<Key>', self.update_activity_time)
        self.root.bind_all('<Button-1>', self.update_activity_time)
        self.root.bind_all('<Button-3>', self.update_activity_time)
        self.root.bind_all('<MouseWheel>', self.update_activity_time)

    def update_activity_time(self, event=None):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏"""
        self.last_activity_time = time.time()

    def is_user_active(self, timeout_minutes=2):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        return (time.time() - self.last_activity_time) < (timeout_minutes * 60)

    def setup_styles(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç–∏–ª–µ–π –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
        style = ttk.Style()
        
        # –û—Å–Ω–æ–≤–Ω—ã–µ –∫–Ω–æ–ø–∫–∏
        style.configure(
            "Main.TButton",
            padding=10,
            font=('Helvetica', 10, 'bold'),
            width=15
        )
        
        # –ö–Ω–æ–ø–∫–∏ –≤ –æ–∫–Ω–µ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è
        style.configure(
            "Review.TButton",
            padding=8,
            font=('Helvetica', 10),
            width=15
        )
        
        # –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –º–µ—Ç–∫–∏
        style.configure(
            "Main.TLabel",
            font=('Helvetica', 10),
            foreground=self.colors["text"]
        )
        
        # –ó–∞–≥–æ–ª–æ–≤–∫–∏
        style.configure(
            "Header.TLabel",
            font=('Helvetica', 16, 'bold'),
            foreground=self.colors["primary"]
        )
        
        # –ü–æ–¥–∑–∞–≥–æ–ª–æ–≤–∫–∏
        style.configure(
            "Subheader.TLabel",
            font=('Helvetica', 12),
            foreground=self.colors["text"]
        )

    def setup_main_window(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –≥–ª–∞–≤–Ω–æ–≥–æ –æ–∫–Ω–∞"""
        # –û—Å–Ω–æ–≤–Ω–æ–π —Ñ—Ä–µ–π–º
        self.main_frame = ttk.Frame(self.root, padding="20")
        self.main_frame.grid(row=0, column=0, sticky=(tk.W, tk.E, tk.N, tk.S))
        
        self.root.columnconfigure(0, weight=1)
        self.root.rowconfigure(0, weight=1)
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        ttk.Label(
            self.main_frame,
            text="–ò–∑—É—á–µ–Ω–∏–µ –∏—Ç–∞–ª—å—è–Ω—Å–∫–æ–≥–æ —è–∑—ã–∫–∞",
            style="Header.TLabel"
        ).grid(row=0, column=0, columnspan=2, pady=(0, 5))
        
        ttk.Label(
            self.main_frame,
            text="–°–∏—Å—Ç–µ–º–∞ –∏–Ω—Ç–µ—Ä–≤–∞–ª—å–Ω–æ–≥–æ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è",
            style="Subheader.TLabel"
        ).grid(row=1, column=0, columnspan=2, pady=(0, 20))
        
        # –û–±–ª–∞—Å—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
        schedule_frame = ttk.LabelFrame(
            self.main_frame,
            text="–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–π",
            padding="10"
        )
        schedule_frame.grid(row=2, column=0, columnspan=2, sticky=(tk.W, tk.E, tk.N, tk.S))
        schedule_frame.columnconfigure(0, weight=1)
        schedule_frame.rowconfigure(0, weight=1)
        
        # –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è —Ç–µ–∫—Å—Ç–∞ —Å –ø—Ä–æ–∫—Ä—É—Ç–∫–æ–π
        schedule_container = ttk.Frame(schedule_frame)
        schedule_container.grid(row=0, column=0, sticky=(tk.W, tk.E, tk.N, tk.S))
        schedule_container.columnconfigure(0, weight=1)
        schedule_container.rowconfigure(0, weight=1)
        
        # –¢–µ–∫—Å—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è —Å –ø—Ä–æ–∫—Ä—É—Ç–∫–æ–π
        self.schedule_text = tk.Text(
            schedule_container,
            height=15,
            width=70,
            wrap=tk.WORD,
            font=('Helvetica', 10),
            padx=10,
            pady=10
        )
        self.schedule_text.grid(row=0, column=0, sticky=(tk.W, tk.E, tk.N, tk.S))
        
        schedule_scrollbar = ttk.Scrollbar(
            schedule_container,
            orient="vertical",
            command=self.schedule_text.yview
        )
        schedule_scrollbar.grid(row=0, column=1, sticky=(tk.N, tk.S))
        self.schedule_text.configure(yscrollcommand=schedule_scrollbar.set)
        
        # # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        button_frame = ttk.Frame(self.main_frame)
        button_frame.grid(row=3, column=0, columnspan=2, pady=20)
        
        ttk.Button(
            button_frame,
            text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ",
            command=self.load_schedule,
            style="Main.TButton",
            width=25  # –ë—ã–ª–æ width=15
        ).pack(side=tk.LEFT, padx=10)
        
        ttk.Button(
            button_frame,
            text="‚ñ∂Ô∏è –ù–∞—á–∞—Ç—å –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–µ",
            command=self.start_review,
            style="Main.TButton",
            width=25  # –ë—ã–ª–æ width=15
        ).pack(side=tk.LEFT, padx=10)
        
        # button_frame = ttk.Frame(self.main_frame)
        # button_frame.grid(row=3, column=0, columnspan=2, pady=20)
        
        # ttk.Button(
            # button_frame,
            # text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ",
            # command=self.load_schedule,
            # style="Main.TButton"
        # ).pack(side=tk.LEFT, padx=10)
        
        # ttk.Button(
            # button_frame,
            # text="‚ñ∂Ô∏è –ù–∞—á–∞—Ç—å –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–µ",
            # command=self.start_review,
            # style="Main.TButton"
        # ).pack(side=tk.LEFT, padx=10)
        
        # # –°—Ç–∞—Ç—É—Å
        # self.status_label = ttk.Label(
            # self.main_frame,
            # text="",
            # style="Main.TLabel"
        # )
        # self.status_label.grid(row=4, column=0, columnspan=2, sticky=tk.W)
    def load_schedule(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è"""
        try:
            current_time = datetime.datetime.now()
            
            # –ß—Ç–µ–Ω–∏–µ –∏–ª–∏ —Å–æ–∑–¥–∞–Ω–∏–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
            try:
                with open('schedule.json', 'r', encoding='utf-8') as f:
                    schedule = json.load(f)
            except FileNotFoundError:
                schedule = self._create_initial_schedule(current_time)
            
            # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
            self.schedule_text.config(state=tk.NORMAL)
            self.schedule_text.delete('1.0', tk.END)
            
            # –†–∞–∑–¥–µ–ª–µ–Ω–∏–µ —Å–ª–æ–≤ –Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
            urgent_words = []
            future_words = []
            
            for word in schedule["words"]:
                next_review = datetime.datetime.fromisoformat(word["next_review"])
                time_diff = next_review - current_time
                
                if time_diff.total_seconds() <= 0:
                    urgent_words.append(word)
                else:
                    future_words.append({
                        "word": word,
                        "hours": int(time_diff.total_seconds() // 3600),
                        "minutes": int((time_diff.total_seconds() % 3600) // 60)
                    })
            
            # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å—Ä–æ—á–Ω—ã—Ö —Å–ª–æ–≤
            if urgent_words:
                self.schedule_text.insert(tk.END, "üîî –ü–û–†–ê –ü–û–í–¢–û–†–ò–¢–¨:\n\n", "header")
                for word in urgent_words:
                    self.schedule_text.insert(
                        tk.END,
                        f"‚Ä¢ {word['word']} - {word['translation']}\n",
                        "current"
                    )
                    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ–∞–∫—Ç–∏–≤–µ–Ω
                    if not self.is_user_active() and not self.is_review_active:
                        self._show_notification(word)
                self.schedule_text.insert(tk.END, "\n")
            
            # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –±—É–¥—É—â–∏—Ö —Å–ª–æ–≤
            if future_words:
                self.schedule_text.insert(tk.END, "‚è∞ –ü–†–ï–î–°–¢–û–Ø–©–ò–ï –ü–û–í–¢–û–†–ï–ù–ò–Ø:\n\n", "header")
                future_words.sort(key=lambda x: (x["hours"], x["minutes"]))
                for word_info in future_words:
                    word = word_info["word"]
                    time_str = f"{word_info['hours']}—á {word_info['minutes']}–º–∏–Ω"
                    self.schedule_text.insert(
                        tk.END,
                        f"‚Ä¢ –ß–µ—Ä–µ–∑ {time_str}: {word['word']} - {word['translation']}\n",
                        "future"
                    )
            
            # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ç–µ–≥–æ–≤
            self.schedule_text.tag_configure(
                "header",
                font=('Helvetica', 11, 'bold'),
                foreground=self.colors["primary"]
            )
            self.schedule_text.tag_configure(
                "current",
                font=('Helvetica', 10),
                foreground=self.colors["error"]
            )
            self.schedule_text.tag_configure(
                "future",
                font=('Helvetica', 10),
                foreground=self.colors["secondary_text"]
            )
            
            self.schedule_text.config(state=tk.DISABLED)
            self.status_label.config(
                text=f"–ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: {current_time.strftime('%H:%M:%S')}"
            )
            
        except Exception as e:
            messagebox.showerror(
                "–û—à–∏–±–∫–∞",
                "–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ"
            )

    # def _create_initial_schedule(self, current_time):
        # """–°–æ–∑–¥–∞–Ω–∏–µ –Ω–∞—á–∞–ª—å–Ω–æ–≥–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è"""
        # schedule = {"words": []}
        # for i, word in enumerate(self.vocabulary["–ë—É–¥—É –∏–∑—É—á–∞—Ç—å"].keys()):
            # next_review = (current_time if i == 0 
                         # else current_time + datetime.timedelta(minutes=5*i))
            # schedule["words"].append({
                # "word": word,
                # "translation": self.vocabulary["–ë—É–¥—É –∏–∑—É—á–∞—Ç—å"][word]["–ø–µ—Ä–µ–≤–æ–¥"],
                # "next_review": next_review.isoformat()
            # })
        
        # with open('schedule.json', 'w', encoding='utf-8') as f:
            # json.dump(schedule, f, ensure_ascii=False, indent=2)
            
        # return schedule
    def _create_initial_schedule(self, current_time):
        """–°–æ–∑–¥–∞–Ω–∏–µ –Ω–∞—á–∞–ª—å–Ω–æ–≥–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è"""
        schedule = {"words": []}
        for i, word in enumerate(self.vocabulary["–ë—É–¥—É –∏–∑—É—á–∞—Ç—å"].keys()):
            next_review = (current_time if i == 0 
                         else current_time + datetime.timedelta(minutes=5*i))
            schedule["words"].append({
                "word": word,
                "translation": self.vocabulary["–ë—É–¥—É –∏–∑—É—á–∞—Ç—å"][word]["–ø–µ—Ä–µ–≤–æ–¥"],
                "next_review": next_review.isoformat(),
                "current_interval": 4  # –î–æ–±–∞–≤–ª—è–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª
            })
        
        with open('schedule.json', 'w', encoding='utf-8') as f:
            json.dump(schedule, f, ensure_ascii=False, indent=2)
            
        return schedule
        
    def _show_notification(self, word):
        """–ü–æ–∫–∞–∑ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"""
        try:
            notification.notify(
                title='–í—Ä–µ–º—è –∏–∑—É—á–µ–Ω–∏—è –∏—Ç–∞–ª—å—è–Ω—Å–∫–æ–≥–æ!',
                message=f'–ü–æ—Ä–∞ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å —Å–ª–æ–≤–æ: {word["word"]} ({word["translation"]})',
                timeout=10
            )
        except:
            pass  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π

    def start_auto_update(self):
        """–ó–∞–ø—É—Å–∫ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è"""
        def auto_update():
            while True:
                try:
                    if not self.is_review_active and not self.is_user_active():
                        self.root.after(0, self.load_schedule)
                    time.sleep(60)
                except:
                    time.sleep(60)
                    
        threading.Thread(target=auto_update, daemon=True).start()

    def start_review(self):
        """–ó–∞–ø—É—Å–∫ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è"""
        try:
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–µ–∫—É—â–µ–≥–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
            with open('schedule.json', 'r', encoding='utf-8') as f:
                schedule = json.load(f)
            
            # –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ª–æ–≤ –¥–ª—è –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è
            current_time = datetime.datetime.now()
            words_to_review = []
            
            for word_data in schedule["words"]:
                next_review = datetime.datetime.fromisoformat(word_data["next_review"])
                if next_review <= current_time:
                    if word_data["word"] in self.vocabulary["–ë—É–¥—É –∏–∑—É—á–∞—Ç—å"]:
                        words_to_review.append({
                            "word": word_data["word"],
                            "data": self.vocabulary["–ë—É–¥—É –∏–∑—É—á–∞—Ç—å"][word_data["word"]],
                            "schedule_data": word_data
                        })
            
            if not words_to_review:
                messagebox.showinfo(
                    "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è",
                    "–°–µ–π—á–∞—Å –Ω–µ—Ç —Å–ª–æ–≤ –¥–ª—è –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è"
                )
                return
            
            # –°–æ–∑–¥–∞–Ω–∏–µ –æ–∫–Ω–∞ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è
            self.is_review_active = True
            self.create_review_window(words_to_review)
            
        except Exception as e:
            self.is_review_active = False
            messagebox.showerror(
                "–û—à–∏–±–∫–∞",
                "–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞—á–∞—Ç—å –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–µ"
            )
    def create_review_window(self, words_to_review):
        """–°–æ–∑–¥–∞–Ω–∏–µ –æ–∫–Ω–∞ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è"""
        review_window = tk.Toplevel(self.root)
        review_window.title("–ü–æ–≤—Ç–æ—Ä–µ–Ω–∏–µ —Å–ª–æ–≤")
        review_window.geometry("800x700")  # –£–≤–µ–ª–∏—á–µ–Ω–∞ –≤—ã—Å–æ—Ç–∞ –æ–∫–Ω–∞
        review_window.transient(self.root)
        
        self.current_review_window = review_window
        
        # –û—Å–Ω–æ–≤–Ω–æ–π —Ñ—Ä–µ–π–º
        main_frame = ttk.Frame(review_window, padding="20")
        main_frame.grid(row=0, column=0, sticky=(tk.W, tk.E, tk.N, tk.S))
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è
        review_window.columnconfigure(0, weight=1)
        review_window.rowconfigure(0, weight=1)
        main_frame.columnconfigure(0, weight=1)
        main_frame.rowconfigure(2, weight=1)  # –°—Ç—Ä–æ–∫–∞ —Å —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ–º —Ä–∞—Å—à–∏—Ä—è–µ—Ç—Å—è
        
        # –ö–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –æ–∫–Ω–∞ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è
        current_word_index = {"value": 0}
        self.translation_direction = tk.StringVar(value="ru_to_it")
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        ttk.Label(
            main_frame,
            text="–ü–æ–≤—Ç–æ—Ä–µ–Ω–∏–µ —Å–ª–æ–≤",
            style="Header.TLabel"
        ).grid(row=0, column=0, pady=(0, 20))
        
        # –ü–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª—å –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–µ—Ä–µ–≤–æ–¥–∞
        direction_frame = ttk.LabelFrame(
            main_frame,
            text="–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–µ—Ä–µ–≤–æ–¥–∞",
            padding="10"
        )
        direction_frame.grid(row=1, column=0, pady=(0, 20), sticky=(tk.W, tk.E))
        
        ttk.Radiobutton(
            direction_frame,
            text="–†—É—Å—Å–∫–∏–π ‚Üí –ò—Ç–∞–ª—å—è–Ω—Å–∫–∏–π",
            variable=self.translation_direction,
            value="ru_to_it",
            command=lambda: self.show_exercise(
                current_word_index,
                words_to_review,
                exercise_frame,
                progress_label
            )
        ).pack(side=tk.LEFT, padx=20)
        
        ttk.Radiobutton(
            direction_frame,
            text="–ò—Ç–∞–ª—å—è–Ω—Å–∫–∏–π ‚Üí –†—É—Å—Å–∫–∏–π",
            variable=self.translation_direction,
            value="it_to_ru",
            command=lambda: self.show_exercise(
                current_word_index,
                words_to_review,
                exercise_frame,
                progress_label
            )
        ).pack(side=tk.LEFT, padx=20)
        
        # –û–±–ª–∞—Å—Ç—å —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π
        exercise_frame = ttk.Frame(main_frame)
        exercise_frame.grid(row=2, column=0, sticky=(tk.W, tk.E, tk.N, tk.S), pady=(0, 20))
        exercise_frame.columnconfigure(0, weight=1)
        
        # –ü—Ä–æ–≥—Ä–µ—Å—Å
        progress_label = ttk.Label(
            main_frame,
            text="",
            style="Main.TLabel"
        )
        progress_label.grid(row=3, column=0, sticky=tk.W)
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è –æ–∫–Ω–∞
        review_window.protocol(
            "WM_DELETE_WINDOW",
            lambda: self.on_review_window_closing(review_window)
        )
        
        # –¶–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–∫–Ω–∞
        review_window.update_idletasks()
        width = review_window.winfo_width()
        height = review_window.winfo_height()
        x = (review_window.winfo_screenwidth() // 2) - (width // 2)
        y = (review_window.winfo_screenheight() // 2) - (height // 2)
        review_window.geometry(f'{width}x{height}+{x}+{y}')
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤–æ–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ
        self.show_exercise(
            current_word_index,
            words_to_review,
            exercise_frame,
            progress_label
        )

    def show_exercise(self, current_word_index, words_to_review, exercise_frame, progress_label):
        """–ü–æ–∫–∞–∑ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è"""
        # –û—á–∏—Å—Ç–∫–∞ —Ñ—Ä–µ–π–º–∞
        for widget in exercise_frame.winfo_children():
            widget.destroy()

        # –°–±—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è
        self.is_answering = True
        self.answer_checked = False
        
        # –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —Ç–µ–∫—É—â–µ–≥–æ —Å–ª–æ–≤–∞
        word_info = words_to_review[current_word_index["value"]]
        word = word_info["word"]
        data = word_info["data"]
        example = random.choice(data["–ø—Ä–∏–º–µ—Ä—ã"])

        # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–µ—Ä–µ–≤–æ–¥–∞
        is_to_italian = self.translation_direction.get() == "ru_to_it"
        question = example["—Ä—É—Å—Å–∫–∏–π"] if is_to_italian else example["–∏—Ç–∞–ª—å—è–Ω—Å–∫–∏–π"]
        correct_answer = example["–∏—Ç–∞–ª—å—è–Ω—Å–∫–∏–π"] if is_to_italian else example["—Ä—É—Å—Å–∫–∏–π"]
        alternatives = (example.get("–∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤—ã_–∏—Ç", []) if is_to_italian 
                       else example.get("–∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤—ã_—Ä—É—Å", []))

        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
        progress_label.config(
            text=f"–°–ª–æ–≤–æ {current_word_index['value'] + 1} –∏–∑ {len(words_to_review)}"
        )

        # –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è
        # –°–ª–æ–≤–æ –∏ –ø–µ—Ä–µ–≤–æ–¥
        word_frame = ttk.Frame(exercise_frame)
        word_frame.pack(fill=tk.X, pady=(0, 20))

        ttk.Label(
            word_frame,
            text=word,
            font=('Helvetica', 16, 'bold'),
            foreground=self.colors["primary"]
        ).pack(side=tk.LEFT, padx=5)

        ttk.Label(
            word_frame,
            text=f"- {data['–ø–µ—Ä–µ–≤–æ–¥']}",
            font=('Helvetica', 14)
        ).pack(side=tk.LEFT)

        # –ó–∞–¥–∞–Ω–∏–µ
        task_frame = ttk.LabelFrame(
            exercise_frame,
            text="–ó–∞–¥–∞–Ω–∏–µ",
            padding="10"
        )
        task_frame.pack(fill=tk.X, pady=(0, 20))

        ttk.Label(
            task_frame,
            text="–ü–µ—Ä–µ–≤–µ–¥–∏—Ç–µ:",
            font=('Helvetica', 11, 'bold'),
            foreground=self.colors["primary"]
        ).pack()

        ttk.Label(
            task_frame,
            text=question,
            font=('Helvetica', 12, 'bold'),
            wraplength=600
        ).pack(pady=(5, 0))

        # –ü–æ–ª–µ –≤–≤–æ–¥–∞
        answer_var = tk.StringVar()
        answer_entry = ttk.Entry(
            exercise_frame,
            textvariable=answer_var,
            font=('Helvetica', 12),
            width=50
        )
        answer_entry.pack(pady=(0, 10))

        # –û–±–ª–∞—Å—Ç—å –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏ —Å –ø—Ä–æ–∫—Ä—É—Ç–∫–æ–π
        feedback_frame = ttk.Frame(exercise_frame)
        feedback_frame.pack(fill=tk.BOTH, expand=True, pady=(0, 10))
        feedback_frame.columnconfigure(0, weight=1)
        feedback_frame.rowconfigure(0, weight=1)

        # –î–æ–±–∞–≤–ª—è–µ–º —Å–∫—Ä–æ–ª–ª–±–∞—Ä
        feedback_scrollbar = ttk.Scrollbar(feedback_frame)
        feedback_scrollbar.grid(row=0, column=1, sticky=(tk.N, tk.S))

        feedback_text = tk.Text(
            feedback_frame,
            height=8,  # –£–≤–µ–ª–∏—á–µ–Ω–Ω–∞—è –≤—ã—Å–æ—Ç–∞
            wrap=tk.WORD,
            font=('Helvetica', 11),
            background=self.colors["feedback_bg"],
            padx=10,
            pady=5,
            state=tk.DISABLED,
            yscrollcommand=feedback_scrollbar.set
        )
        feedback_text.grid(row=0, column=0, sticky=(tk.W, tk.E, tk.N, tk.S))
        feedback_scrollbar.config(command=feedback_text.yview)

        # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        button_frame = ttk.Frame(exercise_frame)
        button_frame.pack(fill=tk.X, pady=(0, 10))

        check_button = ttk.Button(
            button_frame,
            text="‚úì –ü—Ä–æ–≤–µ—Ä–∏—Ç—å",
            command=lambda: self.check_answer(
                answer_var.get(),
                correct_answer,
                alternatives,
                answer_entry,
                feedback_text,
                next_button,
                exercise_frame
            ),
            style="Review.TButton"
        )
        check_button.pack(side=tk.LEFT, padx=5)

        hint_button = ttk.Button(
            button_frame,
            text="üí° –ü–æ–¥—Å–∫–∞–∑–∫–∞",
            command=lambda: self.show_hint(correct_answer, feedback_text),
            style="Review.TButton"
        )
        hint_button.pack(side=tk.LEFT, padx=5)

        next_button = ttk.Button(
            button_frame,
            text="‚û°Ô∏è –î–∞–ª–µ–µ",
            command=lambda: self.next_exercise(
                current_word_index,
                words_to_review,
                exercise_frame,
                progress_label
            ),
            state=tk.DISABLED,
            style="Main.TButton"
        )
        next_button.pack(side=tk.LEFT, padx=5)

        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ Enter –¥–ª—è –≤—Å–µ—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤
        def handle_enter(event):
            if not self.is_answering and next_button["state"] == tk.NORMAL:
                # –ï—Å–ª–∏ –æ—Ç–≤–µ—Ç –ø—Ä–æ–≤–µ—Ä–µ–Ω –∏ –∫–Ω–æ–ø–∫–∞ "–î–∞–ª–µ–µ" –∞–∫—Ç–∏–≤–Ω–∞
                next_button.invoke()
                return "break"
            elif self.is_answering and not self.answer_checked:
                # –ï—Å–ª–∏ –æ—Ç–≤–µ—Ç –µ—â–µ –Ω–µ –ø—Ä–æ–≤–µ—Ä–µ–Ω
                check_button.invoke()
                return "break"
            return None

        # –ü—Ä–∏–≤—è–∑–∫–∞ Enter –∫–æ –≤—Å–µ–º –∫–ª—é—á–µ–≤—ã–º —ç–ª–µ–º–µ–Ω—Ç–∞–º
        for widget in [answer_entry, exercise_frame, feedback_text, 
                      check_button, next_button]:
            widget.bind('<Return>', handle_enter)

        # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –Ω–∞—á–∞–ª—å–Ω–æ–≥–æ —Ñ–æ–∫—É—Å–∞
        answer_entry.focus_set()
    def check_answer(self, user_answer, correct_answer, alternatives,
                    answer_entry, feedback_text, next_button, exercise_frame):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ç–≤–µ—Ç–∞"""
        user_answer = user_answer.strip()
        is_correct = self.check_text_match(user_answer, correct_answer, alternatives)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        self.is_answering = False
        self.answer_checked = True
        self.update_activity_time()

        feedback_text.config(state=tk.NORMAL)
        feedback_text.delete(1.0, tk.END)

        if is_correct:
            # –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç
            feedback_text.insert(tk.END, "‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ!\n", "correct")
            feedback_text.insert(tk.END, f"\n–í–∞—à –æ—Ç–≤–µ—Ç: {user_answer}", "user_answer")
            
            # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ç–µ–≥–æ–≤
            feedback_text.tag_configure(
                "correct",
                foreground=self.colors["success"],
                font=('Helvetica', 11, 'bold')
            )
            feedback_text.tag_configure(
                "user_answer",
                foreground=self.colors["primary"]
            )
        else:
            # –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç
            feedback_text.insert(tk.END, "‚ùå –û—à–∏–±–∫–∞ –≤ –æ—Ç–≤–µ—Ç–µ\n\n", "error")
            self.show_detailed_errors(user_answer, correct_answer, feedback_text)

        # –í –ª—é–±–æ–º —Å–ª—É—á–∞–µ –∞–∫—Ç–∏–≤–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫—É "–î–∞–ª–µ–µ" –∏ –¥–µ–∞–∫—Ç–∏–≤–∏—Ä—É–µ–º –≤–≤–æ–¥
        answer_entry.config(state=tk.DISABLED)
        next_button.config(state=tk.NORMAL)
        next_button.focus_set()

        feedback_text.config(state=tk.DISABLED)
        # –ü—Ä–æ–∫—Ä—É—á–∏–≤–∞–µ–º –∫ –Ω–∞—á–∞–ª—É –æ–±–ª–∞—Å—Ç–∏ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏
        feedback_text.see("1.0")

    def show_detailed_errors(self, user_answer, correct_answer, feedback_text):
        """–ü–æ–∫–∞–∑ –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –æ—à–∏–±–∫–∞—Ö"""
        user_words = user_answer.split()
        correct_words = correct_answer.split()
        
        # –î–µ—Ç–∞–ª—å–Ω–æ–µ —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å–ª–æ–≤
        feedback_text.insert(tk.END, "–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ —Å–ª–æ–≤–∞–º:\n", "label")
        
        for i, word in enumerate(user_words):
            if i < len(correct_words):
                if self.check_text_match(word, correct_words[i], []):
                    feedback_text.insert(tk.END, f"{word} ‚úì  ", "correct_word")
                else:
                    feedback_text.insert(tk.END, f"{word} ‚ùå ", "wrong_word")
                    feedback_text.insert(tk.END, f"(–æ–∂–∏–¥–∞–µ—Ç—Å—è: {correct_words[i]})\n", "hint")
            else:
                feedback_text.insert(tk.END, f"{word} ‚ùå (–ª–∏—à–Ω–µ–µ —Å–ª–æ–≤–æ)\n", "wrong_word")

        # –ü—Ä–æ–ø—É—â–µ–Ω–Ω—ã–µ —Å–ª–æ–≤–∞
        if len(correct_words) > len(user_words):
            feedback_text.insert(tk.END, "\n–ü—Ä–æ–ø—É—â–µ–Ω—ã —Å–ª–æ–≤–∞: ", "label")
            missed_words = correct_words[len(user_words):]
            feedback_text.insert(tk.END, ", ".join(missed_words), "missing_word")

        # –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç
        feedback_text.insert(tk.END, "\n\n–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: ", "label")
        feedback_text.insert(tk.END, correct_answer, "correct_answer")

        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ç–µ–≥–æ–≤ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        tags_config = {
            "error": (self.colors["error"], ('Helvetica', 11, 'bold')),
            "label": (self.colors["text"], None),
            "correct_word": (self.colors["success"], None),
            "wrong_word": (self.colors["error"], None),
            "missing_word": (self.colors["warning"], None),
            "hint": (self.colors["secondary_text"], None),
            "correct_answer": (self.colors["success"], None)
        }

        for tag, (color, font) in tags_config.items():
            config = {"foreground": color}
            if font:
                config["font"] = font
            feedback_text.tag_configure(tag, **config)

    def show_hint(self, correct_answer, feedback_text):
        """–ü–æ–∫–∞–∑ –ø–æ–¥—Å–∫–∞–∑–∫–∏"""
        words = correct_answer.split()
        hint = ' '.join(word[0] + '_' * (len(word)-1) for word in words)

        feedback_text.config(state=tk.NORMAL)
        feedback_text.delete(1.0, tk.END)
        feedback_text.insert(tk.END, "üí° –ü–æ–¥—Å–∫–∞–∑–∫–∞:\n", "hint_title")
        feedback_text.insert(tk.END, hint, "hint_text")

        feedback_text.tag_configure(
            "hint_title",
            foreground=self.colors["hint"],
            font=('Helvetica', 11, 'bold')
        )
        feedback_text.tag_configure(
            "hint_text",
            foreground=self.colors["secondary_text"]
        )

        feedback_text.config(state=tk.DISABLED)
        self.update_activity_time()

    def check_text_match(self, text1, text2, alternatives):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–æ–≤"""
        def normalize_text(text):
            text = text.lower()
            # –ó–∞–º–µ–Ω–∞ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤
            replacements = {
                '√†': 'a', '√®': 'e', '√©': 'e', '√¨': 'i', '√≠': 'i',
                '√≤': 'o', '√≥': 'o', '√π': 'u', '√∫': 'u',
                "'": "'", '`': "'", '¬¥': "'",
                "l'": "lo ", "un'": "una ", "dell'": "dello ",
                "all'": "allo ", "dall'": "dallo ", "sull'": "sullo "
            }
            for old, new in replacements.items():
                text = text.replace(old, new)
            return ' '.join(text.split())  # –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–æ–±–µ–ª–æ–≤

        norm1 = normalize_text(text1)
        norm2 = normalize_text(text2)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ
        if norm1 == norm2:
            return True
            
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤—ã
        for alt in alternatives:
            if norm1 == normalize_text(alt):
                return True

        return False

    def next_exercise(self, current_word_index, words_to_review,
                     exercise_frame, progress_label):
        """–ü–µ—Ä–µ—Ö–æ–¥ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—é"""
        try:
            # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
            self.update_word_schedule(words_to_review[current_word_index["value"]])
            
            current_word_index["value"] += 1

            if current_word_index["value"] >= len(words_to_review):
                # –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Å–µ—Å—Å–∏–∏
                messagebox.showinfo(
                    "–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º!",
                    "–í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–∏–ª–∏ –≤—Å–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è! üéâ"
                )
                self.on_review_window_closing(self.current_review_window)
            else:
                # –ü–æ–∫–∞–∑ —Å–ª–µ–¥—É—é—â–µ–≥–æ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è
                self.show_exercise(
                    current_word_index,
                    words_to_review,
                    exercise_frame,
                    progress_label
                )
                
        except Exception as e:
            messagebox.showerror(
                "–û—à–∏–±–∫–∞",
                "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ–π—Ç–∏ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—é"
            )

    # def update_word_schedule(self, word_info):
        # """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –¥–ª—è —Å–ª–æ–≤–∞"""
        # try:
            # with open('schedule.json', 'r', encoding='utf-8') as f:
                # schedule = json.load(f)

            # # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ —Å–ª–µ–¥—É—é—â–µ–≥–æ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è
            # for word in schedule["words"]:
                # if word["word"] == word_info["word"]:
                    # next_review = (datetime.datetime.now() + 
                                 # datetime.timedelta(hours=4)).isoformat()
                    # word["next_review"] = next_review
                    # break

            # with open('schedule.json', 'w', encoding='utf-8') as f:
                # json.dump(schedule, f, ensure_ascii=False, indent=2)
                
        # except Exception as e:
            # messagebox.showerror(
                # "–û—à–∏–±–∫–∞",
                # "–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ"
            # )
    def update_word_schedule(self, word_info):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –¥–ª—è —Å–ª–æ–≤–∞ —Å —É–≤–µ–ª–∏—á–∏–≤–∞—é—â–∏–º–∏—Å—è –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞–º–∏"""
        try:
            with open('schedule.json', 'r', encoding='utf-8') as f:
                schedule = json.load(f)

            # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å–ª–µ–¥—É—é—â–µ–≥–æ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞
            current_interval = self._get_current_interval(word_info["word"])
            next_interval = self._calculate_next_interval(current_interval)

            # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ —Å–ª–µ–¥—É—é—â–µ–≥–æ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è
            for word in schedule["words"]:
                if word["word"] == word_info["word"]:
                    next_review = (datetime.datetime.now() + 
                                 datetime.timedelta(hours=next_interval)).isoformat()
                    word["next_review"] = next_review
                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–∏–π –∏–Ω—Ç–µ—Ä–≤–∞–ª
                    word["current_interval"] = next_interval
                    break

            with open('schedule.json', 'w', encoding='utf-8') as f:
                json.dump(schedule, f, ensure_ascii=False, indent=2)
                
        except Exception as e:
            messagebox.showerror(
                "–û—à–∏–±–∫–∞",
                "–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ"
            )
    def _get_current_interval(self, word):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è –¥–ª—è —Å–ª–æ–≤–∞"""
        try:
            with open('schedule.json', 'r', encoding='utf-8') as f:
                schedule = json.load(f)
                
            for word_data in schedule["words"]:
                if word_data["word"] == word:
                    return word_data.get("current_interval", 4)  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é 4 —á–∞—Å–∞
        except:
            pass
        return 4  # –ï—Å–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –±–∞–∑–æ–≤—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª

    def _calculate_next_interval(self, current_interval):
        """–†–∞—Å—á–µ—Ç —Å–ª–µ–¥—É—é—â–µ–≥–æ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è"""
        if current_interval < 4:  # –ï—Å–ª–∏ —ç—Ç–æ –ø–µ—Ä–≤–æ–µ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–µ
            return 4
        elif current_interval < 8:  # –í—Ç–æ—Ä–æ–µ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–µ
            return 8
        elif current_interval < 24:  # –¢—Ä–µ—Ç—å–µ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–µ
            return 24
        elif current_interval < 72:  # –ß–µ—Ç–≤–µ—Ä—Ç–æ–µ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–µ
            return 72
        elif current_interval < 168:  # –ü—è—Ç–æ–µ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–µ (–Ω–µ–¥–µ–ª—è)
            return 168
        else:
            return current_interval * 2  # –£–¥–≤–∞–∏–≤–∞–µ–º –∏–Ω—Ç–µ—Ä–≤–∞–ª
            
    def on_review_window_closing(self, window):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è –æ–∫–Ω–∞ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è"""
        self.is_review_active = False
        self.is_answering = False
        self.answer_checked = False
        self.current_review_window = None
        window.destroy()
        self.load_schedule()

    def run(self):
        """–ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
        try:
            self.root.mainloop()
        except Exception as e:
            messagebox.showerror(
                "–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞",
                "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"
            )

if __name__ == "__main__":
    app = ItalianLearningApp()
    app.run()