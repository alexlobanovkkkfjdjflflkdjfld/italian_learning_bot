import telebot
from telebot import types
import json
import datetime
import time
import random
import os
import logging
import sys
from typing import Dict, Optional, List
from vocabulary import VOCABULARY
import threading  # –î–æ–±–∞–≤–ª—è–µ–º —ç—Ç–æ—Ç –∏–º–ø–æ—Ä—Ç
import requests  # –ò —ç—Ç–æ—Ç —Ç–æ–∂–µ –Ω—É–∂–µ–Ω –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')
console_handler = logging.StreamHandler(sys.stdout)
console_handler.setFormatter(formatter)
file_handler = logging.FileHandler('bot_log.txt', encoding='utf-8')
file_handler.setFormatter(formatter)
logger = logging.getLogger('ItalianBot')
logger.setLevel(logging.DEBUG)
logger.addHandler(console_handler)
logger.addHandler(file_handler)
telebot_logger = logging.getLogger('TeleBot')
telebot_logger.setLevel(logging.WARNING)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
TOKEN = "7312843542:AAHVDxaHYSveOpitmkWagTFoMVNzYF4_tMU"
bot = telebot.TeleBot(TOKEN)

# –ì–ª–æ–±–∞–ª—å–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ —Å–æ—Å—Ç–æ—è–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_states = {}

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è —Å—Ç–∞—Ç—É—Å–æ–≤ —Å–ª–æ–≤
WORD_STATUS = {
    "NEW": "new",           # 0 –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤
    "LEARNING": "learning", # 1-2 –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–∞
    "LEARNED": "learned"    # 3+ –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–∞
}

def calculate_next_interval(correct_answers: int) -> int:
    """–†–∞—Å—á–µ—Ç —Å–ª–µ–¥—É—é—â–µ–≥–æ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è –≤ —á–∞—Å–∞—Ö"""
    if correct_answers >= 3:
        return 24  # 24 —á–∞—Å–∞ –¥–ª—è –∏–∑—É—á–µ–Ω–Ω—ã—Ö —Å–ª–æ–≤
    elif correct_answers == 2:
        return 8   # 8 —á–∞—Å–æ–≤
    elif correct_answers == 1:
        return 4   # 4 —á–∞—Å–∞
    else:
        return 1   # 1 —á–∞—Å –¥–ª—è –Ω–æ–≤—ã—Ö —Å–ª–æ–≤

def create_word_data(word: str, translation: str) -> dict:
    """–°–æ–∑–¥–∞–Ω–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –Ω–æ–≤–æ–≥–æ —Å–ª–æ–≤–∞"""
    return {
        "word": word,
        "translation": translation,
        "correct_answers": 0,
        "next_review": datetime.datetime.now().isoformat(),
        "status": WORD_STATUS["NEW"],
        "total_attempts": 0
    }

def create_initial_user_data(user_id: int) -> dict:
    """–°–æ–∑–¥–∞–Ω–∏–µ –Ω–∞—á–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    logger.info(f"Creating initial data for user {user_id}")
    
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Å–ª–æ–≤–∞
    all_words = list(VOCABULARY["–ë—É–¥—É –∏–∑—É—á–∞—Ç—å"].keys())
    random.shuffle(all_words)
    
    # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–µ 20 —Å–ª–æ–≤ –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è
    initial_words = []
    for word in all_words[:20]:
        word_data = VOCABULARY["–ë—É–¥—É –∏–∑—É—á–∞—Ç—å"][word]
        initial_words.append(create_word_data(word, word_data["–ø–µ—Ä–µ–≤–æ–¥"]))
    
    # –°–æ–∑–¥–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    data = {
        "user_id": user_id,
        "active_words": initial_words,
        "learned_words": [],
        "remaining_words": all_words[20:],
        "current_session": [],
        "current_word_index": 0,
        "last_update": datetime.datetime.now().isoformat()
    }
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ
    save_user_data(user_id, data)
    logger.info(f"Created initial data with {len(initial_words)} words")
    return data

def load_user_data(user_id: int) -> dict:
    """–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    logger.debug(f"Loading data for user {user_id}")
    if not os.path.exists('user_data'):
        os.makedirs('user_data')
        
    file_path = f'user_data/user_{user_id}.json'
    
    try:
        if os.path.exists(file_path):
            with open(file_path, 'r', encoding='utf-8') as f:
                data = json.load(f)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –≤—Å–µ—Ö –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –ø–æ–ª–µ–π
            required_fields = ["active_words", "learned_words", "remaining_words"]
            if not all(field in data for field in required_fields):
                logger.warning(f"Missing required fields in data")
                return create_initial_user_data(user_id)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–∫—Ç—É–∞–ª—å–Ω–æ—Å—Ç—å —Å–ª–æ–≤
            has_old_words = any(
                word["word"] not in VOCABULARY["–ë—É–¥—É –∏–∑—É—á–∞—Ç—å"] 
                for word in data["active_words"]
            )
            
            if has_old_words:
                logger.info(f"Found old vocabulary, creating new data")
                return create_initial_user_data(user_id)
            
            logger.debug(f"Successfully loaded data")
            return data
            
    except Exception as e:
        logger.error(f"Error loading data: {e}")
        return create_initial_user_data(user_id)
    
    return create_initial_user_data(user_id)

def save_user_data(user_id: int, data: dict):
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    logger.debug(f"Saving data for user {user_id}")
    if not os.path.exists('user_data'):
        os.makedirs('user_data')
        
    file_path = f'user_data/user_{user_id}.json'
    try:
        with open(file_path, 'w', encoding='utf-8') as f:
            json.dump(data, f, ensure_ascii=False, indent=2)
        logger.debug("Data saved successfully")
    except Exception as e:
        logger.error(f"Error saving data: {e}")

def get_words_for_review(user_data: dict) -> List[dict]:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Å–ª–æ–≤ –¥–ª—è –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è"""
    current_time = datetime.datetime.now()
    logger.debug(f"Checking words for review at {current_time}")
    
    # –ï—Å–ª–∏ –≤—Å–µ —Å–ª–æ–≤–∞ –Ω–æ–≤—ã–µ, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –≤—Å–µ
    if all(word.get("correct_answers", 0) == 0 for word in user_data["active_words"]):
        logger.debug("All words are new, returning all active words")
        return user_data["active_words"]
    
    # –ò–Ω–∞—á–µ –ø—Ä–æ–≤–µ—Ä—è–µ–º –≤—Ä–µ–º—è —Å–ª–µ–¥—É—é—â–µ–≥–æ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è
    words_to_review = []
    for word in user_data["active_words"]:
        try:
            next_review = datetime.datetime.fromisoformat(word["next_review"])
            logger.debug(f"Word {word['word']}: next review at {next_review}, current time: {current_time}")
            
            # –°–ª–æ–≤–æ –≥–æ—Ç–æ–≤–æ –∫ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—é –µ—Å–ª–∏:
            # 1. –í—Ä–µ–º—è —Å–ª–µ–¥—É—é—â–µ–≥–æ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è –Ω–∞—Å—Ç—É–ø–∏–ª–æ
            # 2. –°–ª–æ–≤–æ –Ω–µ –∏–∑—É—á–µ–Ω–æ –ø–æ–ª–Ω–æ—Å—Ç—å—é (–º–µ–Ω—å—à–µ 3 –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤)
            if (next_review <= current_time and 
                word.get("correct_answers", 0) < 3):
                words_to_review.append(word)
                logger.debug(f"Added word {word['word']} to review list")
        except Exception as e:
            logger.error(f"Error processing review time for word {word.get('word')}: {e}")
            continue
    
    logger.debug(f"Found {len(words_to_review)} words ready for review")
    return words_to_review

def update_word_progress(word: dict, is_correct: bool) -> dict:
    """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ —Å–ª–æ–≤–∞"""
    # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –ø–æ–ø—ã—Ç–æ–∫
    word["total_attempts"] = word.get("total_attempts", 0) + 1
    
    if is_correct:
        # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤
        word["correct_answers"] = word.get("correct_answers", 0) + 1
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
        if word["correct_answers"] >= 3:
            word["status"] = WORD_STATUS["LEARNED"]
        elif word["correct_answers"] > 0:
            word["status"] = WORD_STATUS["LEARNING"]
            
        # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è —Å–ª–µ–¥—É—é—â–µ–≥–æ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è
        next_interval = calculate_next_interval(word["correct_answers"])
        word["next_review"] = (
            datetime.datetime.now() + 
            datetime.timedelta(hours=next_interval)
        ).isoformat()
    
    return word
def get_main_keyboard() -> types.ReplyKeyboardMarkup:
    """–°–æ–∑–¥–∞–Ω–∏–µ –æ—Å–Ω–æ–≤–Ω–æ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã"""
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.row(types.KeyboardButton("üéØ –ù–∞—á–∞—Ç—å –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–µ"))
    markup.row(
        types.KeyboardButton("üîÑ –°–º–µ–Ω–∏—Ç—å –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–µ—Ä–µ–≤–æ–¥–∞"),
        types.KeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
    )
    markup.row(types.KeyboardButton("‚ÑπÔ∏è –ü–æ–º–æ—â—å"))
    return markup

def get_exercise_keyboard() -> types.ReplyKeyboardMarkup:
    """–°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è"""
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.row(types.KeyboardButton("üí° –ü–æ–¥—Å–∫–∞–∑–∫–∞"))
    markup.row(
        types.KeyboardButton("üîÑ –°–º–µ–Ω–∏—Ç—å –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ"),
        types.KeyboardButton("‚è© –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å")
    )
    markup.row(types.KeyboardButton("üèÅ –ó–∞–≤–µ—Ä—à–∏—Ç—å –∑–∞–Ω—è—Ç–∏–µ"))
    return markup

def get_next_keyboard() -> types.ReplyKeyboardMarkup:
    """–°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —Å–ª–æ–≤—É"""
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.row(types.KeyboardButton("‚û°Ô∏è –î–∞–ª–µ–µ"))
    markup.row(types.KeyboardButton("üèÅ –ó–∞–≤–µ—Ä—à–∏—Ç—å –∑–∞–Ω—è—Ç–∏–µ"))
    return markup

def get_retry_keyboard() -> types.ReplyKeyboardMarkup:
    """–°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–∏"""
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.row(types.KeyboardButton("üîÑ –ü–æ–≤—Ç–æ—Ä–∏—Ç—å"))
    markup.row(
        types.KeyboardButton("üí° –ü–æ–¥—Å–∫–∞–∑–∫–∞"),
        types.KeyboardButton("‚û°Ô∏è –î–∞–ª–µ–µ")
    )
    markup.row(types.KeyboardButton("üèÅ –ó–∞–≤–µ—Ä—à–∏—Ç—å –∑–∞–Ω—è—Ç–∏–µ"))
    return markup

def normalize_text(text: str) -> str:
    """–ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è —Ç–µ–∫—Å—Ç–∞ –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è"""
    text = text.lower().strip()
    replacements = {
        '√®': 'e', '√à': 'e', '√©': 'e', '√â': 'e',
        '√†': 'a', '√Ä': 'a',
        '√¨': 'i', '√å': 'i',
        '√≤': 'o', '√í': 'o',
        '√π': 'u', '√ô': 'u'
    }
    
    for old, new in replacements.items():
        text = text.replace(old, new)
    
    return text.strip()

def check_answer(user_answer: str, correct_answer: str, alternatives: List[str]) -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç–∏ –æ—Ç–≤–µ—Ç–∞"""
    user_answer = user_answer.strip()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ
    if user_answer == correct_answer:
        return True
        
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤—ã
    if user_answer in alternatives:
        return True
        
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–µ–π
    normalized_user = normalize_text(user_answer)
    normalized_correct = normalize_text(correct_answer)
    if normalized_user == normalized_correct:
        return True
        
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤—ã —Å –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–µ–π
    for alt in alternatives:
        if normalized_user == normalize_text(alt):
            return True
            
    return False

def show_current_exercise(chat_id: int, user_id: int):
    logger.debug(f"Showing exercise for user {user_id}")
    
    try:
        user_data = load_user_data(user_id)
        current_session = user_data.get("current_session", [])
        current_index = user_data.get("current_word_index", 0)
        
        if not current_session or current_index >= len(current_session):
            logger.error("No active session or invalid index")
            bot.send_message(chat_id, "‚ùå –û—à–∏–±–∫–∞. –ù–∞—á–Ω–∏—Ç–µ –Ω–æ–≤–æ–µ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–µ.",
                           reply_markup=get_main_keyboard())
            return
        
        current_word = current_session[current_index]
        word_data = VOCABULARY["–ë—É–¥—É –∏–∑—É—á–∞—Ç—å"].get(current_word["word"])
        
        if not word_data or not word_data.get("–ø—Ä–∏–º–µ—Ä—ã"):
            logger.error(f"Invalid word data for {current_word.get('word')}")
            bot.send_message(chat_id, "‚ùå –û—à–∏–±–∫–∞ –≤ –¥–∞–Ω–Ω—ã—Ö —Å–ª–æ–≤–∞.",
                           reply_markup=get_main_keyboard())
            return
        
        example = random.choice(word_data["–ø—Ä–∏–º–µ—Ä—ã"])
        translation_direction = user_states.get(user_id, {}).get("translation_direction", "ru_to_it")
        
        question = example["—Ä—É—Å—Å–∫–∏–π"] if translation_direction == "ru_to_it" else example["–∏—Ç–∞–ª—å—è–Ω—Å–∫–∏–π"]
        direction_text = "–∏—Ç–∞–ª—å—è–Ω—Å–∫–∏–π" if translation_direction == "ru_to_it" else "—Ä—É—Å—Å–∫–∏–π"
        
        user_states[user_id] = {
            "translation_direction": translation_direction,
            "awaiting_answer": True,
            "current_example": example,
            "last_activity": datetime.datetime.now().isoformat()
        }
        
        progress_bar = "üü¢" * current_word["correct_answers"] + "‚ö™Ô∏è" * (3 - current_word["correct_answers"])
        message_text = (
            f"*{current_word['word']} - {current_word['translation']}*\n\n"
            f"–ü–µ—Ä–µ–≤–µ–¥–∏—Ç–µ –Ω–∞ {direction_text}:\n"
            f"*{question}*\n\n"
            f"–ü—Ä–æ–≥—Ä–µ—Å—Å: {progress_bar}\n"
            f"_{current_index + 1} –∏–∑ {len(current_session)}_"
        )
        
        bot.send_message(chat_id, message_text,
                        parse_mode='Markdown',
                        reply_markup=get_exercise_keyboard())
        
    except Exception as e:
        logger.error(f"Error in show_exercise: {e}", exc_info=True)
        bot.send_message(chat_id, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.",
                        reply_markup=get_main_keyboard())
                        
                        
@bot.message_handler(commands=['start'])
def send_welcome(message):
   """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start"""
   user_id = message.from_user.id
   logger.info(f"User {user_id} started the bot")
   
   try:
       # –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –¥–∞–Ω–Ω—ã–µ
       user_data = load_user_data(user_id)
       
       # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
       user_states[user_id] = {
           "translation_direction": "ru_to_it",
           "awaiting_answer": False,
           "current_example": None,
           "last_activity": datetime.datetime.now().isoformat()
       }
       
       welcome_text = (
           "*–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è –∏—Ç–∞–ª—å—è–Ω—Å–∫–æ–≥–æ —è–∑—ã–∫–∞.*\n\n"
           f"üìö –ê–∫—Ç–∏–≤–Ω—ã—Ö —Å–ª–æ–≤: {len(user_data['active_words'])}\n"
           f"‚úÖ –ò–∑—É—á–µ–Ω–æ —Å–ª–æ–≤: {len(user_data['learned_words'])}\n\n"
           "üîπ *'–ù–∞—á–∞—Ç—å –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–µ'* - –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è —Å–ª–æ–≤\n"
           "üîπ *'–°–º–µ–Ω–∏—Ç—å –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ'* - –≤—ã–±–æ—Ä –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–µ—Ä–µ–≤–æ–¥–∞\n"
           "üîπ *'–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞'* - –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞\n"
           "üîπ *'–ü–æ–º–æ—â—å'* - —Å–ø—Ä–∞–≤–∫–∞ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º\n\n"
           "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /reset –¥–ª—è —Å–±—Ä–æ—Å–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞\n\n"
           "–ù–∞—á–Ω—ë–º? üòä"
       )
       
       bot.reply_to(
           message,
           welcome_text,
           parse_mode='Markdown',
           reply_markup=get_main_keyboard()
       )
       
   except Exception as e:
       logger.error(f"Error in send_welcome: {e}", exc_info=True)
       bot.reply_to(
           message,
           "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",
           reply_markup=get_main_keyboard()
       )

@bot.message_handler(commands=['reset'])
def handle_reset(message):
   """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /reset"""
   user_id = message.from_user.id
   logger.info(f"User {user_id} requested data reset")
   
   try:
       # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
       create_initial_user_data(user_id)
       
       # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
       user_states[user_id] = {
           "translation_direction": "ru_to_it",
           "awaiting_answer": False,
           "current_example": None,
           "last_activity": datetime.datetime.now().isoformat()
       }
       
       bot.reply_to(
           message,
           "üîÑ –î–∞–Ω–Ω—ã–µ —Å–±—Ä–æ—à–µ–Ω—ã. –ù–∞—á–∏–Ω–∞–µ–º –æ–±—É—á–µ–Ω–∏–µ —Å–Ω–∞—á–∞–ª–∞!",
           reply_markup=get_main_keyboard()
       )
   except Exception as e:
       logger.error(f"Error in handle_reset: {e}")
       bot.reply_to(
           message,
           "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–±—Ä–æ—Å–µ –¥–∞–Ω–Ω—ã—Ö",
           reply_markup=get_main_keyboard()
       )

@bot.message_handler(func=lambda message: message.text in ["üéØ –ù–∞—á–∞—Ç—å –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–µ", "üìØ –ù–∞—á–∞—Ç—å –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–µ", "/review"])
def start_review(message):
    user_id = message.from_user.id
    logger.info(f"User {user_id} starting review session")
    
    try:
        user_data = load_user_data(user_id)
        words_to_review = get_words_for_review(user_data)
        
        if not words_to_review:
            logger.debug("No words to review")
            next_review = min((datetime.datetime.fromisoformat(word["next_review"]) 
                             for word in user_data["active_words"]), default=None)
            
            if next_review:
                time_diff = next_review - datetime.datetime.now()
                if time_diff.total_seconds() > 0:
                    hours = int(time_diff.total_seconds() // 3600)
                    minutes = int((time_diff.total_seconds() % 3600) // 60)
                    time_str = f"{hours}—á {minutes}–º–∏–Ω" if hours > 0 else f"{minutes}–º–∏–Ω"
                    bot.reply_to(message, 
                               f"üïí –ù–µ—Ç —Å–ª–æ–≤ –¥–ª—è –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è!\n\n–°–ª–µ–¥—É—é—â–µ–µ —á–µ—Ä–µ–∑: {time_str}",
                               reply_markup=get_main_keyboard())
                    return
            
            bot.reply_to(message, "üïí –ù–µ—Ç —Å–ª–æ–≤ –¥–ª—è –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è!", 
                        reply_markup=get_main_keyboard())
            return
        
        random.shuffle(words_to_review)
        user_data["current_session"] = words_to_review
        user_data["current_word_index"] = 0
        save_user_data(user_id, user_data)
        
        # –í–∞–∂–Ω–æ: –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–æ –ø–æ–∫–∞–∑–∞ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è
        user_states[user_id] = {
            "translation_direction": "ru_to_it",
            "awaiting_answer": True,
            "current_example": None,
            "last_activity": datetime.datetime.now().isoformat()
        }
        
        show_current_exercise(message.chat.id, user_id)
        
    except Exception as e:
        logger.error(f"Error in start_review: {e}", exc_info=True)
        bot.reply_to(message, "‚ùå –û—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.", 
                    reply_markup=get_main_keyboard())

@bot.message_handler(func=lambda message: message.text == "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
def show_statistics(message):
   """–ü–æ–∫–∞–∑ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –æ–±—É—á–µ–Ω–∏—è"""
   user_id = message.from_user.id
   logger.info(f"User {user_id} requested statistics")
   
   try:
       user_data = load_user_data(user_id)
       
       # –ü–æ–¥—Å—á–µ—Ç —Å–ª–æ–≤ –ø–æ —Å—Ç–∞—Ç—É—Å–∞–º
       active_words = user_data["active_words"]
       new_words = sum(1 for w in active_words if w["correct_answers"] == 0)
       learning_words = sum(1 for w in active_words if 0 < w["correct_answers"] < 3)
       learned_words = len(user_data["learned_words"])
       
       # –ü–æ–¥—Å—á–µ—Ç —Å–ª–æ–≤ –¥–ª—è –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è
       words_to_review = get_words_for_review(user_data)
       
       stats_message = [
           "üìä *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ–±—É—á–µ–Ω–∏—è:*\n",
           f"üìö –ê–∫—Ç–∏–≤–Ω—ã–µ —Å–ª–æ–≤–∞: {len(active_words)}",
           f"üÜï –ù–æ–≤—ã–µ —Å–ª–æ–≤–∞ (0 –æ—Ç–≤–µ—Ç–æ–≤): {new_words}",
           f"üìù –í –ø—Ä–æ—Ü–µ—Å—Å–µ (1-2 –æ—Ç–≤–µ—Ç–∞): {learning_words}",
           f"‚úÖ –ò–∑—É—á–µ–Ω–æ (3+ –æ—Ç–≤–µ—Ç–∞): {learned_words}",
           f"‚è∞ –ì–æ—Ç–æ–≤–æ –∫ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—é: {len(words_to_review)}\n",
           "–°–ª–æ–≤–æ —Å—á–∏—Ç–∞–µ—Ç—Å—è –∏–∑—É—á–µ–Ω–Ω—ã–º –ø–æ—Å–ª–µ 3 –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤",
           f"–í—Å–µ–≥–æ —Å–ª–æ–≤ –≤ —Å–ª–æ–≤–∞—Ä–µ: {len(VOCABULARY['–ë—É–¥—É –∏–∑—É—á–∞—Ç—å'])}"
       ]
       
       bot.reply_to(
           message,
           "\n".join(stats_message),
           parse_mode='Markdown',
           reply_markup=get_main_keyboard()
       )
       
   except Exception as e:
       logger.error(f"Error in show_statistics: {e}", exc_info=True)
       bot.reply_to(
           message,
           "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏",
           reply_markup=get_main_keyboard()
       )
@bot.message_handler(func=lambda message: message.text in ["üîÑ –°–º–µ–Ω–∏—Ç—å –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–µ—Ä–µ–≤–æ–¥–∞", "üîÑ –°–º–µ–Ω–∏—Ç—å –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ"])
def switch_translation_direction(message):
   """–°–º–µ–Ω–∞ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–µ—Ä–µ–≤–æ–¥–∞"""
   user_id = message.from_user.id
   logger.info(f"User {user_id} switching translation direction")
   
   try:
       state = user_states.get(user_id, {"translation_direction": "ru_to_it"})
       current_direction = state.get("translation_direction", "ru_to_it")
       new_direction = "it_to_ru" if current_direction == "ru_to_it" else "ru_to_it"
       
       # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
       awaiting_answer = state.get("awaiting_answer", False)
       current_example = state.get("current_example")
       
       user_states[user_id] = {
           "translation_direction": new_direction,
           "awaiting_answer": awaiting_answer,
           "current_example": current_example,
           "last_activity": datetime.datetime.now().isoformat()
       }
       
       direction_text = "–∏—Ç–∞–ª—å—è–Ω—Å–∫–∏–π ‚Üí —Ä—É—Å—Å–∫–∏–π" if new_direction == "it_to_ru" else "—Ä—É—Å—Å–∫–∏–π ‚Üí –∏—Ç–∞–ª—å—è–Ω—Å–∫–∏–π"
       bot.reply_to(
           message,
           f"üîÑ –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–µ—Ä–µ–≤–æ–¥–∞ –∏–∑–º–µ–Ω–µ–Ω–æ –Ω–∞:\n*{direction_text}*",
           parse_mode='Markdown'
       )
       
       # –ï—Å–ª–∏ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–∞—è —Å–µ—Å—Å–∏—è, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–æ–≤–æ–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ
       if awaiting_answer:
           show_current_exercise(message.chat.id, user_id)
           
   except Exception as e:
       logger.error(f"Error in switch_direction: {e}")
       bot.reply_to(
           message,
           "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–º–µ–Ω–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è",
           reply_markup=get_main_keyboard()
       )

@bot.message_handler(func=lambda message: message.text == "üí° –ü–æ–¥—Å–∫–∞–∑–∫–∞")
def show_hint(message):
   """–ü–æ–∫–∞–∑ –ø–æ–¥—Å–∫–∞–∑–∫–∏"""
   user_id = message.from_user.id
   logger.info(f"User {user_id} requested hint")
   
   try:
       state = user_states.get(user_id, {})
       if not state.get("awaiting_answer"):
           bot.reply_to(message, "‚ùå –°–Ω–∞—á–∞–ª–∞ –Ω–∞—á–Ω–∏—Ç–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ")
           return
       
       example = state.get("current_example")
       if not example:
           bot.reply_to(message, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ù–∞—á–Ω–∏—Ç–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ –∑–∞–Ω–æ–≤–æ")
           return
       
       if state["translation_direction"] == "ru_to_it":
           answer = example["–∏—Ç–∞–ª—å—è–Ω—Å–∫–∏–π"]
       else:
           answer = example["—Ä—É—Å—Å–∫–∏–π"]
       
       # –°–æ–∑–¥–∞–µ–º –ø–æ–¥—Å–∫–∞–∑–∫—É
       words = answer.split()
       hint_words = []
       for word in words:
           if len(word) > 0:
               hint_words.append(word[0] + '_' * (len(word)-1))
       hint = ' '.join(hint_words)
       
       bot.reply_to(
           message,
           f"üí° –ü–æ–¥—Å–∫–∞–∑–∫–∞:\n{hint}",
           reply_markup=get_exercise_keyboard()
       )
       logger.debug(f"Hint shown for user {user_id}")
       
   except Exception as e:
       logger.error(f"Error showing hint: {e}")
       bot.reply_to(
           message,
           "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞",
           reply_markup=get_exercise_keyboard()
       )

@bot.message_handler(func=lambda message: message.text == "‚û°Ô∏è –î–∞–ª–µ–µ")
def next_exercise(message):
   """–ü–µ—Ä–µ—Ö–æ–¥ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—é"""
   user_id = message.from_user.id
   logger.info(f"User {user_id} pressed Next button")
   
   try:
       user_data = load_user_data(user_id)
       
       # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –µ—â—ë —Å–ª–æ–≤–∞ –≤ —Ç–µ–∫—É—â–µ–π —Å–µ—Å—Å–∏–∏
       current_session = user_data.get("current_session", [])
       current_index = user_data.get("current_word_index", 0)
       
       if not current_session or current_index >= len(current_session) - 1:
           # –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ –Ω–æ–≤—ã–µ —Å–ª–æ–≤–∞ –¥–ª—è –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è
           words_to_review = get_words_for_review(user_data)
           if not words_to_review:
               bot.reply_to(
                   message,
                   "–°–µ—Å—Å–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–µ—Ç —Å–ª–æ–≤ –¥–ª—è –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è.",
                   reply_markup=get_main_keyboard()
               )
               return
               
           # –ù–∞—á–∏–Ω–∞–µ–º –Ω–æ–≤—É—é —Å–µ—Å—Å–∏—é
           random.shuffle(words_to_review)
           user_data["current_session"] = words_to_review
           user_data["current_word_index"] = 0
       else:
           # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —Å–ª–æ–≤—É
           user_data["current_word_index"] += 1
       
       save_user_data(user_id, user_data)
       
       # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
       state = user_states.get(user_id, {})
       state["awaiting_answer"] = True
       user_states[user_id] = state
       
       show_current_exercise(message.chat.id, user_id)
       
   except Exception as e:
       logger.error(f"Error in next_exercise: {e}")
       bot.reply_to(
           message,
           "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ.",
           reply_markup=get_main_keyboard()
       )

@bot.message_handler(func=lambda message: message.text == "üîÑ –ü–æ–≤—Ç–æ—Ä–∏—Ç—å")
def retry_answer(message):
   """–ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞"""
   user_id = message.from_user.id
   logger.info(f"User {user_id} retrying answer")
   
   try:
       state = user_states.get(user_id, {})
       state["awaiting_answer"] = True
       user_states[user_id] = state
       
       show_current_exercise(message.chat.id, user_id)
       
   except Exception as e:
       logger.error(f"Error in retry: {e}")
       bot.reply_to(
           message,
           "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ.",
           reply_markup=get_main_keyboard()
       )

@bot.message_handler(func=lambda message: message.text == "‚è© –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å")
def skip_word(message):
   """–ü—Ä–æ–ø—É—Å–∫ —Ç–µ–∫—É—â–µ–≥–æ —Å–ª–æ–≤–∞"""
   user_id = message.from_user.id
   logger.info(f"User {user_id} skipping word")
   
   try:
       user_data = load_user_data(user_id)
       
       if not user_data.get("current_session"):
           return
           
       # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —Å–ª–æ–≤—É –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
       user_data["current_word_index"] += 1
       save_user_data(user_id, user_data)
       
       bot.reply_to(message, "‚è© –°–ª–æ–≤–æ –ø—Ä–æ–ø—É—â–µ–Ω–æ")
       show_current_exercise(message.chat.id, user_id)
       
   except Exception as e:
       logger.error(f"Error skipping word: {e}")
       bot.reply_to(
           message,
           "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞",
           reply_markup=get_main_keyboard()
       )
@bot.message_handler(func=lambda message: message.text == "üèÅ –ó–∞–≤–µ—Ä—à–∏—Ç—å –∑–∞–Ω—è—Ç–∏–µ")
def end_session(message):
   """–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–π —Å–µ—Å—Å–∏–∏"""
   user_id = message.from_user.id
   logger.info(f"User {user_id} ending session")
   
   try:
       user_data = load_user_data(user_id)
       
       # –ù–∞—Ö–æ–¥–∏–º –≤—Ä–µ–º—è —Å–ª–µ–¥—É—é—â–µ–≥–æ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è
       current_time = datetime.datetime.now()
       next_review = None
       
       for word in user_data["active_words"]:
           try:
               review_time = datetime.datetime.fromisoformat(word["next_review"])
               if next_review is None or review_time < next_review:
                   next_review = review_time
           except:
               continue
       
       # –û—á–∏—â–∞–µ–º —Ç–µ–∫—É—â—É—é —Å–µ—Å—Å–∏—é
       user_data["current_session"] = []
       user_data["current_word_index"] = 0
       save_user_data(user_id, user_data)
       
       # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
       summary_text = ["üèÅ *–ó–∞–Ω—è—Ç–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!*\n"]
       
       if next_review and next_review > current_time:
           time_diff = next_review - current_time
           hours = int(time_diff.total_seconds() // 3600)
           minutes = int((time_diff.total_seconds() % 3600) // 60)
           time_str = f"{hours}—á {minutes}–º–∏–Ω" if hours > 0 else f"{minutes}–º–∏–Ω"
           summary_text.append(f"‚è∞ –°–ª–µ–¥—É—é—â–µ–µ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–µ —á–µ—Ä–µ–∑: *{time_str}*\n")
           
           # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Ä–µ–º—è —Å–ª–µ–¥—É—é—â–µ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
           user_states[user_id] = {
               "translation_direction": "ru_to_it",
               "awaiting_answer": False,
               "next_notification": next_review.isoformat(),
               "last_activity": current_time.isoformat()
           }
           
           summary_text.append("–Ø –ø—Ä–∏—à–ª—é —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ, –∫–æ–≥–¥–∞ –ø—Ä–∏–¥–µ—Ç –≤—Ä–µ–º—è!")
       
       bot.reply_to(
           message,
           "\n".join(summary_text),
           parse_mode='Markdown',
           reply_markup=get_main_keyboard()
       )
       
   except Exception as e:
       logger.error(f"Error ending session: {e}", exc_info=True)
       bot.reply_to(
           message,
           "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –°–µ—Å—Å–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞.",
           reply_markup=get_main_keyboard()
       )

@bot.message_handler(func=lambda message: True)
def handle_answer(message):
   """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
   user_id = message.from_user.id
   logger.debug(f"Received message from user {user_id}: {message.text}")
   
   state = user_states.get(user_id, {})
   if not state.get("awaiting_answer"):
       return

   try:
       user_data = load_user_data(user_id)
       
       if not user_data["current_session"]:
           logger.debug("No current session")
           return

       current_word = user_data["active_words"][user_data["current_word_index"]]
       example = state.get("current_example")
       
       if not example:
           logger.error(f"No current example found for user {user_id}")
           bot.reply_to(message, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ù–∞—á–Ω–∏—Ç–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ –∑–∞–Ω–æ–≤–æ")
           return

       # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç–≤–µ—Ç
       if state["translation_direction"] == "ru_to_it":
           correct_answer = example["–∏—Ç–∞–ª—å—è–Ω—Å–∫–∏–π"]
           alternatives = example.get("–∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤—ã_–∏—Ç", [])
       else:
           correct_answer = example["—Ä—É—Å—Å–∫–∏–π"]
           alternatives = example.get("–∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤—ã_—Ä—É—Å", [])

       is_correct = check_answer(message.text, correct_answer, alternatives)
       logger.debug(f"Answer check result: {is_correct}")

       # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å —Å–ª–æ–≤–∞
       if is_correct:
           # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤
           current_word["correct_answers"] = current_word.get("correct_answers", 0) + 1
           
           # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è —Å–ª–µ–¥—É—é—â–µ–≥–æ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è
           next_interval = calculate_next_interval(current_word["correct_answers"])
           current_word["next_review"] = (
               datetime.datetime.now() + 
               datetime.timedelta(hours=next_interval)
           ).isoformat()
           
           # –ï—Å–ª–∏ —Å–ª–æ–≤–æ –∏–∑—É—á–µ–Ω–æ (3+ –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–∞)
           if current_word["correct_answers"] >= 3:
               logger.debug(f"Word {current_word['word']} learned")
               user_data["learned_words"].append(current_word)
               user_data["active_words"].remove(current_word)
               
               # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–ª–æ–≤–æ –µ—Å–ª–∏ –µ—Å—Ç—å
               if user_data["remaining_words"]:
                   new_word = random.choice(user_data["remaining_words"])
                   user_data["remaining_words"].remove(new_word)
                   
                   word_data = VOCABULARY["–ë—É–¥—É –∏–∑—É—á–∞—Ç—å"][new_word]
                   user_data["active_words"].append({
                       "word": new_word,
                       "translation": word_data["–ø–µ—Ä–µ–≤–æ–¥"],
                       "correct_answers": 0,
                       "next_review": datetime.datetime.now().isoformat(),
                       "total_attempts": 0
                   })

       # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
       save_user_data(user_id, user_data)

       # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
       progress_bar = "üü¢" * current_word["correct_answers"] + "‚ö™Ô∏è" * (3 - current_word["correct_answers"])

       if is_correct:
           response = (
               "‚úÖ *–ü—Ä–∞–≤–∏–ª—å–Ω–æ!*\n\n"
               f"–í–∞—à –æ—Ç–≤–µ—Ç: _{message.text}_\n"
               f"–ü—Ä–æ–≥—Ä–µ—Å—Å: {progress_bar}"
           )
           markup = get_next_keyboard()
       else:
           response = (
               "‚ùå *–û—à–∏–±–∫–∞!*\n\n"
               f"–í–∞—à –æ—Ç–≤–µ—Ç: _{message.text}_\n"
               f"–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: *{correct_answer}*\n"
               f"–ü—Ä–æ–≥—Ä–µ—Å—Å: {progress_bar}"
           )
           markup = get_retry_keyboard()

       # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
       state["awaiting_answer"] = False
       state["last_activity"] = datetime.datetime.now().isoformat()
       user_states[user_id] = state

       bot.reply_to(
           message,
           response,
           parse_mode='Markdown',
           reply_markup=markup
       )

   except Exception as e:
       logger.error(f"Error handling answer: {e}", exc_info=True)
       bot.reply_to(
           message,
           "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ.",
           reply_markup=get_main_keyboard()
       )
def check_and_send_notifications():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
    logger.info("Starting notifications checker")
    notification_cache = {}
    
    while True:
        try:
            current_time = datetime.datetime.now()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–∞–π–ª—ã —Ä–∞–∑ –≤ 5 –º–∏–Ω—É—Ç
            if not hasattr(check_and_send_notifications, 'last_check') or \
               (current_time - check_and_send_notifications.last_check).total_seconds() >= 300:
                
                if os.path.exists('user_data'):
                    for filename in os.listdir('user_data'):
                        if not filename.startswith('user_') or not filename.endswith('.json'):
                            continue
                            
                        try:
                            user_id = int(filename.split('_')[1].split('.')[0])
                            
                            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
                            if user_id in notification_cache:
                                last_notification = notification_cache[user_id]
                                if (current_time - last_notification).total_seconds() < 1800:  # 30 –º–∏–Ω—É—Ç
                                    continue
                            
                            user_data = load_user_data(user_id)
                            words = get_words_for_review(user_data)
                            
                            if len(words) > 0:
                                try:
                                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π
                                    state = user_states.get(user_id, {})
                                    last_activity = datetime.datetime.fromisoformat(
                                        state.get('last_activity', '2000-01-01T00:00:00')
                                    )
                                    
                                    # –ù–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–∫—Ç–∏–≤–µ–Ω
                                    if state.get('awaiting_answer') or \
                                       (current_time - last_activity).total_seconds() < 300:  # 5 –º–∏–Ω—É—Ç
                                        continue
                                    
                                    notification_text = (
                                        "üîî *–ü–æ—Ä–∞ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å —Å–ª–æ–≤–∞!*\n\n"
                                        f"–£ –≤–∞—Å {len(words)} —Å–ª–æ–≤ –≥–æ—Ç–æ–≤–æ –∫ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—é:\n"
                                        + "\n".join(f"‚Ä¢ {word['word']} - {word['translation']}" 
                                                  for word in words[:3])
                                    )
                                    
                                    if len(words) > 3:
                                        notification_text += f"\n\n... –∏ –µ—â—ë {len(words) - 3} —Å–ª–æ–≤"
                                    
                                    bot.send_message(
                                        user_id,
                                        notification_text,
                                        parse_mode='Markdown',
                                        reply_markup=get_main_keyboard()
                                    )
                                    
                                    notification_cache[user_id] = current_time
                                    logger.info(f"Notification sent to user {user_id}")
                                    
                                except telebot.apihelper.ApiException as e:
                                    if "bot was blocked by the user" in str(e):
                                        logger.warning(f"User {user_id} blocked the bot")
                                    else:
                                        logger.error(f"API error for user {user_id}: {e}")
                                except Exception as e:
                                    logger.error(f"Error sending notification to user {user_id}: {e}")
                                    
                        except Exception as e:
                            logger.error(f"Error processing user {filename}: {e}")
                            continue
                            
                check_and_send_notifications.last_check = current_time
                
            time.sleep(60)  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É
            
        except Exception as e:
            logger.error(f"Error in notification checker: {e}")
            time.sleep(60)
            

def run_bot():
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π —Å–µ—Ç–µ–≤—ã—Ö –æ—à–∏–±–æ–∫"""
    logger.info("=== Starting Bot ===")
    logger.info(f"Vocabulary size: {len(VOCABULARY['–ë—É–¥—É –∏–∑—É—á–∞—Ç—å'])} words")
    
    # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Ç–∞–π–º–∞—É—Ç—ã
    telebot.apihelper.CONNECT_TIMEOUT = 30
    telebot.apihelper.READ_TIMEOUT = 30
    telebot.apihelper.RETRY_ON_ERROR = True
    
    def check_connection():
        try:
            import socket
            import requests
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —á–µ—Ä–µ–∑ requests
            response = requests.get('https://api.telegram.org', timeout=5)
            return response.status_code == 200
        except:
            return False
    
    def start_bot():
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
            retry_count = 0
            while not check_connection():
                retry_count += 1
                wait_time = min(retry_count * 5, 60)  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è, –Ω–æ –Ω–µ –±–æ–ª—å—à–µ –º–∏–Ω—É—Ç—ã
                logger.error(f"No connection to Telegram API. Waiting {wait_time} seconds...")
                time.sleep(wait_time)
            
            # –û—á–∏—â–∞–µ–º webhook –∏ —Å—Ç–∞—Ä—ã–µ –∞–ø–¥–µ–π—Ç—ã
            try:
                bot.delete_webhook()
                logger.info("Webhook deleted")
                bot.get_updates(offset=-1, timeout=1)
                logger.info("Updates cleared")
            except Exception as e:
                logger.error(f"Error clearing updates: {e}")
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
            notification_thread = threading.Thread(
                target=check_and_send_notifications,
                daemon=True
            )
            notification_thread.start()
            logger.info("Notification thread started")
            
            # –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫
            while True:
                try:
                    logger.info("Starting bot polling...")
                    bot.infinity_polling(
                        timeout=50,  # –£–≤–µ–ª–∏—á–µ–Ω–Ω—ã–π —Ç–∞–π–º–∞—É—Ç
                        long_polling_timeout=60,  # –£–≤–µ–ª–∏—á–µ–Ω–Ω—ã–π —Ç–∞–π–º–∞—É—Ç long polling
                        logger_level=logging.ERROR,
                        restart_on_change=True,  # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —Ä–µ—Å—Ç–∞—Ä—Ç –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è—Ö
                        skip_pending=True,
                        allowed_updates=["message"]  # –¢–æ–ª—å–∫–æ —Å–æ–æ–±—â–µ–Ω–∏—è
                    )
                except (requests.ReadTimeout, requests.ConnectionError) as e:
                    logger.error(f"Network error: {e}")
                    time.sleep(15)  # –ñ–¥–µ–º 15 —Å–µ–∫—É–Ω–¥ –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–æ–π
                    continue
                except Exception as e:
                    logger.error(f"Polling error: {e}")
                    if not check_connection():
                        logger.error("Connection lost. Waiting to reconnect...")
                        time.sleep(30)
                    else:
                        time.sleep(10)
                    continue
                    
        except Exception as e:
            logger.error(f"Critical error in start_bot: {e}")
            time.sleep(30)
    
    # –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–æ–º
    while True:
        try:
            start_bot()
        except KeyboardInterrupt:
            logger.info("Bot stopped by user")
            break
        except Exception as e:
            logger.error(f"Fatal error: {e}")
            time.sleep(60)  # –ñ–¥–µ–º –º–∏–Ω—É—Ç—É –ø–µ—Ä–µ–¥ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–æ–º
            continue

if __name__ == "__main__":
    try:
        import signal
        def signal_handler(sig, frame):
            logger.info("Received stop signal, shutting down...")
            os._exit(0)
        signal.signal(signal.SIGINT, signal_handler)
        
        run_bot()
    except KeyboardInterrupt:
        logger.info("Bot stopped by user")
    except Exception as e:
        logger.error(f"Fatal error: {e}")
        raise