# import telebot
# from telebot import types
# import json
# import datetime
# import time
# import random
# import os
# import logging
# from typing import Dict, Optional
# from vocabulary import VOCABULARY

# # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
# logging.basicConfig(
    # level=logging.INFO,
    # format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    # handlers=[
        # logging.FileHandler('italian_bot.log', encoding='utf-8'),
        # logging.StreamHandler()
    # ]
# )
# logger = logging.getLogger(__name__)

# # –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –±–æ—Ç–∞
# TOKEN = 'YOUR_BOT_TOKEN'
# bot = telebot.TeleBot(TOKEN)

import telebot
from telebot import types
import json
import datetime
import time
import random
import os
import logging
import threading
from typing import Dict, Optional
from vocabulary import VOCABULARY

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('italian_bot.log', encoding='utf-8'),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –±–æ—Ç–∞
TOKEN = "7312843542:AAHVDxaHYSveOpitmkWagTFoMVNzYF4_tMU"
bot = telebot.TeleBot(TOKEN)

# –ì–ª–æ–±–∞–ª—å–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ —Å–æ—Å—Ç–æ—è–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_states = {}

# # –ì–ª–æ–±–∞–ª—å–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ —Å–æ—Å—Ç–æ—è–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
# user_states = {}

# def get_main_keyboard():
    # """–°–æ–∑–¥–∞–Ω–∏–µ –æ—Å–Ω–æ–≤–Ω–æ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã"""
    # markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    # markup.row(types.KeyboardButton("üéØ –ù–∞—á–∞—Ç—å –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–µ"))
    # markup.row(
        # types.KeyboardButton("üîÑ –°–º–µ–Ω–∏—Ç—å –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–µ—Ä–µ–≤–æ–¥–∞"),
        # types.KeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
    # )
    # markup.row(types.KeyboardButton("‚ÑπÔ∏è –ü–æ–º–æ—â—å"))
    # return markup
    
def get_main_keyboard():
    """–°–æ–∑–¥–∞–Ω–∏–µ –æ—Å–Ω–æ–≤–Ω–æ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã"""
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.row(types.KeyboardButton("üéØ –ù–∞—á–∞—Ç—å –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–µ"))
    markup.row(
        types.KeyboardButton("üîÑ –°–º–µ–Ω–∏—Ç—å –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–µ—Ä–µ–≤–æ–¥–∞"),
        types.KeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
    )
    markup.row(types.KeyboardButton("‚ÑπÔ∏è –ü–æ–º–æ—â—å"))  # –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ç–æ—á–Ω–æ–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —ç–º–æ–¥–∑–∏
    return markup
    

def get_exercise_keyboard():
    """–°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è"""
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.row(types.KeyboardButton("üí° –ü–æ–¥—Å–∫–∞–∑–∫–∞"))
    markup.row(
        types.KeyboardButton("üîÑ –°–º–µ–Ω–∏—Ç—å –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ"),
        types.KeyboardButton("‚è© –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å")
    )
    return markup

def normalize_text(text: str) -> str:
    """–ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è —Ç–µ–∫—Å—Ç–∞ –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è"""
    # –ü—Ä–∏–≤–æ–¥–∏–º –∫ –Ω–∏–∂–Ω–µ–º—É —Ä–µ–≥–∏—Å—Ç—Ä—É
    text = text.lower()
    
    # –ó–∞–º–µ–Ω—ã –¥–ª—è –∏—Ç–∞–ª—å—è–Ω—Å–∫–∏—Ö –±—É–∫–≤
    replacements = {
        '√†': 'a',
        '√®': 'e',
        '√©': 'e',
        '√¨': 'i',
        '√≠': 'i',
        '√≤': 'o',
        '√≥': 'o',
        '√π': 'u',
        '√∫': 'u'
    }
    
    # –ü—Ä–∏–º–µ–Ω—è–µ–º –∑–∞–º–µ–Ω—ã
    for old, new in replacements.items():
        text = text.replace(old, new)
    
    # –£–¥–∞–ª—è–µ–º –¥–≤–æ–π–Ω—ã–µ –ø—Ä–æ–±–µ–ª—ã
    text = ' '.join(text.split())
    
    return text

def load_user_schedule(user_id: int) -> Optional[dict]:
    """–ó–∞–≥—Ä—É–∑–∫–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    schedule_path = f'user_schedules/schedule_{user_id}.json'
    try:
        if not os.path.exists('user_schedules'):
            os.makedirs('user_schedules')
            
        if os.path.exists(schedule_path):
            with open(schedule_path, 'r', encoding='utf-8') as f:
                return json.load(f)
        return create_initial_schedule(user_id)
    except Exception as e:
        logger.error(f"Error loading schedule for user {user_id}: {e}")
        return None

def create_initial_schedule(user_id: int) -> dict:
    """–°–æ–∑–¥–∞–Ω–∏–µ –Ω–∞—á–∞–ª—å–Ω–æ–≥–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –¥–ª—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    current_time = datetime.datetime.now()
    schedule = {
        "user_id": user_id,
        "words": []
    }
    
    for i, word in enumerate(VOCABULARY["–ë—É–¥—É –∏–∑—É—á–∞—Ç—å"].keys()):
        next_review = (current_time if i == 0 
                     else current_time + datetime.timedelta(minutes=5*i))
        schedule["words"].append({
            "word": word,
            "translation": VOCABULARY["–ë—É–¥—É –∏–∑—É—á–∞—Ç—å"][word]["–ø–µ—Ä–µ–≤–æ–¥"],
            "next_review": next_review.isoformat(),
            "current_interval": 4,
            "repetitions": 0
        })
    
    schedule_path = f'user_schedules/schedule_{user_id}.json'
    with open(schedule_path, 'w', encoding='utf-8') as f:
        json.dump(schedule, f, ensure_ascii=False, indent=2)
        
    return schedule

def calculate_next_interval(word: dict, was_correct: bool) -> int:
    """–†–∞—Å—á–µ—Ç —Å–ª–µ–¥—É—é—â–µ–≥–æ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è"""
    if not was_correct:
        return 1  # –ü–æ–≤—Ç–æ—Ä–∏—Ç—å —á–µ—Ä–µ–∑ —á–∞—Å –ø—Ä–∏ –æ—à–∏–±–∫–µ
    
    current_interval = word.get("current_interval", 4)
    repetitions = word.get("repetitions", 0)
    
    intervals = [4, 8, 24, 72, 168, 336, 672]  # —á–∞—Å—ã
    
    for interval in intervals:
        if current_interval < interval:
            return interval
            
    return current_interval * 2
	
def update_word_schedule(user_id: int, word: dict, next_interval: int, was_correct: bool):
    """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –¥–ª—è —Å–ª–æ–≤–∞"""
    try:
        schedule_path = f'user_schedules/schedule_{user_id}.json'
        with open(schedule_path, 'r', encoding='utf-8') as f:
            schedule = json.load(f)

        for w in schedule["words"]:
            if w["word"] == word["word"]:
                next_review = (datetime.datetime.now() + 
                             datetime.timedelta(hours=next_interval)).isoformat()
                w["next_review"] = next_review
                
                if was_correct:
                    w["current_interval"] = next_interval
                    w["repetitions"] = w.get("repetitions", 0) + 1
                else:
                    w["current_interval"] = 1
                    w["repetitions"] = 0
                break

        with open(schedule_path, 'w', encoding='utf-8') as f:
            json.dump(schedule, f, ensure_ascii=False, indent=2)
            
    except Exception as e:
        logger.error(f"Error updating schedule for user {user_id}: {e}")

def get_next_review_time(user_id: int) -> Optional[datetime.datetime]:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ —Å–ª–µ–¥—É—é—â–µ–≥–æ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è"""
    try:
        schedule = load_user_schedule(user_id)
        if not schedule or not schedule["words"]:
            return None
            
        current_time = datetime.datetime.now()
        next_times = []
        
        for word in schedule["words"]:
            review_time = datetime.datetime.fromisoformat(word["next_review"])
            if review_time > current_time:
                next_times.append(review_time)
                
        return min(next_times) if next_times else None
    except Exception as e:
        logger.error(f"Error getting next review time for user {user_id}: {e}")
        return None

def format_time_until(target_time: datetime.datetime) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è"""
    time_diff = target_time - datetime.datetime.now()
    hours = int(time_diff.total_seconds() // 3600)
    minutes = int((time_diff.total_seconds() % 3600) // 60)
    
    if hours > 0:
        return f"{hours}—á {minutes}–º–∏–Ω"
    return f"{minutes}–º–∏–Ω"

@bot.message_handler(commands=['start'])
def send_welcome(message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start"""
    try:
        user_id = message.from_user.id
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if user_id not in user_states:
            user_states[user_id] = {
                "translation_direction": "ru_to_it",
                "awaiting_answer": False
            }
        
        # –û—Ç–ø—Ä–∞–≤–∫–∞ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
        welcome_text = (
            "üëã *–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è –∏—Ç–∞–ª—å—è–Ω—Å–∫–æ–≥–æ —è–∑—ã–∫–∞.*\n\n"
            "*–ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è:*\n"
            "üéØ –ù–∞–∂–º–∏—Ç–µ '–ù–∞—á–∞—Ç—å –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–µ'\n"
            "üîÑ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ '–°–º–µ–Ω–∏—Ç—å –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ' –¥–ª—è –≤—ã–±–æ—Ä–∞ —è–∑—ã–∫–∞ –ø–µ—Ä–µ–≤–æ–¥–∞\n"
            "üìä –°–ª–µ–¥–∏—Ç–µ –∑–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å–æ–º –≤ '–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–µ'\n"
            "‚ùì –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ '–ü–æ–º–æ—â—å' –¥–ª—è –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏\n\n"
            "–ì–æ—Ç–æ–≤—ã –Ω–∞—á–∞—Ç—å? üòä"
        )
        
        bot.reply_to(
            message,
            welcome_text,
            parse_mode='Markdown',
            reply_markup=get_main_keyboard()
        )
        
    except Exception as e:
        logger.error(f"Error in send_welcome: {e}")
        bot.reply_to(
            message,
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        )

@bot.message_handler(commands=['help'])
def send_help(message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /help"""
    help_text = (
        "*–ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º:*\n\n"
        "1Ô∏è‚É£ *–ù–∞—á–∞–ª–æ —Ä–∞–±–æ—Ç—ã:*\n"
        "‚Ä¢ –ù–∞–∂–º–∏—Ç–µ 'üéØ –ù–∞—á–∞—Ç—å –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–µ'\n"
        "‚Ä¢ –í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–µ—Ä–µ–≤–æ–¥–∞\n\n"
        "2Ô∏è‚É£ *–í–æ –≤—Ä–µ–º—è —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è:*\n"
        "‚Ä¢ –í–≤–µ–¥–∏—Ç–µ –ø–µ—Ä–µ–≤–æ–¥ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω–æ–≥–æ —Å–ª–æ–≤–∞/—Ñ—Ä–∞–∑—ã\n"
        "‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ 'üí° –ü–æ–¥—Å–∫–∞–∑–∫–∞' –µ—Å–ª–∏ –Ω—É–∂–Ω–∞ –ø–æ–º–æ—â—å\n"
        "‚Ä¢ 'üîÑ –ü–æ–≤—Ç–æ—Ä–∏—Ç—å' - –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–∏\n"
        "‚Ä¢ '‚û°Ô∏è –î–∞–ª–µ–µ' - –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ —Å–ª–æ–≤–∞\n\n"
        "3Ô∏è‚É£ *–°–∏—Å—Ç–µ–º–∞ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è:*\n"
        "‚Ä¢ –ü—Ä–∏ –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–∞—Ö –∏–Ω—Ç–µ—Ä–≤–∞–ª—ã —É–≤–µ–ª–∏—á–∏–≤–∞—é—Ç—Å—è\n"
        "‚Ä¢ –ü—Ä–∏ –æ—à–∏–±–∫–∞—Ö —Å–ª–æ–≤–∞ –ø–æ–≤—Ç–æ—Ä—è—é—Ç—Å—è —á–∞—â–µ\n"
        "‚Ä¢ –ë–æ—Ç –Ω–∞–ø–æ–º–Ω–∏—Ç –æ –≤—Ä–µ–º–µ–Ω–∏ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è\n\n"
        "4Ô∏è‚É£ *–û—Ü–µ–Ω–∫–∞ –æ—Ç–≤–µ—Ç–æ–≤:*\n"
        "‚Ä¢ ‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç - –∏–Ω—Ç–µ—Ä–≤–∞–ª —É–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç—Å—è\n"
        "‚Ä¢ ‚ùå –û—à–∏–±–∫–∞ - —Å–ª–æ–≤–æ –≤–µ—Ä–Ω—ë—Ç—Å—è –¥–ª—è –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è —á–µ—Ä–µ–∑ —á–∞—Å\n"
        "‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø–æ–¥—Å–∫–∞–∑–∫–∏, –µ—Å–ª–∏ –∑–∞—Ç—Ä—É–¥–Ω—è–µ—Ç–µ—Å—å\n\n"
        "*–ö–æ–º–∞–Ω–¥—ã:*\n"
        "/start - –ù–∞—á–∞—Ç—å —Å–Ω–∞—á–∞–ª–∞\n"
        "/review - –ù–∞—á–∞—Ç—å –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–µ\n"
        "/switch - –°–º–µ–Ω–∏—Ç—å –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–µ—Ä–µ–≤–æ–¥–∞"
    )
    
    bot.reply_to(
        message,
        help_text,
        parse_mode='Markdown',
        reply_markup=get_main_keyboard()
    )

@bot.message_handler(func=lambda message: message.text == "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
def show_statistics(message):
    """–ü–æ–∫–∞–∑ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –æ–±—É—á–µ–Ω–∏—è"""
    try:
        user_id = message.from_user.id
        schedule = load_user_schedule(user_id)
        
        if not schedule:
            bot.reply_to(message, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏")
            return
            
        total_words = len(schedule["words"])
        learned_words = sum(1 for word in schedule["words"] if word.get("repetitions", 0) >= 3)
        in_progress = sum(1 for word in schedule["words"] if 0 < word.get("repetitions", 0) < 3)
        
        stats_message = (
            "üìä *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ–±—É—á–µ–Ω–∏—è:*\n\n"
            f"üìö –í—Å–µ–≥–æ —Å–ª–æ–≤: {total_words}\n"
            f"‚úÖ –ò–∑—É—á–µ–Ω–æ: {learned_words}\n"
            f"üìù –í –ø—Ä–æ—Ü–µ—Å—Å–µ: {in_progress}\n"
            f"üÜï –ù–µ –Ω–∞—á–∞—Ç–æ: {total_words - learned_words - in_progress}\n\n"
            "_–°–ª–æ–≤–æ —Å—á–∏—Ç–∞–µ—Ç—Å—è –∏–∑—É—á–µ–Ω–Ω—ã–º –ø–æ—Å–ª–µ 3 –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–π_"
        )
        
        next_review = get_next_review_time(user_id)
        if next_review:
            time_str = format_time_until(next_review)
            stats_message += f"\n\n‚è∞ –°–ª–µ–¥—É—é—â–µ–µ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–µ —á–µ—Ä–µ–∑: *{time_str}*"
        
        bot.reply_to(
            message,
            stats_message,
            parse_mode='Markdown',
            reply_markup=get_main_keyboard()
        )
        
    except Exception as e:
        logger.error(f"Error in show_statistics: {e}")
        bot.reply_to(
            message,
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"
        )
@bot.message_handler(func=lambda message: message.text in ["üéØ –ù–∞—á–∞—Ç—å –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–µ", "/review"])
def start_review(message):
    """–ù–∞—á–∞–ª–æ —Å–µ—Å—Å–∏–∏ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è"""
    try:
        user_id = message.from_user.id
        
        if user_id not in user_states:
            user_states[user_id] = {
                "translation_direction": "ru_to_it",
                "current_word_index": 0,
                "words_to_review": [],
                "awaiting_answer": False
            }
        
        schedule = load_user_schedule(user_id)
        if not schedule:
            bot.reply_to(message, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è.")
            return
            
        current_time = datetime.datetime.now()
        words_to_review = []
        
        for word in schedule["words"]:
            next_review = datetime.datetime.fromisoformat(word["next_review"])
            if next_review <= current_time:
                words_to_review.append(word)
        
        if not words_to_review:
            next_review = get_next_review_time(user_id)
            if next_review:
                time_str = format_time_until(next_review)
                bot.reply_to(
                    message,
                    f"üïí –°–µ–π—á–∞—Å –Ω–µ—Ç —Å–ª–æ–≤ –¥–ª—è –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è!\n\n–°–ª–µ–¥—É—é—â–µ–µ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–µ —á–µ—Ä–µ–∑: *{time_str}*",
                    parse_mode='Markdown',
                    reply_markup=get_main_keyboard()
                )
            else:
                bot.reply_to(
                    message,
                    "üïí –°–µ–π—á–∞—Å –Ω–µ—Ç —Å–ª–æ–≤ –¥–ª—è –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è!",
                    reply_markup=get_main_keyboard()
                )
            return
        
        user_states[user_id].update({
            "words_to_review": words_to_review,
            "current_word_index": 0,
            "awaiting_answer": True
        })
        
        show_current_exercise(message.chat.id, user_id)
        
    except Exception as e:
        logger.error(f"Error in start_review: {e}")
        bot.reply_to(
            message,
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞—á–∞–ª–µ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è"
        )

def show_current_exercise(chat_id: int, user_id: int):
    """–ü–æ–∫–∞–∑ —Ç–µ–∫—É—â–µ–≥–æ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è"""
    try:
        state = user_states[user_id]
        words = state["words_to_review"]
        current_index = state["current_word_index"]
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤—Å–µ—Ö —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π
        if current_index >= len(words):
            next_review = get_next_review_time(user_id)
            
            completion_message = (
                "üéâ *–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º!*\n"
                "–í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–∏–ª–∏ –≤—Å–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è!\n\n"
            )
            
            if next_review:
                time_str = format_time_until(next_review)
                completion_message += (
                    f"‚è∞ –°–ª–µ–¥—É—é—â–µ–µ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–µ —á–µ—Ä–µ–∑: *{time_str}*\n"
                    "–Ø –ø—Ä–∏—à–ª—é —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ, –∫–æ–≥–¥–∞ –ø—Ä–∏–¥–µ—Ç –≤—Ä–µ–º—è!"
                )
            
            bot.send_message(
                chat_id,
                completion_message,
                parse_mode='Markdown',
                reply_markup=get_main_keyboard()
            )
            
            # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user_states[user_id] = {
                "translation_direction": state["translation_direction"],
                "awaiting_answer": False
            }
            return

        # –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —Ç–µ–∫—É—â–µ–≥–æ —Å–ª–æ–≤–∞
        word = words[current_index]
        word_data = VOCABULARY["–ë—É–¥—É –∏–∑—É—á–∞—Ç—å"][word["word"]]
        example = random.choice(word_data["–ø—Ä–∏–º–µ—Ä—ã"])
        
        # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–µ—Ä–µ–≤–æ–¥–∞
        translation_direction = state["translation_direction"]
        if translation_direction == "ru_to_it":
            question = example["—Ä—É—Å—Å–∫–∏–π"]
            correct_answer = example["–∏—Ç–∞–ª—å—è–Ω—Å–∫–∏–π"]
            direction_text = "–∏—Ç–∞–ª—å—è–Ω—Å–∫–∏–π"
        else:
            question = example["–∏—Ç–∞–ª—å—è–Ω—Å–∫–∏–π"]
            correct_answer = example["—Ä—É—Å—Å–∫–∏–π"]
            direction_text = "—Ä—É—Å—Å–∫–∏–π"
        
        # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        message_text = (
            f"*{word['word']} - {word['translation']}*\n\n"
            f"–ü–µ—Ä–µ–≤–µ–¥–∏—Ç–µ –Ω–∞ {direction_text}:\n"
            f"*{question}*\n\n"
            f"_–°–ª–æ–≤–æ {current_index + 1} –∏–∑ {len(words)}_"
        )
        
        # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è
        bot.send_message(
            chat_id,
            message_text,
            parse_mode='Markdown',
            reply_markup=get_exercise_keyboard()
        )
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        state["awaiting_answer"] = True
        
    except Exception as e:
        logger.error(f"Error in show_current_exercise: {e}")
        bot.send_message(
            chat_id,
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è",
            reply_markup=get_main_keyboard()
        )

@bot.message_handler(func=lambda message: message.text == "üí° –ü–æ–¥—Å–∫–∞–∑–∫–∞")
def show_hint(message):
    """–ü–æ–∫–∞–∑ –ø–æ–¥—Å–∫–∞–∑–∫–∏"""
    try:
        user_id = message.from_user.id
        if user_id not in user_states or not user_states[user_id]["awaiting_answer"]:
            bot.reply_to(message, "‚ùå –°–Ω–∞—á–∞–ª–∞ –Ω–∞—á–Ω–∏—Ç–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ")
            return
            
        state = user_states[user_id]
        word = state["words_to_review"][state["current_word_index"]]
        word_data = VOCABULARY["–ë—É–¥—É –∏–∑—É—á–∞—Ç—å"][word["word"]]
        example = random.choice(word_data["–ø—Ä–∏–º–µ—Ä—ã"])
        
        if state["translation_direction"] == "ru_to_it":
            answer = example["–∏—Ç–∞–ª—å—è–Ω—Å–∫–∏–π"]
        else:
            answer = example["—Ä—É—Å—Å–∫–∏–π"]
        
        # –°–æ–∑–¥–∞–µ–º –ø–æ–¥—Å–∫–∞–∑–∫—É (–ø–µ—Ä–≤—ã–µ –±—É–∫–≤—ã)
        words = answer.split()
        hint_words = []
        for word in words:
            if len(word) > 0:
                hint_words.append(word[0] + '_' * (len(word)-1))
        hint = ' '.join(hint_words)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Å–∫–∞–∑–∫—É
        bot.reply_to(
            message,
            f"üí° –ü–æ–¥—Å–∫–∞–∑–∫–∞:\n{hint}",
            reply_markup=get_exercise_keyboard()
        )
        
    except Exception as e:
        logger.error(f"Error in show_hint: {e}")
        bot.reply_to(message, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ –ø–æ–¥—Å–∫–∞–∑–∫–∏")
@bot.message_handler(func=lambda message: message.text in ["üîÑ –°–º–µ–Ω–∏—Ç—å –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ", "/switch"])
def switch_translation_direction(message):
    """–°–º–µ–Ω–∞ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–µ—Ä–µ–≤–æ–¥–∞"""
    try:
        user_id = message.from_user.id
        if user_id not in user_states:
            user_states[user_id] = {"translation_direction": "ru_to_it"}
            
        current_direction = user_states[user_id]["translation_direction"]
        new_direction = "it_to_ru" if current_direction == "ru_to_it" else "ru_to_it"
        user_states[user_id]["translation_direction"] = new_direction
        
        direction_text = "–∏—Ç–∞–ª—å—è–Ω—Å–∫–∏–π ‚Üí —Ä—É—Å—Å–∫–∏–π" if new_direction == "it_to_ru" else "—Ä—É—Å—Å–∫–∏–π ‚Üí –∏—Ç–∞–ª—å—è–Ω—Å–∫–∏–π"
        bot.reply_to(
            message,
            f"üîÑ –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–µ—Ä–µ–≤–æ–¥–∞ –∏–∑–º–µ–Ω–µ–Ω–æ –Ω–∞:\n*{direction_text}*",
            parse_mode='Markdown'
        )
        
        if user_states[user_id].get("awaiting_answer"):
            show_current_exercise(message.chat.id, user_id)
            
    except Exception as e:
        logger.error(f"Error in switch_translation_direction: {e}")
        bot.reply_to(message, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–º–µ–Ω–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è")

@bot.message_handler(func=lambda message: message.text == "‚è© –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å")
def skip_word(message):
    """–ü—Ä–æ–ø—É—Å–∫ —Ç–µ–∫—É—â–µ–≥–æ —Å–ª–æ–≤–∞"""
    try:
        user_id = message.from_user.id
        if user_id not in user_states or not user_states[user_id].get("awaiting_answer"):
            return
            
        state = user_states[user_id]
        word = state["words_to_review"][state["current_word_index"]]
        
        # –ü—Ä–∏ –ø—Ä–æ–ø—É—Å–∫–µ —Å–ª–æ–≤–∞ —É–º–µ–Ω—å—à–∞–µ–º –∏–Ω—Ç–µ—Ä–≤–∞–ª
        update_word_schedule(user_id, word, 1, False)
        
        state["current_word_index"] += 1
        bot.reply_to(
            message, 
            "‚è© –°–ª–æ–≤–æ –ø—Ä–æ–ø—É—â–µ–Ω–æ\n–û–Ω–æ –ø–æ—è–≤–∏—Ç—Å—è –¥–ª—è –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è —á–µ—Ä–µ–∑ —á–∞—Å",
            reply_markup=get_exercise_keyboard()
        )
        show_current_exercise(message.chat.id, user_id)
        
    except Exception as e:
        logger.error(f"Error in skip_word: {e}")
        bot.reply_to(message, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–ø—É—Å–∫–µ —Å–ª–æ–≤–∞")

@bot.message_handler(func=lambda message: message.text == "üîÑ –ü–æ–≤—Ç–æ—Ä–∏—Ç—å")
def retry_exercise(message):
    """–ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ —Ç–µ–∫—É—â–µ–≥–æ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è"""
    try:
        user_id = message.from_user.id
        if user_id not in user_states:
            return
            
        state = user_states[user_id]
        if not state.get("awaiting_answer", False):
            state["awaiting_answer"] = True
            
        show_current_exercise(message.chat.id, user_id)
        
    except Exception as e:
        logger.error(f"Error in retry_exercise: {e}")
        bot.reply_to(message, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–≤—Ç–æ—Ä–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è")

@bot.message_handler(func=lambda message: message.text == "‚û°Ô∏è –î–∞–ª–µ–µ")
def next_exercise(message):
    """–ü–µ—Ä–µ—Ö–æ–¥ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—é"""
    try:
        user_id = message.from_user.id
        if user_id not in user_states:
            return
            
        state = user_states[user_id]
        state["current_word_index"] += 1
        state["awaiting_answer"] = True
        
        show_current_exercise(message.chat.id, user_id)
        
    except Exception as e:
        logger.error(f"Error in next_exercise: {e}")
        bot.reply_to(message, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ—Ö–æ–¥–µ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—é")

@bot.message_handler(func=lambda message: message.text in ["‚ÑπÔ∏è –ü–æ–º–æ—â—å", "–ü–æ–º–æ—â—å"])
def button_help(message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ –ü–æ–º–æ—â—å"""
    print(f"–ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ –ø–æ–º–æ—â–∏: {message.text}")  # –î–ª—è –æ—Ç–ª–∞–¥–∫–∏
    help_text = (
        "*–ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º:*\n\n"
        "1Ô∏è‚É£ *–ù–∞—á–∞–ª–æ —Ä–∞–±–æ—Ç—ã:*\n"
        "‚Ä¢ –ù–∞–∂–º–∏—Ç–µ 'üéØ –ù–∞—á–∞—Ç—å –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–µ'\n"
        "‚Ä¢ –í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–µ—Ä–µ–≤–æ–¥–∞\n\n"
        "2Ô∏è‚É£ *–í–æ –≤—Ä–µ–º—è —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è:*\n"
        "‚Ä¢ –í–≤–µ–¥–∏—Ç–µ –ø–µ—Ä–µ–≤–æ–¥ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω–æ–≥–æ —Å–ª–æ–≤–∞/—Ñ—Ä–∞–∑—ã\n"
        "‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ 'üí° –ü–æ–¥—Å–∫–∞–∑–∫–∞' –µ—Å–ª–∏ –Ω—É–∂–Ω–∞ –ø–æ–º–æ—â—å\n"
        "‚Ä¢ 'üîÑ –ü–æ–≤—Ç–æ—Ä–∏—Ç—å' - –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–∏\n"
        "‚Ä¢ '‚û°Ô∏è –î–∞–ª–µ–µ' - –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ —Å–ª–æ–≤–∞\n\n"
        "3Ô∏è‚É£ *–°–∏—Å—Ç–µ–º–∞ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è:*\n"
        "‚Ä¢ –ü—Ä–∏ –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–∞—Ö –∏–Ω—Ç–µ—Ä–≤–∞–ª—ã —É–≤–µ–ª–∏—á–∏–≤–∞—é—Ç—Å—è\n"
        "‚Ä¢ –ü—Ä–∏ –æ—à–∏–±–∫–∞—Ö —Å–ª–æ–≤–∞ –ø–æ–≤—Ç–æ—Ä—è—é—Ç—Å—è —á–∞—â–µ\n"
        "‚Ä¢ –ë–æ—Ç –Ω–∞–ø–æ–º–Ω–∏—Ç –æ –≤—Ä–µ–º–µ–Ω–∏ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è\n"
        )
    
    try:
        bot.reply_to(
            message,
            help_text,
            parse_mode='Markdown',
            reply_markup=get_main_keyboard()
        )
        print("–°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–º–æ—â–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ")  # –î–ª—è –æ—Ç–ª–∞–¥–∫–∏
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø–æ–º–æ—â–∏: {e}")  # –î–ª—è –æ—Ç–ª–∞–¥–∫–∏
        logger.error(f"Error in button_help: {e}")
        
        
@bot.message_handler(func=lambda message: True)
def handle_answer(message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    print(f"–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ: {message.text}")  # –î–ª—è –æ—Ç–ª–∞–¥–∫–∏
    # # ... –æ—Å—Ç–∞–ª—å–Ω–æ–π –∫–æ–¥ ...
# @bot.message_handler(func=lambda message: True)
# def handle_answer(message):
    # """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        user_id = message.from_user.id
        if user_id not in user_states or not user_states[user_id].get("awaiting_answer"):
            return

        state = user_states[user_id]
        word = state["words_to_review"][state["current_word_index"]]
        word_data = VOCABULARY["–ë—É–¥—É –∏–∑—É—á–∞—Ç—å"][word["word"]]
        example = random.choice(word_data["–ø—Ä–∏–º–µ—Ä—ã"])
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç –∏ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤—ã
        if state["translation_direction"] == "ru_to_it":
            correct_answer = example["–∏—Ç–∞–ª—å—è–Ω—Å–∫–∏–π"]
            alternatives = example.get("–∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤—ã_–∏—Ç", [])
        else:
            correct_answer = example["—Ä—É—Å—Å–∫–∏–π"]
            alternatives = example.get("–∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤—ã_—Ä—É—Å", [])

        # –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞
        user_answer = normalize_text(message.text.strip())
        correct_answer_norm = normalize_text(correct_answer)
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ç–≤–µ—Ç–∞
        is_correct = False
        if user_answer == correct_answer_norm:
            is_correct = True
        else:
            for alt in alternatives:
                if user_answer == normalize_text(alt):
                    is_correct = True
                    break

        # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –∏ –æ—Ç–≤–µ—Ç
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        
        if is_correct:
            response = (
                "‚úÖ *–ü—Ä–∞–≤–∏–ª—å–Ω–æ!*\n\n"
                f"–í–∞—à –æ—Ç–≤–µ—Ç: _{message.text}_"
            )
            next_interval = calculate_next_interval(word, True)
            markup.row(types.KeyboardButton("‚û°Ô∏è –î–∞–ª–µ–µ"))
            state["awaiting_answer"] = False
        else:
            # –ê–Ω–∞–ª–∏–∑ –æ—à–∏–±–æ–∫
            differences = []
            if any(c in correct_answer for c in '√†√®√©√¨√≠√≤√≥√π√∫') and not any(c in message.text for c in '√†√®√©√¨√≠√≤√≥√π√∫'):
                differences.append("‚Ä¢ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–∏–∞–∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –∑–Ω–∞–∫–∏ (√†, √®, √©, etc.)")
            if correct_answer[0].isupper() and message.text[0].islower():
                differences.append("‚Ä¢ –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å –∑–∞–≥–ª–∞–≤–Ω–æ–π –±—É–∫–≤—ã")
            
            response = (
                "‚ùå *–û—à–∏–±–∫–∞!*\n\n"
                f"–í–∞—à –æ—Ç–≤–µ—Ç: _{message.text}_\n"
                f"–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: *{correct_answer}*\n\n"
            )
            
            if differences:
                response += "*–ù–∞ —á—Ç–æ –æ–±—Ä–∞—Ç–∏—Ç—å –≤–Ω–∏–º–∞–Ω–∏–µ:*\n" + "\n".join(differences) + "\n\n"
                
            response += (
                "*–ß—Ç–æ –¥–µ–ª–∞—Ç—å –¥–∞–ª—å—à–µ?*\n"
                "1Ô∏è‚É£ –ù–∞–∂–º–∏—Ç–µ 'üîÑ –ü–æ–≤—Ç–æ—Ä–∏—Ç—å', —á—Ç–æ–±—ã –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞\n"
                "2Ô∏è‚É£ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ 'üí° –ü–æ–¥—Å–∫–∞–∑–∫–∞' –¥–ª—è –ø–æ–º–æ—â–∏\n"
                "3Ô∏è‚É£ –ò–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '‚û°Ô∏è –î–∞–ª–µ–µ' –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ —Å–ª–æ–≤–∞"
            )
            
            next_interval = 1
            markup.row(types.KeyboardButton("üîÑ –ü–æ–≤—Ç–æ—Ä–∏—Ç—å"))
            markup.row(
                types.KeyboardButton("üí° –ü–æ–¥—Å–∫–∞–∑–∫–∞"),
                types.KeyboardButton("‚û°Ô∏è –î–∞–ª–µ–µ")
            )
            state["awaiting_answer"] = True

        # –û–±–Ω–æ–≤–ª—è–µ–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ
        update_word_schedule(user_id, word, next_interval, is_correct)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç
        bot.reply_to(
            message,
            response,
            parse_mode='Markdown',
            reply_markup=markup
        )
        
    except Exception as e:
        logger.error(f"Error in handle_answer: {e}")
        bot.reply_to(
            message,
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –æ—Ç–≤–µ—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",
            reply_markup=get_main_keyboard()
        )

# @bot.message_handler(func=lambda message: message.text == "‚ÑπÔ∏è –ü–æ–º–æ—â—å")
# def button_help(message):
    # """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ –ü–æ–º–æ—â—å"""
    # help_text = (
        # "*–ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º:*\n\n"
        # "1Ô∏è‚É£ *–ù–∞—á–∞–ª–æ —Ä–∞–±–æ—Ç—ã:*\n"
        # "‚Ä¢ –ù–∞–∂–º–∏—Ç–µ 'üéØ –ù–∞—á–∞—Ç—å –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–µ'\n"
        # "‚Ä¢ –í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–µ—Ä–µ–≤–æ–¥–∞\n\n"
        # "2Ô∏è‚É£ *–í–æ –≤—Ä–µ–º—è —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è:*\n"
        # "‚Ä¢ –í–≤–µ–¥–∏—Ç–µ –ø–µ—Ä–µ–≤–æ–¥ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω–æ–≥–æ —Å–ª–æ–≤–∞/—Ñ—Ä–∞–∑—ã\n"
        # "‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ 'üí° –ü–æ–¥—Å–∫–∞–∑–∫–∞' –µ—Å–ª–∏ –Ω—É–∂–Ω–∞ –ø–æ–º–æ—â—å\n"
        # "‚Ä¢ 'üîÑ –ü–æ–≤—Ç–æ—Ä–∏—Ç—å' - –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–∏\n"
        # "‚Ä¢ '‚û°Ô∏è –î–∞–ª–µ–µ' - –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ —Å–ª–æ–≤–∞\n\n"
        # "3Ô∏è‚É£ *–°–∏—Å—Ç–µ–º–∞ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è:*\n"
        # "‚Ä¢ –ü—Ä–∏ –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–∞—Ö –∏–Ω—Ç–µ—Ä–≤–∞–ª—ã —É–≤–µ–ª–∏—á–∏–≤–∞—é—Ç—Å—è\n"
        # "‚Ä¢ –ü—Ä–∏ –æ—à–∏–±–∫–∞—Ö —Å–ª–æ–≤–∞ –ø–æ–≤—Ç–æ—Ä—è—é—Ç—Å—è —á–∞—â–µ\n"
        # "‚Ä¢ –ë–æ—Ç –Ω–∞–ø–æ–º–Ω–∏—Ç –æ –≤—Ä–µ–º–µ–Ω–∏ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è\n\n"
        # "4Ô∏è‚É£ *–û—Ü–µ–Ω–∫–∞ –æ—Ç–≤–µ—Ç–æ–≤:*\n"
        # "‚Ä¢ ‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç - –∏–Ω—Ç–µ—Ä–≤–∞–ª —É–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç—Å—è\n"
        # "‚Ä¢ ‚ùå –û—à–∏–±–∫–∞ - —Å–ª–æ–≤–æ –≤–µ—Ä–Ω—ë—Ç—Å—è –¥–ª—è –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è —á–µ—Ä–µ–∑ —á–∞—Å\n"
        # "‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø–æ–¥—Å–∫–∞–∑–∫–∏, –µ—Å–ª–∏ –∑–∞—Ç—Ä—É–¥–Ω—è–µ—Ç–µ—Å—å\n\n"
        # "*–ö–æ–º–∞–Ω–¥—ã:*\n"
        # "/start - –ù–∞—á–∞—Ç—å —Å–Ω–∞—á–∞–ª–∞\n"
        # "/review - –ù–∞—á–∞—Ç—å –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–µ\n"
        # "/switch - –°–º–µ–Ω–∏—Ç—å –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–µ—Ä–µ–≤–æ–¥–∞"
    # )
    
    # bot.reply_to(
        # message,
        # help_text,
        # parse_mode='Markdown',
        # reply_markup=get_main_keyboard()
    # )
    


def check_and_send_notifications():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
    while True:
        try:
            if os.path.exists('user_schedules'):
                for filename in os.listdir('user_schedules'):
                    if filename.startswith('schedule_') and filename.endswith('.json'):
                        try:
                            user_id = int(filename.split('_')[1].split('.')[0])
                            
                            schedule = load_user_schedule(user_id)
                            if not schedule:
                                continue

                            current_time = datetime.datetime.now()
                            words_to_review = []
                            
                            for word in schedule["words"]:
                                next_review = datetime.datetime.fromisoformat(word["next_review"])
                                if next_review <= current_time:
                                    words_to_review.append(word)
                            
                            if words_to_review:
                                bot.send_message(
                                    user_id,
                                    f"üîî *–ü–æ—Ä–∞ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å —Å–ª–æ–≤–∞!*\n\n"
                                    f"–£ –≤–∞—Å {len(words_to_review)} —Å–ª–æ–≤ –¥–ª—è –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è.\n"
                                    "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /review –¥–ª—è –Ω–∞—á–∞–ª–∞ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è.",
                                    parse_mode='Markdown',
                                    reply_markup=get_main_keyboard()
                                )
                        except Exception as e:
                            logger.error(f"Error processing notifications for user {filename}: {e}")
                            continue
                            
        except Exception as e:
            logger.error(f"Error in notification check: {e}")
        
        time.sleep(3600)  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–∂–¥—ã–π —á–∞—Å

def run_bot():
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
    logger.info("Bot started...")
    
    # –ó–∞–ø—É—Å–∫ –ø—Ä–æ–≤–µ—Ä–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
    notification_thread = threading.Thread(target=check_and_send_notifications, daemon=True)
    notification_thread.start()
    
    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    while True:
        try:
            bot.infinity_polling(timeout=10, long_polling_timeout=5)
        except Exception as e:
            logger.error(f"Error in bot polling: {e}")
            time.sleep(5)
            logger.info("Trying to restart bot...")
            continue

if __name__ == "__main__":
    run_bot()
		