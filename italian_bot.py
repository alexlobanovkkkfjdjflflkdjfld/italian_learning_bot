import telebot
from telebot import types
import json
import datetime
import time
import random
import os
import logging
import sys
from typing import Dict, Optional, List
from vocabulary import VOCABULARY
import threading  # –î–æ–±–∞–≤–ª—è–µ–º —ç—Ç–æ—Ç –∏–º–ø–æ—Ä—Ç
import requests  # –ò —ç—Ç–æ—Ç —Ç–æ–∂–µ –Ω—É–∂–µ–Ω –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è

port = os.environ.get('PORT', 5000)
TOKEN = "7312843542:AAHVDxaHYSveOpitmkWagTFoMVNzYF4_tMU"
bot = telebot.TeleBot(TOKEN, parse_mode=None)

       
# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö –ø–æ–ø—ã—Ç–æ–∫ –∏ —Ç–∞–π–º–∞—É—Ç–æ–≤
telebot.apihelper.RETRY_ON_ERROR = True
telebot.apihelper.CONNECT_TIMEOUT = 30


# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')
console_handler = logging.StreamHandler(sys.stdout)
console_handler.setFormatter(formatter)
file_handler = logging.FileHandler('bot_log.txt', encoding='utf-8')
file_handler.setFormatter(formatter)
logger = logging.getLogger('ItalianBot')
logger.setLevel(logging.DEBUG)
logger.addHandler(console_handler)
logger.addHandler(file_handler)
telebot_logger = logging.getLogger('TeleBot')
telebot_logger.setLevel(logging.WARNING)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
# TOKEN = "7312843542:AAHVDxaHYSveOpitmkWagTFoMVNzYF4_tMU"
# bot = telebot.TeleBot(TOKEN, parse_mode=None)

# –ì–ª–æ–±–∞–ª—å–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ —Å–æ—Å—Ç–æ—è–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_states = {}

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è —Å—Ç–∞—Ç—É—Å–æ–≤ —Å–ª–æ–≤
WORD_STATUS = {
    "NEW": "new",           # 0 –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤
    "LEARNING": "learning", # 1-2 –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–∞
    "LEARNED": "learned"    # 3+ –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–∞
}

# –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
@bot.message_handler(commands=['status'])
def check_status(message):
    """–í—Ä–µ–º–µ–Ω–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ —Å–ª–æ–≤ –∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
    user_id = message.from_user.id
    try:
        user_data = load_user_data(user_id)
        state = user_states.get(user_id, {})
        current_time = datetime.datetime.now()
        
        status_text = ["üìä *–¢–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å –æ–±—É—á–µ–Ω–∏—è:*\n"]
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ –æ–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è —Å–ª–µ–¥—É—é—â–µ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        next_review_time = None
        words_to_review = []
        
        for word in user_data["active_words"]:
            try:
                review_time = datetime.datetime.fromisoformat(word["next_review"])
                if review_time <= current_time:  # –°–ª–æ–≤–æ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–æ
                    words_to_review.append(word)
                elif next_review_time is None or review_time < next_review_time:
                    next_review_time = review_time
            except Exception as e:
                logger.error(f"Error processing word {word.get('word')}: {e}")
                continue
        
        # –ï—Å–ª–∏ –µ—Å—Ç—å –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã–µ —Å–ª–æ–≤–∞, —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –Ω–∞ —Å–µ–π—á–∞—Å
        if words_to_review:
            state["next_notification"] = current_time.isoformat()
            user_states[user_id] = state
            status_text.append("üîî *–ï—Å—Ç—å —Å–ª–æ–≤–∞ –¥–ª—è –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å!*")
        elif next_review_time:
            state["next_notification"] = next_review_time.isoformat()
            user_states[user_id] = state
            time_diff = next_review_time - current_time
            hours = int(time_diff.total_seconds() // 3600)
            minutes = int((time_diff.total_seconds() % 3600) // 60)
            time_str = f"{hours}—á {minutes}–º–∏–Ω" if hours > 0 else f"{minutes}–º–∏–Ω"
            status_text.append(f"üîî –°–ª–µ–¥—É—é—â–µ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑: *{time_str}*")
        else:
            status_text.append("üîï –ù–µ—Ç –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–ª–æ–≤–∞ –¥–ª—è –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è
        words_info = []
        for word in user_data["active_words"]:
            try:
                review_time = datetime.datetime.fromisoformat(word["next_review"])
                time_diff = review_time - current_time
                hours = abs(int(time_diff.total_seconds() // 3600))
                if time_diff.total_seconds() <= 0:
                    words_info.append(f"‚Ä¢ {word['word']} - {word['translation']} - *–ü–û–í–¢–û–†–ò–¢–¨ –°–ï–ô–ß–ê–°!* (–ø—Ä–æ—Å—Ä–æ—á–µ–Ω–æ –Ω–∞ {hours}—á)")
                else:
                    words_info.append(f"‚Ä¢ {word['word']} - {word['translation']} - —á–µ—Ä–µ–∑ {hours}—á")
            except Exception as e:
                continue
        
        if words_info:
            status_text.append("\nüìù *–°—Ç–∞—Ç—É—Å —Å–ª–æ–≤:*")
            status_text.extend(words_info)
        else:
            status_text.append("\n–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–ª–æ–≤ –¥–ª—è –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è")
        
        bot.reply_to(
            message,
            "\n".join(status_text),
            parse_mode='Markdown',
            reply_markup=get_main_keyboard()
        )
        
    except Exception as e:
        logger.error(f"Error checking status: {e}")
        bot.reply_to(
            message,
            "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å—Ç–∞—Ç—É—Å–∞",
            reply_markup=get_main_keyboard()
        )

@bot.message_handler(commands=['test_notify'])
def test_notification(message):
    """–í—Ä–µ–º–µ–Ω–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
    user_id = message.from_user.id
    try:
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ 1 –º–∏–Ω—É—Ç—É
        next_notification = datetime.datetime.now() + datetime.timedelta(minutes=1)
        user_states[user_id] = {
            "translation_direction": "ru_to_it",
            "awaiting_answer": False,
            "last_activity": datetime.datetime.now().isoformat()
        }
        
        bot.reply_to(
            message,
            "üîî –¢–µ—Å—Ç–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —á–µ—Ä–µ–∑ 1 –º–∏–Ω—É—Ç—É",
            reply_markup=get_main_keyboard()
        )
        logger.info(f"Set test notification for user {user_id} at {next_notification}")
        
    except Exception as e:
        logger.error(f"Error setting test notification: {e}")
        bot.reply_to(
            message,
            "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è",
            reply_markup=get_main_keyboard()
        )

def calculate_next_interval(correct_answers: int) -> int:
    """–†–∞—Å—á–µ—Ç —Å–ª–µ–¥—É—é—â–µ–≥–æ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è –≤ —á–∞—Å–∞—Ö"""
    intervals = {
        0: 1,    # 1 —á–∞—Å
        1: 4,    # 4 —á–∞—Å–∞
        2: 8,    # 8 —á–∞—Å–æ–≤
        3: 24,   # 1 –¥–µ–Ω—å
        4: 72,   # 3 –¥–Ω—è
        5: 168,  # 7 –¥–Ω–µ–π
        6: 336,  # 14 –¥–Ω–µ–π
        7: 720   # 30 –¥–Ω–µ–π
    }
    return intervals.get(correct_answers, 720)  # –µ—Å–ª–∏ –±–æ–ª—å—à–µ 7, —Ç–æ 30 –¥–Ω–µ–π

def create_word_data(word: str, translation: str) -> dict:
    """–°–æ–∑–¥–∞–Ω–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –Ω–æ–≤–æ–≥–æ —Å–ª–æ–≤–∞"""
    return {
        "word": word,
        "translation": translation,
        "correct_answers": 0,
        "next_review": datetime.datetime.now().isoformat(),
        "status": WORD_STATUS["NEW"],
        "total_attempts": 0
    }

def create_initial_user_data(user_id: int) -> dict:
    """–°–æ–∑–¥–∞–Ω–∏–µ –Ω–∞—á–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    logger.info(f"Creating initial data for user {user_id}")
    
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Å–ª–æ–≤–∞
    all_words = list(VOCABULARY["–ë—É–¥—É –∏–∑—É—á–∞—Ç—å"].keys())
    random.shuffle(all_words)
    
    # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–µ 20 —Å–ª–æ–≤ –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è
    initial_words = []
    for word in all_words[:5]:
        word_data = VOCABULARY["–ë—É–¥—É –∏–∑—É—á–∞—Ç—å"][word]
        initial_words.append(create_word_data(word, word_data["–ø–µ—Ä–µ–≤–æ–¥"]))
    
    # –°–æ–∑–¥–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    data = {
        "user_id": user_id,
        "active_words": initial_words,
        "learned_words": [],
        "remaining_words": all_words[20:],
        "current_session": [],
        "current_word_index": 0,
        "last_update": datetime.datetime.now().isoformat()
    }
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ
    save_user_data(user_id, data)
    logger.info(f"Created initial data with {len(initial_words)} words")
    return data

def load_user_data(user_id: int) -> dict:
    """–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    logger.debug(f"Loading data for user {user_id}")
    if not os.path.exists('user_data'):
        os.makedirs('user_data')
        
    file_path = f'user_data/user_{user_id}.json'
    
    try:
        if os.path.exists(file_path):
            with open(file_path, 'r', encoding='utf-8') as f:
                data = json.load(f)
                # –£–¥–∞–ª—è–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã –∏–∑ active_words
                seen_words = set()
                unique_words = []
                for word in data["active_words"]:
                    if word["word"] not in seen_words:
                        seen_words.add(word["word"])
                        unique_words.append(word)
                data["active_words"] = unique_words
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –≤—Å–µ—Ö –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –ø–æ–ª–µ–π
            required_fields = ["active_words", "learned_words", "remaining_words"]
            if not all(field in data for field in required_fields):
                logger.warning(f"Missing required fields in data")
                return create_initial_user_data(user_id)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–∫—Ç—É–∞–ª—å–Ω–æ—Å—Ç—å —Å–ª–æ–≤
            has_old_words = any(
                word["word"] not in VOCABULARY["–ë—É–¥—É –∏–∑—É—á–∞—Ç—å"] 
                for word in data["active_words"]
            )
            
            if has_old_words:
                logger.info(f"Found old vocabulary, creating new data")
                return create_initial_user_data(user_id)
            
            logger.debug(f"Successfully loaded data")
            return data
            
    except Exception as e:
        logger.error(f"Error loading data: {e}")
        return create_initial_user_data(user_id)
    
    return create_initial_user_data(user_id)

def save_user_data(user_id: int, data: dict):
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    logger.debug(f"Saving data for user {user_id}")
    if not os.path.exists('user_data'):
        os.makedirs('user_data')
        
    file_path = f'user_data/user_{user_id}.json'
    try:
        with open(file_path, 'w', encoding='utf-8') as f:
            json.dump(data, f, ensure_ascii=False, indent=2)
        logger.debug(f"Data saved successfully: {file_path}")
        # –ü–æ–∫–∞–∑–∞—Ç—å —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
        files = os.listdir('user_data')
        logger.info(f"Current user data files: {files}")
    except Exception as e:
        logger.error(f"Error saving data: {e}")

def get_words_for_review(user_data: dict) -> List[dict]:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Å–ª–æ–≤ –¥–ª—è –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è"""
    current_time = datetime.datetime.now()
    words_to_review = []
    future_words = []
    
    # –†–∞–∑–¥–µ–ª—è–µ–º —Å–ª–æ–≤–∞ –Ω–∞ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã–µ –∏ –±—É–¥—É—â–∏–µ
    for word in user_data["active_words"]:
        try:
            next_review = datetime.datetime.fromisoformat(word["next_review"])
            if next_review <= current_time:
                words_to_review.append(word)
            else:
                future_words.append(word)
        except Exception as e:
            logger.error(f"Error processing review time for word {word.get('word')}: {e}")
            continue
    
    # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã–µ —Å–ª–æ–≤–∞ –ø–æ –≤—Ä–µ–º–µ–Ω–∏ (—Å–∞–º—ã–µ –¥–∞–≤–Ω–∏–µ –ø–µ—Ä–≤—ã–µ)
    words_to_review.sort(
        key=lambda x: datetime.datetime.fromisoformat(x["next_review"])
    )
    
    # –°–æ—Ä—Ç–∏—Ä—É–µ–º –±—É–¥—É—â–∏–µ —Å–ª–æ–≤–∞ –ø–æ –≤—Ä–µ–º–µ–Ω–∏ (–±–ª–∏–∂–∞–π—à–∏–µ –ø–µ—Ä–≤—ã–µ)
    future_words.sort(
        key=lambda x: datetime.datetime.fromisoformat(x["next_review"])
    )
    
    # –ï—Å–ª–∏ –≤—Å–µ —Å–ª–æ–≤–∞ –Ω–æ–≤—ã–µ (correct_answers == 0), –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∏—Ö –≤—Å–µ
    if all(word["correct_answers"] == 0 for word in user_data["active_words"]):
        all_words = user_data["active_words"].copy()
        random.shuffle(all_words)
        return all_words
    
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–Ω–∞—á–∞–ª–∞ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã–µ, –ø–æ—Ç–æ–º –±—É–¥—É—â–∏–µ —Å–ª–æ–≤–∞
    return words_to_review + future_words
    

def update_word_progress(word: dict, is_correct: bool) -> dict:
    """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ —Å–ª–æ–≤–∞"""
    # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –ø–æ–ø—ã—Ç–æ–∫
    word["total_attempts"] = word.get("total_attempts", 0) + 1
    
    if is_correct:
        # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤
        word["correct_answers"] = word.get("correct_answers", 0) + 1
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
        if word["correct_answers"] >= 8:
            word["status"] = WORD_STATUS["LEARNED"]
        elif word["correct_answers"] > 0:
            word["status"] = WORD_STATUS["LEARNING"]
            
        # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è —Å–ª–µ–¥—É—é—â–µ–≥–æ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è —Å —É—á–µ—Ç–æ–º —Ç–∞–π–º–∑–æ–Ω—ã –ê—Å—Ç–∞–Ω—ã
        next_interval = calculate_next_interval(word["correct_answers"])
        next_review_time = (
            datetime.datetime.now(datetime.timezone(datetime.timedelta(hours=6))) + 
            datetime.timedelta(hours=next_interval)
        )
        word["next_review"] = next_review_time.isoformat()
        
        logger.debug(
            f"Word {word['word']} updated: "
            f"correct_answers={word['correct_answers']}, "
            f"next_review={word['next_review']}"
        )
    
    return word


def get_main_keyboard() -> types.ReplyKeyboardMarkup:
    """–°–æ–∑–¥–∞–Ω–∏–µ –æ—Å–Ω–æ–≤–Ω–æ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã"""
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.row(types.KeyboardButton("üéØ –ù–∞—á–∞—Ç—å –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–µ"))
    markup.row(
        types.KeyboardButton("üîÑ –°–º–µ–Ω–∏—Ç—å –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–µ—Ä–µ–≤–æ–¥–∞"),
        types.KeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
    )
    markup.row(
        types.KeyboardButton("/start"),
        types.KeyboardButton("‚ÑπÔ∏è –ü–æ–º–æ—â—å")
    )
    return markup

def get_exercise_keyboard() -> types.ReplyKeyboardMarkup:
    """–°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è"""
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.row(types.KeyboardButton("üí° –ü–æ–¥—Å–∫–∞–∑–∫–∞"))
    markup.row(
        types.KeyboardButton("üîÑ –°–º–µ–Ω–∏—Ç—å –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ"),
        types.KeyboardButton("‚è© –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å")
    )
    markup.row(types.KeyboardButton("üèÅ –ó–∞–≤–µ—Ä—à–∏—Ç—å –∑–∞–Ω—è—Ç–∏–µ"))
    return markup

def get_next_keyboard() -> types.ReplyKeyboardMarkup:
    """–°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —Å–ª–æ–≤—É"""
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.row(types.KeyboardButton("‚û°Ô∏è –î–∞–ª–µ–µ"))
    markup.row(types.KeyboardButton("üèÅ –ó–∞–≤–µ—Ä—à–∏—Ç—å –∑–∞–Ω—è—Ç–∏–µ"))
    return markup

def get_retry_keyboard() -> types.ReplyKeyboardMarkup:
    """–°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–∏"""
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.row(types.KeyboardButton("üîÑ –ü–æ–≤—Ç–æ—Ä–∏—Ç—å"))
    markup.row(
        types.KeyboardButton("üí° –ü–æ–¥—Å–∫–∞–∑–∫–∞"),
        types.KeyboardButton("‚û°Ô∏è –î–∞–ª–µ–µ")
    )
    markup.row(types.KeyboardButton("üèÅ –ó–∞–≤–µ—Ä—à–∏—Ç—å –∑–∞–Ω—è—Ç–∏–µ"))
    return markup

def normalize_text(text: str) -> str:
    """–ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è —Ç–µ–∫—Å—Ç–∞ –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è"""
    text = text.lower().strip()
    replacements = {
        '√®': 'e', '√à': 'e', '√©': 'e', '√â': 'e',
        '√†': 'a', '√Ä': 'a',
        '√¨': 'i', '√å': 'i',
        '√≤': 'o', '√í': 'o',
        '√π': 'u', '√ô': 'u'
    }
    
    for old, new in replacements.items():
        text = text.replace(old, new)
    
    return text.strip()

def check_answer(user_answer: str, correct_answer: str, alternatives: List[str]) -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç–∏ –æ—Ç–≤–µ—Ç–∞"""
    user_answer = user_answer.strip()
    
    # –ó–∞–º–µ–Ω—è–µ–º –æ–±—Ä–∞—Ç–Ω—ã–π –∞–ø–æ—Å—Ç—Ä–æ—Ñ –Ω–∞ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π
    user_answer = user_answer.strip().replace('`', "'")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ
    if user_answer == correct_answer:
        return True
        
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤—ã
    if user_answer in alternatives:
        return True
        
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–µ–π
    normalized_user = normalize_text(user_answer)
    normalized_correct = normalize_text(correct_answer)
    if normalized_user == normalized_correct:
        return True
        
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤—ã —Å –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–µ–π
    for alt in alternatives:
        if normalized_user == normalize_text(alt):
            return True
            
    return False

def show_current_exercise(chat_id: int, user_id: int):
    """–ü–æ–∫–∞–∑ —Ç–µ–∫—É—â–µ–≥–æ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è"""
    logger.debug(f"Showing exercise for user {user_id}")
    
    try:
        user_data = load_user_data(user_id)
        if not user_data["current_session"]:
            logger.error("No current session found")
            bot.send_message(
                chat_id,
                "‚ùå –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π —Å–µ—Å—Å–∏–∏. –ù–∞—á–Ω–∏—Ç–µ –Ω–æ–≤–æ–µ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–µ.",
                reply_markup=get_main_keyboard()
            )
            return
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ —Å–ª–æ–≤–æ –∏–∑ current_session
        current_word = user_data["current_session"][user_data["current_word_index"]]
        word_data = VOCABULARY["–ë—É–¥—É –∏–∑—É—á–∞—Ç—å"].get(current_word["word"])
        
        if not word_data:
            logger.error(f"Word {current_word['word']} not found in vocabulary")
            bot.send_message(
                chat_id,
                "‚ùå –û—à–∏–±–∫–∞ –≤ –¥–∞–Ω–Ω—ã—Ö. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ.",
                reply_markup=get_main_keyboard()
            )
            return
        
        # –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω—ã–π –ø—Ä–∏–º–µ—Ä
        example = random.choice(word_data["–ø—Ä–∏–º–µ—Ä—ã"])
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–µ—Ä–µ–≤–æ–¥–∞
        state = user_states.get(user_id, {})
        translation_direction = state.get("translation_direction", "ru_to_it")
        
        question = example["—Ä—É—Å—Å–∫–∏–π"] if translation_direction == "ru_to_it" else example["–∏—Ç–∞–ª—å—è–Ω—Å–∫–∏–π"]
        direction_text = "–∏—Ç–∞–ª—å—è–Ω—Å–∫–∏–π" if translation_direction == "ru_to_it" else "—Ä—É—Å—Å–∫–∏–π"
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        user_states[user_id] = {
            "translation_direction": "ru_to_it",
            "awaiting_answer": False,
            "last_activity": datetime.datetime.now().isoformat()
        }
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä—è–º–æ –∑–¥–µ—Å—å, –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π —Å–æ–æ–±—â–µ–Ω–∏—è
        logger.debug(f"Showing word from current_session: {current_word['word']}")
        logger.debug(f"Current session words: {[w['word'] for w in user_data['current_session']]}")
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        progress_bar = "üü¢" * current_word["correct_answers"] + "‚ö™Ô∏è" * (8 - current_word["correct_answers"])
        message_text = (
            f"*{current_word['word']} - {current_word['translation']}*\n\n"
            f"–ü–µ—Ä–µ–≤–µ–¥–∏—Ç–µ –Ω–∞ {direction_text}:\n"
            f"*{question}*\n\n"
            f"–ü—Ä–æ–≥—Ä–µ—Å—Å –∏–∑—É—á–µ–Ω–∏—è: {progress_bar}\n"
            f"_–°–ª–æ–≤–æ {user_data['current_word_index'] + 1} –∏–∑ {len(user_data['active_words'])}_"
        )
        
        bot.send_message(
            chat_id,
            message_text,
            parse_mode='Markdown',
            reply_markup=get_exercise_keyboard()
        )
        
        logger.debug(f"Exercise shown for user {user_id}, word: {current_word['word']}")
        
    except Exception as e:
        logger.error(f"Error showing exercise: {e}", exc_info=True)
        bot.send_message(
            chat_id,
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ù–∞—á–Ω–∏—Ç–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ –∑–∞–Ω–æ–≤–æ.",
            reply_markup=get_main_keyboard()
        )
        
        
@bot.message_handler(commands=['start'])
def send_welcome(message):
   """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start"""
   user_id = message.from_user.id
   logger.info(f"User {user_id} started the bot")
   
   try:
       # –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –¥–∞–Ω–Ω—ã–µ
       user_data = load_user_data(user_id)
       
       # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
       user_states[user_id] = {
            "translation_direction": "ru_to_it",
            "awaiting_answer": False,
            "last_activity": datetime.datetime.now().isoformat()
        }
       
       welcome_text = (
           "*–ü—Ä–∏–≤–µ—Ç, –°–∞—à—É–ª—è-–∫—Ä–∞—Å–æ—Ç—É–ª—è! *\n\n"
           "–Ø –±–æ—Ç –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è –∏—Ç–∞–ª—å—è–Ω—Å–∫–æ–≥–æ —è–∑—ã–∫–∞.\n\n"
           f"üìö –ê–∫—Ç–∏–≤–Ω—ã—Ö —Å–ª–æ–≤: {len(user_data['active_words'])}\n"
           f"‚úÖ –ò–∑—É—á–µ–Ω–æ —Å–ª–æ–≤: {len(user_data['learned_words'])}\n\n"
           "üîπ *'–ù–∞—á–∞—Ç—å –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–µ'* - –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è —Å–ª–æ–≤\n"
           "üîπ *'–°–º–µ–Ω–∏—Ç—å –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ'* - –≤—ã–±–æ—Ä –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–µ—Ä–µ–≤–æ–¥–∞\n"
           "üîπ *'–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞'* - –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞\n"
           "üîπ *'–ü–æ–º–æ—â—å'* - —Å–ø—Ä–∞–≤–∫–∞ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º\n\n"
           
           "–ù–∞—á–Ω—ë–º? üòä"
       )
       
       bot.reply_to(
           message,
           welcome_text,
           parse_mode='Markdown',
           reply_markup=get_main_keyboard()
       )
       
   except Exception as e:
       logger.error(f"Error in send_welcome: {e}", exc_info=True)
       bot.reply_to(
           message,
           "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",
           reply_markup=get_main_keyboard()
       )

@bot.message_handler(commands=['reset'])
def handle_reset(message):
   """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /reset"""
   user_id = message.from_user.id
   logger.info(f"User {user_id} requested data reset")
   
   try:
       # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
       create_initial_user_data(user_id)
       
       # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
       user_states[user_id] = {
            "translation_direction": "ru_to_it",
            "awaiting_answer": False,
            "last_activity": datetime.datetime.now().isoformat()
        }
       
       bot.reply_to(
           message,
           "üîÑ –î–∞–Ω–Ω—ã–µ —Å–±—Ä–æ—à–µ–Ω—ã. –ù–∞—á–∏–Ω–∞–µ–º –æ–±—É—á–µ–Ω–∏–µ —Å–Ω–∞—á–∞–ª–∞!",
           reply_markup=get_main_keyboard()
       )
   except Exception as e:
       logger.error(f"Error in handle_reset: {e}")
       bot.reply_to(
           message,
           "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–±—Ä–æ—Å–µ –¥–∞–Ω–Ω—ã—Ö",
           reply_markup=get_main_keyboard()
       )

@bot.message_handler(func=lambda message: message.text in ["üéØ –ù–∞—á–∞—Ç—å –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–µ", "/review"])
def start_review(message):
    """–ù–∞—á–∞–ª–æ —Å–µ—Å—Å–∏–∏ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è"""
    user_id = message.from_user.id
    logger.info(f"User {user_id} started review session")
    
    try:
        user_data = load_user_data(user_id)
        words_to_review = get_words_for_review(user_data)
        logger.debug(f"Found {len(words_to_review)} words for review")
        
        if not words_to_review:
            # ... (–æ—Å—Ç–∞–≤–ª—è–µ–º –∫–∞–∫ –µ—Å—Ç—å) ...
            return
        
        # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã–µ —Å–ª–æ–≤–∞
        current_time = datetime.datetime.now()
        overdue_words = [
            word for word in words_to_review 
            if datetime.datetime.fromisoformat(word["next_review"]) <= current_time
        ]
         # –î–æ–±–∞–≤–ª—è–µ–º –∑–¥–µ—Å—å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ - –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è
        logger.debug(f"Found overdue words: {[w['word'] for w in overdue_words]}")  # –¥–æ–±–∞–≤–ª–µ–Ω–∞ –∑–∞–∫—Ä—ã–≤–∞—é—â–∞—è —Å–∫–æ–±–∫–∞
        
        if overdue_words:
            # –ü—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã–µ —Å–ª–æ–≤–∞ –æ—Å—Ç–∞–≤–ª—è–µ–º –≤ –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ
            # –ü–µ—Ä–µ–º–µ—à–∏–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –æ—Å—Ç–∞–≤—à–∏–µ—Å—è —Å–ª–æ–≤–∞
            current_words = overdue_words  # –∏—Å–ø–æ–ª—å–∑—É–µ–º –∏–º–µ–Ω–Ω–æ overdue_words
            future_words = [w for w in words_to_review if w not in overdue_words]
            random.shuffle(future_words)                          # –ø–µ—Ä–µ–º–µ—à–∏–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –±—É–¥—É—â–∏–µ
            words_to_review = current_words + future_words        # –æ–±—ä–µ–¥–∏–Ω—è–µ–º —Å–ø–∏—Å–∫–∏
            
            # –ò –∑–¥–µ—Å—å –¥–æ–±–∞–≤–ª—è–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
            logger.debug(f"First word to review after sorting: {words_to_review[0]['word']}")
            
            bot.reply_to(
                message,
                f"üìö –ù–∞—á–∏–Ω–∞–µ–º –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–µ!\n\n"
                f"‚ùóÔ∏è –ï—Å—Ç—å {len(overdue_words)} –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã—Ö —Å–ª–æ–≤, –Ω–∞—á–Ω–µ–º —Å –Ω–∏—Ö.",
                reply_markup=get_exercise_keyboard()
            )
        
        # –ù–∞—á–∏–Ω–∞–µ–º –Ω–æ–≤—É—é —Å–µ—Å—Å–∏—é
        user_data["current_session"] = words_to_review
        user_data["current_word_index"] = 0
        
        save_user_data(user_id, user_data)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        user_states[user_id] = {
            "translation_direction": "ru_to_it",
            "awaiting_answer": False,
            "last_activity": datetime.datetime.now().isoformat()
        }
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤–æ–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ
        show_current_exercise(message.chat.id, user_id)
        
    except Exception as e:
        logger.error(f"Error in start_review: {e}", exc_info=True)
        bot.reply_to(
            message,
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ.",
            reply_markup=get_main_keyboard()
        )
        

@bot.message_handler(func=lambda message: message.text == "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
def show_statistics(message):
    """–ü–æ–∫–∞–∑ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –æ–±—É—á–µ–Ω–∏—è"""
    user_id = message.from_user.id
    logger.info(f"User {user_id} requested statistics")
    
    try:
        user_data = load_user_data(user_id)
        
        # –ü–æ–¥—Å—á–µ—Ç —Å–ª–æ–≤ –ø–æ —Å—Ç–∞—Ç—É—Å–∞–º
        active_words = user_data["active_words"]
        new_words = sum(1 for w in active_words if w["correct_answers"] == 0)
        learning_words = sum(1 for w in active_words if 0 < w["correct_answers"] < 8)  # –±—ã–ª–æ 3, —Å—Ç–∞–ª–æ 8
        learned_words = len(user_data["learned_words"])
        
        # –ü–æ–¥—Å—á–µ—Ç —Å–ª–æ–≤ –¥–ª—è –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è
        words_to_review = get_words_for_review(user_data)
        
        stats_message = [
            "üìä *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ–±—É—á–µ–Ω–∏—è:*\n",
            f"üìö –ê–∫—Ç–∏–≤–Ω—ã–µ —Å–ª–æ–≤–∞: {len(active_words)}",
            f"üÜï –ù–æ–≤—ã–µ —Å–ª–æ–≤–∞ (0 –æ—Ç–≤–µ—Ç–æ–≤): {new_words}",
            f"üìù –í –ø—Ä–æ—Ü–µ—Å—Å–µ (1-7 –æ—Ç–≤–µ—Ç–æ–≤): {learning_words}",
            f"‚úÖ –ò–∑—É—á–µ–Ω–æ (8+ –æ—Ç–≤–µ—Ç–æ–≤): {learned_words}",
            f"‚è∞ –ì–æ—Ç–æ–≤–æ –∫ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—é: {len(words_to_review)}\n",
            "–°–ª–æ–≤–æ —Å—á–∏—Ç–∞–µ—Ç—Å—è –∏–∑—É—á–µ–Ω–Ω—ã–º –ø–æ—Å–ª–µ 8 –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤",
            f"–í—Å–µ–≥–æ —Å–ª–æ–≤ –≤ —Å–ª–æ–≤–∞—Ä–µ: {len(VOCABULARY['–ë—É–¥—É –∏–∑—É—á–∞—Ç—å'])}"
        ]
        
        bot.reply_to(
            message,
            "\n".join(stats_message),
            parse_mode='Markdown',
            reply_markup=get_main_keyboard()
        )
        
    except Exception as e:
        logger.error(f"Error in show_statistics: {e}")
        bot.reply_to(
            message,
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏",
            reply_markup=get_main_keyboard()
        )
        
@bot.message_handler(func=lambda message: message.text in ["üîÑ –°–º–µ–Ω–∏—Ç—å –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–µ—Ä–µ–≤–æ–¥–∞", "üîÑ –°–º–µ–Ω–∏—Ç—å –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ"])
def switch_translation_direction(message):
   """–°–º–µ–Ω–∞ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–µ—Ä–µ–≤–æ–¥–∞"""
   user_id = message.from_user.id
   logger.info(f"User {user_id} switching translation direction")
   
   try:
       state = user_states.get(user_id, {"translation_direction": "ru_to_it"})
       current_direction = state.get("translation_direction", "ru_to_it")
       new_direction = "it_to_ru" if current_direction == "ru_to_it" else "ru_to_it"
       
       # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
       awaiting_answer = state.get("awaiting_answer", False)
       current_example = state.get("current_example")
       
       user_states[user_id] = {
            "translation_direction": "ru_to_it",
            "awaiting_answer": False,
            "last_activity": datetime.datetime.now().isoformat()
        }
       
       direction_text = "–∏—Ç–∞–ª—å—è–Ω—Å–∫–∏–π ‚Üí —Ä—É—Å—Å–∫–∏–π" if new_direction == "it_to_ru" else "—Ä—É—Å—Å–∫–∏–π ‚Üí –∏—Ç–∞–ª—å—è–Ω—Å–∫–∏–π"
       bot.reply_to(
           message,
           f"üîÑ –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–µ—Ä–µ–≤–æ–¥–∞ –∏–∑–º–µ–Ω–µ–Ω–æ –Ω–∞:\n*{direction_text}*",
           parse_mode='Markdown'
       )
       
       # –ï—Å–ª–∏ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–∞—è —Å–µ—Å—Å–∏—è, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–æ–≤–æ–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ
       if awaiting_answer:
           show_current_exercise(message.chat.id, user_id)
           
   except Exception as e:
       logger.error(f"Error in switch_direction: {e}")
       bot.reply_to(
           message,
           "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–º–µ–Ω–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è",
           reply_markup=get_main_keyboard()
       )

@bot.message_handler(func=lambda message: message.text == "üí° –ü–æ–¥—Å–∫–∞–∑–∫–∞")
def show_hint(message):
   """–ü–æ–∫–∞–∑ –ø–æ–¥—Å–∫–∞–∑–∫–∏"""
   user_id = message.from_user.id
   logger.info(f"User {user_id} requested hint")
   
   try:
       state = user_states.get(user_id, {})
       if not state.get("awaiting_answer"):
           bot.reply_to(message, "‚ùå –°–Ω–∞—á–∞–ª–∞ –Ω–∞—á–Ω–∏—Ç–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ")
           return
       
       example = state.get("current_example")
       if not example:
           bot.reply_to(message, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ù–∞—á–Ω–∏—Ç–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ –∑–∞–Ω–æ–≤–æ")
           return
       
       if state["translation_direction"] == "ru_to_it":
           answer = example["–∏—Ç–∞–ª—å—è–Ω—Å–∫–∏–π"]
       else:
           answer = example["—Ä—É—Å—Å–∫–∏–π"]
       
       # –°–æ–∑–¥–∞–µ–º –ø–æ–¥—Å–∫–∞–∑–∫—É
       words = answer.split()
       hint_words = []
       for word in words:
           if len(word) > 0:
               hint_words.append(word[0] + '_' * (len(word)-1))
       hint = ' '.join(hint_words)
       
       bot.reply_to(
           message,
           f"üí° –ü–æ–¥—Å–∫–∞–∑–∫–∞:\n{hint}",
           reply_markup=get_exercise_keyboard()
       )
       logger.debug(f"Hint shown for user {user_id}")
       
   except Exception as e:
       logger.error(f"Error showing hint: {e}")
       bot.reply_to(
           message,
           "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞",
           reply_markup=get_exercise_keyboard()
       )

@bot.message_handler(func=lambda message: message.text == "‚û°Ô∏è –î–∞–ª–µ–µ")
def next_exercise(message):
    """–ü–µ—Ä–µ—Ö–æ–¥ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—é"""
    user_id = message.from_user.id
    logger.info(f"User {user_id} pressed Next button")
    
    try:
        user_data = load_user_data(user_id)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –µ—â—ë —Å–ª–æ–≤–∞ –≤ —Ç–µ–∫—É—â–µ–π —Å–µ—Å—Å–∏–∏
        if not user_data.get("current_session"):
            logger.debug("No current session")
            bot.reply_to(
                message,
                "‚ùå –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π —Å–µ—Å—Å–∏–∏. –ù–∞—á–Ω–∏—Ç–µ –Ω–æ–≤–æ–µ –∑–∞–Ω—è—Ç–∏–µ.",
                reply_markup=get_main_keyboard()
            )
            return
            
        current_index = user_data.get("current_word_index", 0)
        logger.debug(f"Current index: {current_index}, Session length: {len(user_data['current_session'])}")
        
        if current_index >= len(user_data["current_session"]) - 1:
            # –ó–∞–≤–µ—Ä—à–∞–µ–º —Å–µ—Å—Å–∏—é
            user_data["current_session"] = []
            user_data["current_word_index"] = 0
            save_user_data(user_id, user_data)
            
            bot.reply_to(
                message,
                "‚úÖ –í—Å–µ –∑–∞–¥–∞–Ω–∏—è –Ω–∞ —Ç–µ–∫—É—â–∏–π –º–æ–º–µ–Ω—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω—ã!\n\n"
                "–í–µ—Ä–Ω–∏—Ç–µ—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∏ –Ω–∞—á–Ω–∏—Ç–µ –Ω–æ–≤–æ–µ –∑–∞–Ω—è—Ç–∏–µ, –∫–æ–≥–¥–∞ –±—É–¥–µ—Ç–µ –≥–æ—Ç–æ–≤—ã.",
                reply_markup=get_main_keyboard()
            )
            return
        
        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —Å–ª–æ–≤—É
        user_data["current_word_index"] += 1
        save_user_data(user_id, user_data)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        state = user_states.get(user_id, {})
        state["awaiting_answer"] = True
        user_states[user_id] = state
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ª–µ–¥—É—é—â–µ–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ
        show_current_exercise(message.chat.id, user_id)
        
    except Exception as e:
        logger.error(f"Error in next_exercise: {e}", exc_info=True)
        bot.reply_to(
            message,
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ.",
            reply_markup=get_main_keyboard()
        )

@bot.message_handler(func=lambda message: message.text == "üîÑ –ü–æ–≤—Ç–æ—Ä–∏—Ç—å")
def retry_answer(message):
   """–ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞"""
   user_id = message.from_user.id
   logger.info(f"User {user_id} retrying answer")
   
   try:
       state = user_states.get(user_id, {})
       state["awaiting_answer"] = True
       user_states[user_id] = state
       
       show_current_exercise(message.chat.id, user_id)
       
   except Exception as e:
       logger.error(f"Error in retry: {e}")
       bot.reply_to(
           message,
           "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ.",
           reply_markup=get_main_keyboard()
       )

@bot.message_handler(func=lambda message: message.text == "‚è© –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å")
def skip_word(message):
   """–ü—Ä–æ–ø—É—Å–∫ —Ç–µ–∫—É—â–µ–≥–æ —Å–ª–æ–≤–∞"""
   user_id = message.from_user.id
   logger.info(f"User {user_id} skipping word")
   
   try:
       user_data = load_user_data(user_id)
       
       if not user_data.get("current_session"):
           return
           
       # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —Å–ª–æ–≤—É –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
       user_data["current_word_index"] += 1
       save_user_data(user_id, user_data)
       
       bot.reply_to(message, "‚è© –°–ª–æ–≤–æ –ø—Ä–æ–ø—É—â–µ–Ω–æ")
       show_current_exercise(message.chat.id, user_id)
       
   except Exception as e:
       logger.error(f"Error skipping word: {e}")
       bot.reply_to(
           message,
           "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞",
           reply_markup=get_main_keyboard()
       )
@bot.message_handler(func=lambda message: message.text == "üèÅ –ó–∞–≤–µ—Ä—à–∏—Ç—å –∑–∞–Ω—è—Ç–∏–µ")
def end_session(message):
    """–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–π —Å–µ—Å—Å–∏–∏"""
    user_id = message.from_user.id
    logger.info(f"User {user_id} ending session")
    
    try:
        user_data = load_user_data(user_id)
        current_time = datetime.datetime.now()
        
        # –û—á–∏—â–∞–µ–º —Ç–µ–∫—É—â—É—é —Å–µ—Å—Å–∏—é
        user_data["current_session"] = []
        user_data["current_word_index"] = 0
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        summary_text = ["üèÅ *–ó–∞–Ω—è—Ç–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!*\n"]
        
        # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —Å–ª–æ–≤–∞ –¥–ª—è –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è –∏ –∏—â–µ–º –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è
        next_review = None
        words_status = []
        
        for word in user_data["active_words"]:
            try:
                review_time = datetime.datetime.fromisoformat(word["next_review"])
                time_diff = review_time - current_time
                hours = int(time_diff.total_seconds() // 3600)
                
                words_status.append({
                    "word": word["word"],
                    "translation": word["translation"],
                    "hours": hours,
                    "review_time": review_time
                })
                
                if next_review is None or review_time < next_review:
                    next_review = review_time
            except:
                continue
        
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º —Å–ª–æ–≤–∞ –ø–æ –≤—Ä–µ–º–µ–Ω–∏ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è
        words_status.sort(key=lambda x: x["review_time"])
        
        if words_status:
            # –ù–∞—Ö–æ–¥–∏–º —Å–ª–µ–¥—É—é—â–µ–µ –≤—Ä–µ–º—è –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è
            if next_review and next_review > current_time:
                time_diff = next_review - current_time
                hours = int(time_diff.total_seconds() // 3600)
                minutes = int((time_diff.total_seconds() % 3600) // 60)
                time_str = f"{hours}—á {minutes}–º–∏–Ω" if hours > 0 else f"{minutes}–º–∏–Ω"
                
                # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —á–µ—Ä–µ–∑ —á–∞—Å –µ—Å–ª–∏ –∑–∞–Ω—è—Ç–∏–µ –ø—Ä–µ—Ä–≤–∞–Ω–æ
                # reminder_time = min(
                    # current_time + datetime.timedelta(hours=1),
                    # next_review
                # )
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Ä–µ–º—è —Å–ª–µ–¥—É—é—â–µ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
                # user_states[user_id] = {
                    # "translation_direction": "ru_to_it",
                    # "awaiting_answer": False,
                    # "next_notification": reminder_time.isoformat(),
                    # "last_activity": current_time.isoformat()
                # }
                
                # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–ª–µ–¥—É—é—â–∏—Ö –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è—Ö
                summary_text.extend([
                    f"üìö –í—Å–µ–≥–æ —Å–ª–æ–≤ –Ω–∞ –∏–∑—É—á–µ–Ω–∏–∏: {len(words_status)}",
                    f"‚è∞ –°–ª–µ–¥—É—é—â–µ–µ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–µ —á–µ—Ä–µ–∑: *{time_str}*\n",
                    "üìù –ë–ª–∏–∂–∞–π—à–∏–µ —Å–ª–æ–≤–∞ –¥–ª—è –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è:"
                ])
                
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–æ 3 –±–ª–∏–∂–∞–π—à–∏—Ö —Å–ª–æ–≤
                for word_info in words_status[:3]:
                    time_str = f"{word_info['hours']}—á" if word_info['hours'] > 0 else "—Å–µ–π—á–∞—Å"
                    summary_text.append(f"‚Ä¢ {word_info['word']} - {word_info['translation']} (—á–µ—Ä–µ–∑ {time_str})")
                
                summary_text.append("\nüîî –Ø –ø—Ä–∏—à–ª—é —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ, –∫–æ–≥–¥–∞ –ø—Ä–∏–¥–µ—Ç –≤—Ä–µ–º—è –ø–æ–≤—Ç–æ—Ä–∏—Ç—å —Å–ª–æ–≤–∞!")
            else:
                summary_text.append("‚úÖ –í—Å–µ —Å–ª–æ–≤–∞ –ø–æ–≤—Ç–æ—Ä–µ–Ω—ã! –ù–æ–≤—ã–µ —Å–ª–æ–≤–∞ —Å—Ç–∞–Ω—É—Ç –¥–æ—Å—Ç—É–ø–Ω—ã –ø–æ–∑–∂–µ.")
        else:
            summary_text.append("üìù –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–ª–æ–≤ –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        save_user_data(user_id, user_data)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        bot.reply_to(
            message,
            "\n".join(summary_text),
            parse_mode='Markdown',
            reply_markup=get_main_keyboard()
        )
        
    except Exception as e:
        logger.error(f"Error ending session: {e}", exc_info=True)
        bot.reply_to(
            message,
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –°–µ—Å—Å–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞.",
            reply_markup=get_main_keyboard()
        )
@bot.message_handler(commands=['update_vocabulary'])
def update_vocabulary(message):
    """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–ª–æ–≤–∞—Ä—è –±–µ–∑ —Å–±—Ä–æ—Å–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞"""
    user_id = message.from_user.id
    try:
        user_data = load_user_data(user_id)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–∏–µ –∏–∑—É—á–µ–Ω–Ω—ã–µ —Å–ª–æ–≤–∞
        learned_words = user_data["learned_words"]
        active_words = user_data["active_words"]
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Å–ª–æ–≤–∞ –∏–∑ –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–≥–æ —Å–ª–æ–≤–∞—Ä—è
        all_words = list(VOCABULARY["–ë—É–¥—É –∏–∑—É—á–∞—Ç—å"].keys())
        
        # –£–±–∏—Ä–∞–µ–º —É–∂–µ –∏–∑—É—á–µ–Ω–Ω—ã–µ –∏ –∞–∫—Ç–∏–≤–Ω—ã–µ —Å–ª–æ–≤–∞ –∏–∑ —Å–ø–∏—Å–∫–∞ –Ω–æ–≤—ã—Ö —Å–ª–æ–≤
        learned_word_keys = {word["word"] for word in learned_words}
        active_word_keys = {word["word"] for word in active_words}
        new_words = [word for word in all_words if word not in learned_word_keys and word not in active_word_keys]
        
        # –ï—Å–ª–∏ –≤ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–ª–æ–≤–∞—Ö –º–µ–Ω—å—à–µ 20 —Å–ª–æ–≤, –¥–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ
        while len(active_words) < 20 and new_words:
            new_word = random.choice(new_words)
            new_words.remove(new_word)
            word_data = VOCABULARY["–ë—É–¥—É –∏–∑—É—á–∞—Ç—å"][new_word]
            active_words.append({
                "word": new_word,
                "translation": word_data["–ø–µ—Ä–µ–≤–æ–¥"],
                "correct_answers": 0,
                "next_review": datetime.datetime.now().isoformat(),
                "total_attempts": 0
            })
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_data["active_words"] = active_words
        user_data["remaining_words"] = new_words
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        save_user_data(user_id, user_data)
        
        bot.reply_to(
            message,
            f"‚úÖ –°–ª–æ–≤–∞—Ä—å –æ–±–Ω–æ–≤–ª–µ–Ω!\n"
            f"üìö –ê–∫—Ç–∏–≤–Ω—ã—Ö —Å–ª–æ–≤: {len(active_words)}\n"
            f"üÜï –û—Å—Ç–∞–ª–æ—Å—å —Å–ª–æ–≤ –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è: {len(new_words)}",
            reply_markup=get_main_keyboard()
        )
        
    except Exception as e:
        logger.error(f"Error updating vocabulary: {e}")
        bot.reply_to(
            message,
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å–ª–æ–≤–∞—Ä—è",
            reply_markup=get_main_keyboard()
        ) 
        
@bot.message_handler(func=lambda message: message.text == "‚ÑπÔ∏è –ü–æ–º–æ—â—å")
def show_help(message):
    """–ü–æ–∫–∞–∑ —Å–ø—Ä–∞–≤–∫–∏ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º"""
    help_text = [
        "*üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:*",
        "",
        "üéØ –ù–∞—á–∞—Ç—å –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–µ - –Ω–∞—á–∞—Ç—å –∏–∑—É—á–µ–Ω–∏–µ —Å–ª–æ–≤",
        "üîÑ –°–º–µ–Ω–∏—Ç—å –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ - –∏–∑–º–µ–Ω–∏—Ç—å –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–µ—Ä–µ–≤–æ–¥–∞",
        "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ - –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å –æ–±—É—á–µ–Ω–∏—è",
        "",
        "*–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:*",
        "`/start` - –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞",
        "`/status` - –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å —Å–ª–æ–≤ –∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π",
        "`/test_notify` - –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Ä–∞–±–æ—Ç—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π",
        "`/reset` - —Å–±—Ä–æ—Å–∏—Ç—å –≤–µ—Å—å –ø—Ä–æ–≥—Ä–µ—Å—Å",
        "`/update_vocabulary` - –¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–µ —Å–ª–æ–≤–∞ (–±–µ–∑ —Å–±—Ä–æ—Å–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞)",
        "",
        "*–ö–æ–º–∞–Ω–¥—ã –≤–æ –≤—Ä–µ–º—è –∑–∞–Ω—è—Ç–∏—è:*",
        "üí° –ü–æ–¥—Å–∫–∞–∑–∫–∞ - –ø–æ–∫–∞–∑–∞—Ç—å –ø–µ—Ä–≤—ã–µ –±—É–∫–≤—ã —Å–ª–æ–≤",
        "‚è© –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å - –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å —Ç–µ–∫—É—â–µ–µ —Å–ª–æ–≤–æ",
        "üèÅ –ó–∞–≤–µ—Ä—à–∏—Ç—å –∑–∞–Ω—è—Ç–∏–µ - –∑–∞–∫–æ–Ω—á–∏—Ç—å —Ç–µ–∫—É—â—É—é —Å–µ—Å—Å–∏—é"
    ]
    
    try:
        bot.reply_to(
            message,
            "\n".join(help_text),
            parse_mode='Markdown',
            reply_markup=get_main_keyboard()
        )
    except Exception as e:
        logger.error(f"Error sending help message: {e}")
        # –ü—Ä–æ–±—É–µ–º –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –±–µ–∑ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –µ—Å–ª–∏ –≤–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞
        help_text_plain = [line.replace('*', '').replace('`', '') for line in help_text]
        bot.reply_to(
            message,
            "\n".join(help_text_plain),
            reply_markup=get_main_keyboard()
        )

def highlight_differences(user_answer: str, correct_answer: str) -> str:
    """–ü–æ–¥—Å–≤–µ—Ç–∫–∞ —Ä–∞–∑–ª–∏—á–∏–π –º–µ–∂–¥—É –æ—Ç–≤–µ—Ç–∞–º–∏"""
    user_words = user_answer.lower().split()
    correct_words = correct_answer.lower().split()
    
    result = []
    for i in range(max(len(user_words), len(correct_words))):
        # –ï—Å–ª–∏ —Å–ª–æ–≤–æ –µ—Å—Ç—å –≤ –æ–±–æ–∏—Ö –æ—Ç–≤–µ—Ç–∞—Ö
        if i < len(user_words) and i < len(correct_words):
            if user_words[i] != correct_words[i]:
                result.append(f"*{user_words[i]}* ‚Üí _{correct_words[i]}_")
            else:
                result.append(user_words[i])
        # –ï—Å–ª–∏ –≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–º –æ—Ç–≤–µ—Ç–µ –±–æ–ª—å—à–µ —Å–ª–æ–≤
        elif i < len(user_words):
            result.append(f"*{user_words[i]}* ‚Üí _[–ª–∏—à–Ω–µ–µ]_")
        # –ï—Å–ª–∏ –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –æ—Ç–≤–µ—Ç–µ –±–æ–ª—å—à–µ —Å–ª–æ–≤
        else:
            result.append(f"*[–ø—Ä–æ–ø—É—â–µ–Ω–æ]* ‚Üí _{correct_words[i]}_")
    
    return ' '.join(result)


        
@bot.message_handler(func=lambda message: True)
def handle_answer(message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    user_id = message.from_user.id
    logger.debug(f"Received message from user {user_id}: {message.text}")
    
    state = user_states.get(user_id, {})
    if not state.get("awaiting_answer"):
        return

    try:
        user_data = load_user_data(user_id)
        
        if not user_data["current_session"]:
            logger.debug("No current session")
            return

        # –ù–∞—Ö–æ–¥–∏–º —Ç–µ–∫—É—â–µ–µ —Å–ª–æ–≤–æ –ø–æ –∏–Ω–¥–µ–∫—Å—É –≤ current_session
        current_session_word = user_data["current_session"][user_data["current_word_index"]]
        
        # –ù–∞—Ö–æ–¥–∏–º —ç—Ç–æ –∂–µ —Å–ª–æ–≤–æ –≤ active_words
        current_word_index = None
        for i, word in enumerate(user_data["active_words"]):
            if word["word"] == current_session_word["word"]:
                current_word_index = i
                break
                
        if current_word_index is None:
            logger.error(f"Word {current_session_word['word']} not found in active_words")
            bot.reply_to(message, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ù–∞—á–Ω–∏—Ç–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ –∑–∞–Ω–æ–≤–æ")
            return
            
        current_word = user_data["active_words"][current_word_index]
        example = state.get("current_example")
        
        if not example:
            logger.error(f"No current example found for user {user_id}")
            bot.reply_to(message, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ù–∞—á–Ω–∏—Ç–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ –∑–∞–Ω–æ–≤–æ")
            return

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç–≤–µ—Ç
        if state["translation_direction"] == "ru_to_it":
            correct_answer = example["–∏—Ç–∞–ª—å—è–Ω—Å–∫–∏–π"]
            alternatives = example.get("–∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤—ã_–∏—Ç", [])
        else:
            correct_answer = example["—Ä—É—Å—Å–∫–∏–π"]
            alternatives = example.get("–∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤—ã_—Ä—É—Å", [])

        is_correct = check_answer(message.text, correct_answer, alternatives)
        logger.debug(f"Answer check result: {is_correct}")

        # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å —Å–ª–æ–≤–∞
        updated_word = update_word_progress(current_word, is_correct)
        user_data["active_words"][current_word_index] = updated_word

        # –ï—Å–ª–∏ —Å–ª–æ–≤–æ –∏–∑—É—á–µ–Ω–æ (3+ –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–∞)
        if updated_word["correct_answers"] >= 8:
            logger.debug(f"Word {updated_word['word']} learned")
            user_data["learned_words"].append(updated_word)
            user_data["active_words"].pop(current_word_index)
            
            # –û–±–Ω–æ–≤–ª—è–µ–º current_session, —É–¥–∞–ª—è—è –∏–∑—É—á–µ–Ω–Ω–æ–µ —Å–ª–æ–≤–æ
            user_data["current_session"] = [w for w in user_data["current_session"] if w["word"] != updated_word["word"]]
            
            # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–ª–æ–≤–æ –µ—Å–ª–∏ –µ—Å—Ç—å
            if user_data["remaining_words"]:
                new_word = random.choice(user_data["remaining_words"])
                user_data["remaining_words"].remove(new_word)
                
                word_data = VOCABULARY["–ë—É–¥—É –∏–∑—É—á–∞—Ç—å"][new_word]
                user_data["active_words"].append({
                    "word": new_word,
                    "translation": word_data["–ø–µ—Ä–µ–≤–æ–¥"],
                    "correct_answers": 0,
                    "next_review": datetime.datetime.now().isoformat(),
                    "total_attempts": 0
                })

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        save_user_data(user_id, user_data)

        # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        progress_bar = "üü¢" * updated_word["correct_answers"] + "‚ö™Ô∏è" * (8 - updated_word["correct_answers"])

        if is_correct:
            response = (
                "‚úÖ *–ü—Ä–∞–≤–∏–ª—å–Ω–æ!*\n\n"
                f"–í–∞—à –æ—Ç–≤–µ—Ç: _{message.text}_\n"
                f"–ü—Ä–æ–≥—Ä–µ—Å—Å: {progress_bar}"
            )
            markup = get_next_keyboard()
        else:
            response = (
                "‚ùå *–û—à–∏–±–∫–∞!*\n\n"
                f"–í–∞—à –æ—Ç–≤–µ—Ç —Å –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è–º–∏:\n"
                f"{highlight_differences(message.text, correct_answer)}\n\n"
                f"–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç:\n*{correct_answer}*\n\n"
                f"–ü—Ä–æ–≥—Ä–µ—Å—Å: {progress_bar}"
            )
            markup = get_retry_keyboard()

        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        state["awaiting_answer"] = False
        state["last_activity"] = datetime.datetime.now().isoformat()
        user_states[user_id] = state

        # ... –ø—Ä–µ–¥—ã–¥—É—â–∏–π –∫–æ–¥ —Ñ—É–Ω–∫—Ü–∏–∏ ...

        bot.reply_to(
            message,
            response,
            parse_mode='Markdown',
            reply_markup=markup
        )

        # –î–æ–±–∞–≤–ª—è–µ–º –∑–¥–µ—Å—å –ø—Ä–æ–≤–µ—Ä–∫—É —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ —Ñ–∞–π–ª–∞
        if is_correct:
            try:
                with open(f'user_data/user_{user_id}.json', 'r', encoding='utf-8') as f:
                    logger.info(f"File contents after save: {f.read()}")
            except Exception as e:
                logger.error(f"Error reading file: {e}")

    except Exception as e:
        logger.error(f"Error handling answer: {e}", exc_info=True)
        bot.reply_to(
            message,
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ.",
            reply_markup=get_main_keyboard()
        )
       
# –î–æ–±–∞–≤—å—Ç–µ –≤—Ä–µ–º–µ–Ω–Ω—É—é –∫–æ–º–∞–Ω–¥—É –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
@bot.message_handler(commands=['status'])
def check_status(message):
    """–í—Ä–µ–º–µ–Ω–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ —Å–ª–æ–≤ –∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
    user_id = message.from_user.id
    try:
        user_data = load_user_data(user_id)
        state = user_states.get(user_id, {})
        current_time = datetime.datetime.now()
        
        status_text = ["üìä *–¢–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å –æ–±—É—á–µ–Ω–∏—è:*\n"]
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–ª–µ–¥—É—é—â–µ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
        # next_notification = state.get("next_notification")
        # if next_notification:
            # notification_time = datetime.datetime.fromisoformat(next_notification)
            # time_diff = notification_time - current_time
            # if time_diff.total_seconds() > 0:
                # hours = int(time_diff.total_seconds() // 3600)
                # minutes = int((time_diff.total_seconds() % 3600) // 60)
                # time_str = f"{hours}—á {minutes}–º–∏–Ω" if hours > 0 else f"{minutes}–º–∏–Ω"
                # status_text.append(f"üîî –°–ª–µ–¥—É—é—â–µ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑: *{time_str}*")
        # else:
            # status_text.append("üîï –ù–µ—Ç –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–ª–æ–≤–∞ –¥–ª—è –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è
        # –í —Ñ—É–Ω–∫—Ü–∏–∏ check_status –¥–æ–±–∞–≤—å—Ç–µ –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫—É –ø–æ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞–º:
        words_info = []
        processed_words = set()

        for word in user_data["active_words"]:
            try:
                if word["word"] in processed_words:
                    continue
                    
                processed_words.add(word["word"])
                
                review_time = datetime.datetime.fromisoformat(word["next_review"])
                time_diff = review_time - current_time
                hours = abs(int(time_diff.total_seconds() // 3600))
                days = hours // 24
                
                if time_diff.total_seconds() <= 0:
                    words_info.append(f"‚Ä¢ {word['word']} - {word['translation']} - *–ü–û–í–¢–û–†–ò–¢–¨ –°–ï–ô–ß–ê–°!* (–ø—Ä–æ—Å—Ä–æ—á–µ–Ω–æ –Ω–∞ {hours}—á)")
                else:
                    if days > 0:
                        words_info.append(f"‚Ä¢ {word['word']} - {word['translation']} - —á–µ—Ä–µ–∑ {days}–¥ {hours%24}—á")
                    else:
                        words_info.append(f"‚Ä¢ {word['word']} - {word['translation']} - —á–µ—Ä–µ–∑ {hours}—á")
                    
            except Exception as e:
                continue
        
        if words_info:
            status_text.append("\nüìù *–°—Ç–∞—Ç—É—Å —Å–ª–æ–≤:*")
            status_text.extend(sorted(words_info))  # –°–æ—Ä—Ç–∏—Ä—É–µ–º —Å–ª–æ–≤–∞ –¥–ª—è –ª—É—á—à–µ–π —á–∏—Ç–∞–µ–º–æ—Å—Ç–∏
        else:
            status_text.append("\n–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–ª–æ–≤ –¥–ª—è –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è")
        
        bot.reply_to(
            message,
            "\n".join(status_text),
            parse_mode='Markdown',
            reply_markup=get_main_keyboard()
        )
        
    except Exception as e:
        logger.error(f"Error checking status: {e}")
        bot.reply_to(
            message,
            "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å—Ç–∞—Ç—É—Å–∞",
            reply_markup=get_main_keyboard()
        )

# @bot.message_handler(commands=['test_notify'])
# def test_notification(message):
    # """–í—Ä–µ–º–µ–Ω–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
    # user_id = message.from_user.id
    # try:
        # # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ 1 –º–∏–Ω—É—Ç—É
        # next_notification = datetime.datetime.now() + datetime.timedelta(minutes=1)
        # user_states[user_id] = {
            # "translation_direction": "ru_to_it",
            # "awaiting_answer": False,
            # "next_notification": next_notification.isoformat(),
            # "last_activity": datetime.datetime.now().isoformat()
        # }
        
        # bot.reply_to(
            # message,
            # "üîî –¢–µ—Å—Ç–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —á–µ—Ä–µ–∑ 1 –º–∏–Ω—É—Ç—É",
            # reply_markup=get_main_keyboard()
        # )
        
    # except Exception as e:
        # logger.error(f"Error setting test notification: {e}")
        # bot.reply_to(
            # message,
            # "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è",
            # reply_markup=get_main_keyboard()
        # )

        
# def check_and_send_notifications():
   # while True:
       # try:
           # current_time = datetime.datetime.now(datetime.timezone(datetime.timedelta(hours=6)))
           
           # if not os.path.exists('user_data'):
               # continue

           # for filename in os.listdir('user_data'):
               # try:
                   # user_id = int(filename.split('_')[1].split('.')[0])
                   # user_data = load_user_data(user_id)
                   # words_to_review = []
                   
                   # for word in user_data["active_words"]:
                       # try:
                           # review_time = datetime.datetime.fromisoformat(word["next_review"])
                           # review_time = review_time.replace(tzinfo=datetime.timezone(datetime.timedelta(hours=6)))
                           
                           # if review_time <= current_time:
                               # words_to_review.append(word)
                       # except Exception as e:
                           # logger.error(f"Error processing word: {e}")
                           # continue

                   # if words_to_review:
                       # notification_text = "üîî –ü–æ—Ä–∞ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å —Å–ª–æ–≤–∞!\n\n"
                       # notification_text += f"–£ –≤–∞—Å {len(words_to_review)} —Å–ª–æ–≤ –≥–æ—Ç–æ–≤–æ –∫ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—é:\n\n"
                       
                       # for word in words_to_review[:3]:
                           # notification_text += f"‚Ä¢ {word['word']} - {word['translation']}\n"
                       
                       # try:
                           # bot.send_message(
                               # user_id, 
                               # notification_text, 
                               # reply_markup=get_main_keyboard()
                           # )
                           # logger.info(f"Sent notification to user {user_id}")
                       # except Exception as e:
                           # logger.error(f"Failed to send notification: {e}")
                           
               # except Exception as e:
                   # logger.error(f"Error processing user file: {e}")
                   # continue
                   
       # except Exception as e:
           # logger.error(f"Error in notification check: {e}")
           
       # time.sleep(600)



        
def ensure_single_instance():
    import socket
    global _lock_socket  # –î–æ–±–∞–≤–ª—è–µ–º –≥–ª–æ–±–∞–ª—å–Ω—É—é –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é
    _lock_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    try:
        _lock_socket.bind(('localhost', 12345))
        return True
    except socket.error:
        return False

def run_bot():
    logger.info("=== Starting Bot ===")
    logger.info(f"Vocabulary size: {len(VOCABULARY['–ë—É–¥—É –∏–∑—É—á–∞—Ç—å'])} words")
    
    bot.remove_webhook()
    time.sleep(2)
    bot.polling()

def cleanup():
   global _lock_socket
   if '_lock_socket' in globals():
       _lock_socket.close()

if __name__ == "__main__":
    run_bot()