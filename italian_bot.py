import telebot
from telebot import types
import json
import datetime
import time
import random
import os
import logging
import sys
import signal
from typing import Dict, Optional, List
from vocabulary import VOCABULARY
import threading
from pydub import AudioSegment
import speech_recognition as sr
import requests
import tempfile
import shutil  # –î–æ–±–∞–≤–ª–µ–Ω–æ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ñ–∞–π–ª–∞–º–∏

# –ë–∞–∑–æ–≤—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')
console_handler = logging.StreamHandler(sys.stdout)
console_handler.setFormatter(formatter)
file_handler = logging.FileHandler('bot_log.txt', encoding='utf-8')
file_handler.setFormatter(formatter)
logger = logging.getLogger('ItalianBot')
logger.setLevel(logging.DEBUG)
logger.addHandler(console_handler)
logger.addHandler(file_handler)
telebot_logger = logging.getLogger('TeleBot')
telebot_logger.setLevel(logging.WARNING)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
TOKEN = "7312843542:AAHVDxaHYSveOpitmkWagTFoMVNzYF4_tMU"
bot = telebot.TeleBot(TOKEN)
user_states = {}
WORDS_PER_SESSION = 5
CORRECT_FOR_NEW_WORD = 3
CORRECT_FOR_LEARNED = 8

WORD_STATUS = {
    "NEW": "new",
    "LEARNING": "learning",
    "LEARNED": "learned"
}

def get_now() -> datetime.datetime:
    """–£–Ω–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏"""
    return datetime.datetime.now().replace(tzinfo=None)

def parse_time(time_str: str) -> datetime.datetime:
    """–ë–µ–∑–æ–ø–∞—Å–Ω—ã–π –ø–∞—Ä—Å–∏–Ω–≥ –≤—Ä–µ–º–µ–Ω–∏ –∏–∑ —Å—Ç—Ä–æ–∫–∏"""
    try:
        dt = datetime.datetime.fromisoformat(time_str)
        return dt.replace(tzinfo=None)
    except:
        return get_now()
        
def calculate_next_interval(correct_answers: int) -> int:
   intervals = {
   0: 1, 1: 4, 2: 8, 3: 24, 4: 72,
   5: 168, 6: 336, 7: 720
   }
   return intervals.get(correct_answers, 720)

def create_word_data(word: str, translation: str) -> dict:
   return {
       "word": word,
       "translation": translation,
       "correct_answers": 0,
       "next_review": get_now().isoformat(),
       "status": WORD_STATUS["NEW"],
       "total_attempts": 0
   }

def create_initial_user_data(user_id: int) -> dict:
    logger.info(f"Creating initial data for user {user_id}")
    all_words = list(VOCABULARY["–ë—É–¥—É –∏–∑—É—á–∞—Ç—å"].keys())
    random.shuffle(all_words)
    
    initial_words = []
    for word in all_words[:WORDS_PER_SESSION]:
        word_data = VOCABULARY["–ë—É–¥—É –∏–∑—É—á–∞—Ç—å"][word]
        initial_words.append(create_word_data(word, word_data["–ø–µ—Ä–µ–≤–æ–¥"]))
    
    remaining = all_words[WORDS_PER_SESSION:]
    logger.info(f"Created initial data with {len(initial_words)} active words and {len(remaining)} remaining")
    
    return {
        "user_id": user_id,
        "active_words": initial_words,
        "learned_words": [],
        "remaining_words": remaining,
        "current_session": [],
        "current_word_index": 0,
        "last_update": get_now().isoformat()
    }

def load_user_data(user_id: int) -> dict:
   if not os.path.exists('user_data'):
       os.makedirs('user_data')
   
   file_path = f'user_data/user_{user_id}.json'
   if os.path.exists(file_path):
       with open(file_path, 'r', encoding='utf-8') as f:
           return json.load(f)
   return create_initial_user_data(user_id)

def save_user_data(user_id: int, data: dict):
   if not os.path.exists('user_data'):
       os.makedirs('user_data')
       
   file_path = f'user_data/user_{user_id}.json'
   with open(file_path, 'w', encoding='utf-8') as f:
       json.dump(data, f, ensure_ascii=False, indent=2)

def get_words_for_review(user_data: dict) -> List[dict]:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Å–ª–æ–≤ –¥–ª—è –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è"""
    logger.debug(f"Getting words for review from active words: {[w['word'] for w in user_data['active_words']]}")
    
    current_time = get_now()
    overdue_words = []
    future_words = []
    new_words = []

    # –†–∞–∑–¥–µ–ª—è–µ–º —Å–ª–æ–≤–∞ –Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    for word in user_data["active_words"]:
        if word["correct_answers"] == 0:
            new_words.append(word)
        else:
            review_time = parse_time(word["next_review"])
            if review_time <= current_time:
                overdue_words.append(word)
            else:
                future_words.append(word)

    # –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: –Ω–æ–≤—ã–µ —Å–ª–æ–≤–∞, –ø–æ—Ç–æ–º –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã–µ, –ø–æ—Ç–æ–º –±—É–¥—É—â–∏–µ
    words_to_return = []
    words_to_return.extend(new_words[:WORDS_PER_SESSION])
    
    if len(words_to_return) < WORDS_PER_SESSION:
        words_to_return.extend(overdue_words[:WORDS_PER_SESSION - len(words_to_return)])
    
    if len(words_to_return) < WORDS_PER_SESSION:
        random.shuffle(future_words)
        words_to_return.extend(future_words[:WORDS_PER_SESSION - len(words_to_return)])

    logger.debug(f"Selected words for review: {[w['word'] for w in words_to_return]}")
    return words_to_return[:WORDS_PER_SESSION]

def update_word_progress(word: dict, is_correct: bool) -> dict:
    """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ —Å–ª–æ–≤–∞"""
    word["total_attempts"] = word.get("total_attempts", 0) + 1
    
    if is_correct:
        previous_correct = word.get("correct_answers", 0)
        word["correct_answers"] = previous_correct + 1
        
        if word["correct_answers"] >= CORRECT_FOR_LEARNED:
            word["status"] = WORD_STATUS["LEARNED"]
        elif word["correct_answers"] > 0:
            word["status"] = WORD_STATUS["LEARNING"]
            
        next_interval = calculate_next_interval(word["correct_answers"])
        next_review = get_now() + datetime.timedelta(hours=next_interval)
        word["next_review"] = next_review.isoformat()
        
        logger.debug(
            f"Word {word['word']} progress updated: "
            f"correct_answers: {previous_correct} -> {word['correct_answers']}, "
            f"next_review: {word['next_review']}"
        )
    
    return word
    
def get_main_keyboard():
   markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
   markup.row(types.KeyboardButton("üéØ –ù–∞—á–∞—Ç—å –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–µ"))
   markup.row(types.KeyboardButton("üîÑ –°–º–µ–Ω–∏—Ç—å –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–µ—Ä–µ–≤–æ–¥–∞"), 
              types.KeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"))
   markup.row(types.KeyboardButton("/start"), types.KeyboardButton("‚ÑπÔ∏è –ü–æ–º–æ—â—å"))
   return markup

def get_exercise_keyboard() -> types.ReplyKeyboardMarkup:
    """–°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è"""
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.row(types.KeyboardButton("üí° –ü–æ–¥—Å–∫–∞–∑–∫–∞"), 
               types.KeyboardButton("üé§ –ì–æ–ª–æ—Å–æ–≤–æ–π –æ—Ç–≤–µ—Ç"))
    markup.row(types.KeyboardButton("üîÑ –°–º–µ–Ω–∏—Ç—å –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ"), 
               types.KeyboardButton("‚è© –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å"))
    markup.row(types.KeyboardButton("üèÅ –ó–∞–≤–µ—Ä—à–∏—Ç—å –∑–∞–Ω—è—Ç–∏–µ"))
    return markup

def get_next_keyboard():
   markup = types.ReplyKeyboardMarkup(resize_keyboard=True) 
   markup.row(types.KeyboardButton("‚û°Ô∏è –î–∞–ª–µ–µ"))
   markup.row(types.KeyboardButton("üèÅ –ó–∞–≤–µ—Ä—à–∏—Ç—å –∑–∞–Ω—è—Ç–∏–µ"))
   return markup

def get_retry_keyboard():
   markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
   markup.row(types.KeyboardButton("üîÑ –ü–æ–≤—Ç–æ—Ä–∏—Ç—å"))
   markup.row(types.KeyboardButton("üí° –ü–æ–¥—Å–∫–∞–∑–∫–∞"), types.KeyboardButton("‚û°Ô∏è –î–∞–ª–µ–µ"))
   markup.row(types.KeyboardButton("üèÅ –ó–∞–≤–µ—Ä—à–∏—Ç—å –∑–∞–Ω—è—Ç–∏–µ"))
   return markup

def normalize_text(text: str) -> str:
   text = text.lower().strip()
   replacements = {
       '√®': 'e', '√à': 'e', '√©': 'e', '√â': 'e',
       '√†': 'a', '√Ä': 'a', 
       '√¨': 'i', '√å': 'i',
       '√≤': 'o', '√í': 'o',
       '√π': 'u', '√ô': 'u'
   }
   for old, new in replacements.items():
       text = text.replace(old, new)
   return text.strip()

def check_answer(user_answer: str, correct_answer: str, alternatives: List[str]) -> bool:
   user_answer = user_answer.strip().replace('`', "'")
   
   if user_answer == correct_answer:
       return True
       
   if user_answer in alternatives:
       return True
       
   normalized_user = normalize_text(user_answer)
   normalized_correct = normalize_text(correct_answer)
   
   if normalized_user == normalized_correct:
       return True
       
   for alt in alternatives:
       if normalized_user == normalize_text(alt):
           return True
           
   return False

@bot.message_handler(func=lambda message: message.text == "üé§ –ì–æ–ª–æ—Å–æ–≤–æ–π –æ—Ç–≤–µ—Ç")
def voice_answer_prompt(message):
    """–ü–æ–¥—Å–∫–∞–∑–∫–∞ –¥–ª—è –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ –æ—Ç–≤–µ—Ç–∞"""
    bot.reply_to(
        message, 
        "üé§ –ó–∞–ø–∏—à–∏—Ç–µ —Å–≤–æ–π –æ—Ç–≤–µ—Ç –≥–æ–ª–æ—Å–æ–≤—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º.\n"
        "–ì–æ–≤–æ—Ä–∏—Ç–µ —á—ë—Ç–∫–æ –∏ –Ω–µ —Å–ª–∏—à–∫–æ–º –±—ã—Å—Ç—Ä–æ.",
        reply_markup=get_exercise_keyboard()
    )
    
# @bot.message_handler(content_types=['voice'])
# def handle_voice(message):
    # """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≥–æ–ª–æ—Å–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    # try:
        # user_id = message.from_user.id
        # state = user_states.get(user_id, {})
        # if not state.get("awaiting_answer"):
            # return

        # # –ü–æ–ª—É—á–∞–µ–º —Ñ–∞–π–ª
        # file_info = bot.get_file(message.voice.file_id)
        # file_path = file_info.file_path
        # file_url = f"https://api.telegram.org/file/bot{TOKEN}/{file_path}"

        # # –°–∫–∞—á–∏–≤–∞–µ–º –∞—É–¥–∏–æ –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
        # with tempfile.NamedTemporaryFile(suffix='.ogg', delete=False) as temp_ogg:
            # response = requests.get(file_url)
            # temp_ogg.write(response.content)
            # temp_ogg_path = temp_ogg.name

        # # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ wav
        # with tempfile.NamedTemporaryFile(suffix='.wav', delete=False) as temp_wav:
            # audio = AudioSegment.from_ogg(temp_ogg_path)
            # audio.export(temp_wav.name, format="wav")
            # temp_wav_path = temp_wav.name

        # # –†–∞—Å–ø–æ–∑–Ω–∞–µ–º —Ä–µ—á—å
        # r = sr.Recognizer()
        # with sr.AudioFile(temp_wav_path) as source:
            # audio_data = r.record(source)
            
            # # –í—ã–±–∏—Ä–∞–µ–º —è–∑—ã–∫ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–µ—Ä–µ–≤–æ–¥–∞
            # if state["translation_direction"] == "ru_to_it":
                # text = r.recognize_google(audio_data, language="it-IT")
            # else:
                # text = r.recognize_google(audio_data, language="ru-RU")

        # # –ü–µ—Ä–µ–¥–∞–µ–º —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–≤–µ—Ç–æ–≤
        # message.text = text
        # handle_answer(message)

        # # –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
        # os.unlink(temp_ogg_path)
        # os.unlink(temp_wav_path)

    # except sr.UnknownValueError:
        # bot.reply_to(message, "üé§ –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —Ä–µ—á—å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")
    # except sr.RequestError as e:
        # bot.reply_to(message, "üé§ –û—à–∏–±–∫–∞ —Å–µ—Ä–≤–∏—Å–∞ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è —Ä–µ—á–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
    # except Exception as e:
        # logger.error(f"Error processing voice message: {e}")
        # bot.reply_to(message, "üé§ –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è.")

@bot.message_handler(content_types=['voice'])
def handle_voice(message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≥–æ–ª–æ—Å–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    try:
        user_id = message.from_user.id
        state = user_states.get(user_id, {})
        if not state.get("awaiting_answer"):
            return

        file_info = bot.get_file(message.voice.file_id)
        file_path = file_info.file_path
        file_url = f"https://api.telegram.org/file/bot{TOKEN}/{file_path}"

        # –°–∫–∞—á–∏–≤–∞–µ–º –∞—É–¥–∏–æ
        with tempfile.NamedTemporaryFile(suffix='.ogg', delete=False) as temp_ogg:
            response = requests.get(file_url)
            temp_ogg.write(response.content)
            temp_ogg_path = temp_ogg.name

        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ WAV
        with tempfile.NamedTemporaryFile(suffix='.wav', delete=False) as temp_wav:
            audio = AudioSegment.from_ogg(temp_ogg_path)
            audio = audio.set_frame_rate(16000).set_channels(1)
            audio.export(temp_wav.name, format="wav")
            temp_wav_path = temp_wav.name

        # –†–∞—Å–ø–æ–∑–Ω–∞–µ–º —Ä–µ—á—å
        r = sr.Recognizer()
        with sr.AudioFile(temp_wav_path) as source:
            audio_data = r.record(source)
            
            # –í—ã–±–∏—Ä–∞–µ–º —è–∑—ã–∫ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–µ—Ä–µ–≤–æ–¥–∞
            language = "it-IT" if state["translation_direction"] == "ru_to_it" else "ru-RU"
            text = r.recognize_google(audio_data, language=language)
            logger.debug(f"Voice recognized ({language}): {text}")

        # –û—á–∏—â–∞–µ–º —Ñ–∞–π–ª—ã
        os.unlink(temp_ogg_path)
        os.unlink(temp_wav_path)

        # –ü–µ—Ä–µ–¥–∞–µ–º –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
        message.text = text
        handle_answer(message)

    except sr.UnknownValueError:
        lang_text = "–∏—Ç–∞–ª—å—è–Ω—Å–∫–æ–º" if state["translation_direction"] == "ru_to_it" else "—Ä—É—Å—Å–∫–æ–º"
        bot.reply_to(
            message, 
            f"üé§ –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —Ä–µ—á—å –Ω–∞ {lang_text} —è–∑—ã–∫–µ. "
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≥–æ–≤–æ—Ä–∏—Ç—å —á—ë—Ç—á–µ –∏ –º–µ–¥–ª–µ–Ω–Ω–µ–µ.",
            reply_markup=get_exercise_keyboard()
        )
    except sr.RequestError as e:
        bot.reply_to(
            message, 
            "üé§ –û—à–∏–±–∫–∞ —Å–µ—Ä–≤–∏—Å–∞ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ—Ç–≤–µ—Ç–∏—Ç—å —Ç–µ–∫—Å—Ç–æ–º.",
            reply_markup=get_exercise_keyboard()
        )
    except Exception as e:
        logger.error(f"Error processing voice: {e}")
        bot.reply_to(
            message, 
            "üé§ –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è.",
            reply_markup=get_exercise_keyboard()
        )
        
@bot.message_handler(commands=['start'])
def send_welcome(message):
   user_id = message.from_user.id
   user_data = load_user_data(user_id)
   user_states[user_id] = {
       "translation_direction": "ru_to_it",
       "awaiting_answer": False
   }
   
   welcome_text = (
       "*–ü—Ä–∏–≤–µ—Ç! *\n"
       "–Ø –±–æ—Ç –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è –∏—Ç–∞–ª—å—è–Ω—Å–∫–æ–≥–æ —è–∑—ã–∫–∞.\n\n"
       f"üìö –ê–∫—Ç–∏–≤–Ω—ã—Ö —Å–ª–æ–≤: {len(user_data['active_words'])}\n"
       f"‚úÖ –ò–∑—É—á–µ–Ω–æ —Å–ª–æ–≤: {len(user_data['learned_words'])}\n\n"
       "üîπ *'–ù–∞—á–∞—Ç—å –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–µ'* - –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è —Å–ª–æ–≤\n"
       "üîπ *'–°–º–µ–Ω–∏—Ç—å –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ'* - –≤—ã–±–æ—Ä –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–µ—Ä–µ–≤–æ–¥–∞\n"
       "üîπ *'–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞'* - –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞\n\n"
       "–ù–∞—á–Ω—ë–º? üòä"
   )
   bot.reply_to(message, welcome_text, parse_mode='Markdown', reply_markup=get_main_keyboard())

@bot.message_handler(func=lambda message: message.text in ["üéØ –ù–∞—á–∞—Ç—å –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–µ", "/review"])
def start_review(message):
   user_id = message.from_user.id
   user_data = load_user_data(user_id)
   words_to_review = get_words_for_review(user_data)
   
   if not words_to_review:
       bot.reply_to(message, "–ù–µ—Ç —Å–ª–æ–≤ –¥–ª—è –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è", reply_markup=get_main_keyboard())
       return

   user_data["current_session"] = words_to_review
   user_data["current_word_index"] = 0
   save_user_data(user_id, user_data)
   
   user_states[user_id] = {
       "translation_direction": "ru_to_it",
       "awaiting_answer": True
   }
   
   show_current_exercise(message.chat.id, user_id)

def show_current_exercise(chat_id: int, user_id: int):
    logger.debug(f"Showing exercise for user {user_id}")
    user_data = load_user_data(user_id)
    
    if not user_data["current_session"]:
        logger.debug("No current session")
        bot.send_message(chat_id, "‚ùå –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π —Å–µ—Å—Å–∏–∏", reply_markup=get_main_keyboard())
        return
    
    current_word = user_data["current_session"][user_data["current_word_index"]]
    word_data = VOCABULARY["–ë—É–¥—É –∏–∑—É—á–∞—Ç—å"].get(current_word["word"])
    example = random.choice(word_data["–ø—Ä–∏–º–µ—Ä—ã"])
    
    state = user_states.get(user_id, {})
    translation_direction = state.get("translation_direction", "ru_to_it")
    question = example["—Ä—É—Å—Å–∫–∏–π"] if translation_direction == "ru_to_it" else example["–∏—Ç–∞–ª—å—è–Ω—Å–∫–∏–π"]
    direction_text = "–∏—Ç–∞–ª—å—è–Ω—Å–∫–∏–π" if translation_direction == "ru_to_it" else "—Ä—É—Å—Å–∫–∏–π"
    
    user_states[user_id] = {
        "translation_direction": translation_direction,
        "awaiting_answer": True,
        "current_example": example
    }
    
    progress_bar = "üü¢" * current_word["correct_answers"] + "‚ö™Ô∏è" * (CORRECT_FOR_LEARNED - current_word["correct_answers"])
    message_text = (
        f"*{current_word['word']} - {current_word['translation']}*\n\n"
        f"–ü–µ—Ä–µ–≤–µ–¥–∏—Ç–µ –Ω–∞ {direction_text}:\n"
        f"*{question}*\n\n"
        f"–ü—Ä–æ–≥—Ä–µ—Å—Å –∏–∑—É—á–µ–Ω–∏—è: {progress_bar}\n"
        f"_–°–ª–æ–≤–æ {user_data['current_word_index'] + 1} –∏–∑ 5_"
    )
    
    bot.send_message(chat_id, message_text, parse_mode='Markdown', reply_markup=get_exercise_keyboard())
    logger.debug(f"Exercise shown: {current_word['word']}")
    
@bot.message_handler(func=lambda message: message.text == "‚è© –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å")
def skip_word(message):
    logger.debug("Skip word requested")
    user_id = message.from_user.id
    user_data = load_user_data(user_id)
    
    if not user_data.get("current_session"):
        return
        
    if user_data["current_word_index"] >= len(user_data["current_session"]) - 1:
        user_data["current_session"] = []
        user_data["current_word_index"] = 0
        save_user_data(user_id, user_data)
        bot.reply_to(message, "–°–µ—Å—Å–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞", reply_markup=get_main_keyboard())
        return
        
    user_data["current_word_index"] += 1
    save_user_data(user_id, user_data)
    
    bot.reply_to(message, "‚è© –°–ª–æ–≤–æ –ø—Ä–æ–ø—É—â–µ–Ω–æ")
    show_current_exercise(message.chat.id, user_id)
    
@bot.message_handler(func=lambda message: message.text == "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
def show_statistics(message):
   user_id = message.from_user.id
   user_data = load_user_data(user_id)
   
   active_words = user_data["active_words"]
   new_words = sum(1 for w in active_words if w["correct_answers"] == 0)
   learning_words = sum(1 for w in active_words if 0 < w["correct_answers"] < CORRECT_FOR_LEARNED)
   learned_words = len(user_data["learned_words"])
   
   stats_text = [
       "üìä *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ–±—É—á–µ–Ω–∏—è:*\n",
       f"üìö –ê–∫—Ç–∏–≤–Ω—ã–µ —Å–ª–æ–≤–∞: {len(active_words)}",
       f"üÜï –ù–æ–≤—ã–µ —Å–ª–æ–≤–∞ (0 –æ—Ç–≤–µ—Ç–æ–≤): {new_words}",
       f"üìù –í –ø—Ä–æ—Ü–µ—Å—Å–µ (1-7 –æ—Ç–≤–µ—Ç–æ–≤): {learning_words}",
       f"‚úÖ –ò–∑—É—á–µ–Ω–æ (8+ –æ—Ç–≤–µ—Ç–æ–≤): {learned_words}\n",
       f"–í—Å–µ–≥–æ —Å–ª–æ–≤ –≤ —Å–ª–æ–≤–∞—Ä–µ: {len(VOCABULARY['–ë—É–¥—É –∏–∑—É—á–∞—Ç—å'])}"
   ]
   
   bot.reply_to(message, "\n".join(stats_text), parse_mode='Markdown', reply_markup=get_main_keyboard())

@bot.message_handler(func=lambda message: message.text == "üîÑ –°–º–µ–Ω–∏—Ç—å –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ")
def switch_translation_direction(message):
    logger.debug("Direction switch requested")
    user_id = message.from_user.id
    state = user_states.get(user_id, {"translation_direction": "ru_to_it"})
    new_direction = "it_to_ru" if state.get("translation_direction") == "ru_to_it" else "ru_to_it"
    
    user_states[user_id] = {
        "translation_direction": new_direction,
        "awaiting_answer": state.get("awaiting_answer", False),
        "current_example": state.get("current_example")
    }
    
    direction_text = "–∏—Ç–∞–ª—å—è–Ω—Å–∫–∏–π ‚Üí —Ä—É—Å—Å–∫–∏–π" if new_direction == "it_to_ru" else "—Ä—É—Å—Å–∫–∏–π ‚Üí –∏—Ç–∞–ª—å—è–Ω—Å–∫–∏–π"
    bot.reply_to(message, f"üîÑ –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–µ—Ä–µ–≤–æ–¥–∞ –∏–∑–º–µ–Ω–µ–Ω–æ –Ω–∞:\n*{direction_text}*", 
                parse_mode='Markdown')
    
    if state.get("awaiting_answer"):
        show_current_exercise(message.chat.id, user_id)

@bot.message_handler(func=lambda message: message.text == "‚ÑπÔ∏è –ü–æ–º–æ—â—å")
def show_help(message):
    help_text = [
        "*üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:*\n",
        "üéØ *–ù–∞—á–∞—Ç—å –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–µ* - –∏–∑—É—á–µ–Ω–∏–µ —Å–ª–æ–≤",
        "üîÑ *–°–º–µ–Ω–∏—Ç—å –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ* - –∏–∑–º–µ–Ω–∏—Ç—å –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–µ—Ä–µ–≤–æ–¥–∞",
        "üìä *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞* - –ø—Ä–æ–≥—Ä–µ—Å—Å –æ–±—É—á–µ–Ω–∏—è\n",
        "*–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:*",
        "`/start` - –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫ –±–æ—Ç–∞",
        "`/status` - –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ —Å–ª–æ–≤",
        "`/reset` - —Å–±—Ä–æ—Å –ø—Ä–æ–≥—Ä–µ—Å—Å–∞\n",
        "*–í–æ –≤—Ä–µ–º—è –∑–∞–Ω—è—Ç–∏—è:*",
        "üé§ –í—ã –º–æ–∂–µ—Ç–µ –æ—Ç–≤–µ—á–∞—Ç—å –≥–æ–ª–æ—Å–æ–≤—ã–º–∏ —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏",
        "üí° –ü–æ–¥—Å–∫–∞–∑–∫–∞ - –ø–æ–∫–∞–∑–∞—Ç—å –ø–µ—Ä–≤—ã–µ –±—É–∫–≤—ã",
        "‚è© –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å - –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å —Å–ª–æ–≤–æ",
        "üèÅ –ó–∞–≤–µ—Ä—à–∏—Ç—å –∑–∞–Ω—è—Ç–∏–µ - –∑–∞–∫–æ–Ω—á–∏—Ç—å —Å–µ—Å—Å–∏—é"
    ]
    bot.reply_to(message, "\n".join(help_text), parse_mode='Markdown', reply_markup=get_main_keyboard())

@bot.message_handler(func=lambda message: message.text == "üí° –ü–æ–¥—Å–∫–∞–∑–∫–∞")
def show_hint(message):
   user_id = message.from_user.id
   state = user_states.get(user_id, {})
   
   if not state.get("awaiting_answer") or not state.get("current_example"):
       return
       
   example = state["current_example"]
   answer = example["–∏—Ç–∞–ª—å—è–Ω—Å–∫–∏–π"] if state["translation_direction"] == "ru_to_it" else example["—Ä—É—Å—Å–∫–∏–π"]
   hint = ' '.join(word[0] + '_' * (len(word)-1) for word in answer.split())
   
   bot.reply_to(message, f"üí° –ü–æ–¥—Å–∫–∞–∑–∫–∞:\n{hint}", reply_markup=get_exercise_keyboard())

@bot.message_handler(func=lambda message: message.text == "üèÅ –ó–∞–≤–µ—Ä—à–∏—Ç—å –∑–∞–Ω—è—Ç–∏–µ")
def end_session(message):
   user_id = message.from_user.id
   user_data = load_user_data(user_id)
   user_data["current_session"] = []
   user_data["current_word_index"] = 0
   save_user_data(user_id, user_data)
   
   bot.reply_to(message, "–ó–∞–Ω—è—Ç–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!", reply_markup=get_main_keyboard())

# @bot.message_handler(commands=['status'])
# def check_status(message):
    # user_id = message.from_user.id
    # user_data = load_user_data(user_id)
    # current_time = get_now()
    
    # status_text = ["üìä *–¢–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å:*\n"]
    # words_to_review = []
    
    # for word in user_data["active_words"]:
        # review_time = parse_time(word["next_review"])
        # if review_time <= current_time:
            # words_to_review.append(word)
    
    # if words_to_review:
        # status_text.append("üîî *–°–ª–æ–≤–∞ –¥–ª—è –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è:*")
        # for word in words_to_review:
            # status_text.append(f"‚Ä¢ {word['word']} - {word['translation']}")
    # else:
        # status_text.append("üîï –ù–µ—Ç —Å–ª–æ–≤ –¥–ª—è –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è")
        
    # bot.reply_to(message, "\n".join(status_text), parse_mode='Markdown')

@bot.message_handler(commands=['status'])
def check_status(message):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ —Å–ª–æ–≤"""
    user_id = message.from_user.id
    try:
        user_data = load_user_data(user_id)
        current_time = get_now()
        
        status_text = ["üìä *–¢–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å:*\n"]
        
        # –†–∞–∑–¥–µ–ª—è–µ–º —Å–ª–æ–≤–∞ –ø–æ –≤—Ä–µ–º–µ–Ω–∏
        ready_now = []
        upcoming = []
        for word in user_data["active_words"]:
            review_time = parse_time(word["next_review"])
            if review_time <= current_time:
                ready_now.append(word)
            else:
                time_diff = review_time - current_time
                hours = int(time_diff.total_seconds() // 3600)
                upcoming.append((word, hours))
        
        # –°–ª–æ–≤–∞ –¥–ª—è –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è —Å–µ–π—á–∞—Å
        if ready_now:
            status_text.append("üîî *–ì–æ—Ç–æ–≤—ã –∫ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—é:*")
            for word in ready_now:
                status_text.append(f"‚Ä¢ {word['word']} - {word['translation']}")
        else:
            status_text.append("‚úÖ –ù–µ—Ç —Å–ª–æ–≤ –¥–ª—è –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å")
        
        # –ü—Ä–µ–¥—Å—Ç–æ—è—â–∏–µ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è
        if upcoming:
            status_text.append("\n‚è∞ *–ü—Ä–µ–¥—Å—Ç–æ—è—â–∏–µ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è:*")
            # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –≤—Ä–µ–º–µ–Ω–∏
            upcoming.sort(key=lambda x: x[1])
            for word, hours in upcoming:
                if hours < 24:
                    status_text.append(f"‚Ä¢ {word['word']} - —á–µ—Ä–µ–∑ {hours}—á")
                else:
                    days = hours // 24
                    remaining_hours = hours % 24
                    status_text.append(f"‚Ä¢ {word['word']} - —á–µ—Ä–µ–∑ {days}–¥ {remaining_hours}—á")
        
        bot.reply_to(message, "\n".join(status_text), parse_mode='Markdown')
        
    except Exception as e:
        logger.error(f"Error checking status: {e}")
        bot.reply_to(message, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å—Ç–∞—Ç—É—Å–∞")
        
@bot.message_handler(func=lambda message: message.text == "‚û°Ô∏è –î–∞–ª–µ–µ")
def next_exercise(message):
    """–ü–µ—Ä–µ—Ö–æ–¥ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—é"""
    user_id = message.from_user.id
    logger.debug(f"Next exercise requested by user {user_id}")
    
    try:
        user_data = load_user_data(user_id)
        if not user_data.get("current_session"):
            logger.debug("No current session")
            bot.reply_to(
                message,
                "‚ùå –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π —Å–µ—Å—Å–∏–∏. –ù–∞—á–Ω–∏—Ç–µ –Ω–æ–≤–æ–µ –∑–∞–Ω—è—Ç–∏–µ.",
                reply_markup=get_main_keyboard()
            )
            return
            
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–Ω–¥–µ–∫—Å
        current_index = user_data.get("current_word_index", 0)
        if current_index >= len(user_data["current_session"]) - 1:
            # –ó–∞–≤–µ—Ä—à–∞–µ–º —Å–µ—Å—Å–∏—é
            logger.debug("End of session reached")
            user_data["current_session"] = []
            user_data["current_word_index"] = 0
            save_user_data(user_id, user_data)
            
            bot.reply_to(
                message,
                "‚úÖ –í—Å–µ –∑–∞–¥–∞–Ω–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω—ã!\n–ù–∞—á–Ω–∏—Ç–µ –Ω–æ–≤–æ–µ –∑–∞–Ω—è—Ç–∏–µ, –∫–æ–≥–¥–∞ –±—É–¥–µ—Ç–µ –≥–æ—Ç–æ–≤—ã.",
                reply_markup=get_main_keyboard()
            )
            return
        
        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —Å–ª–æ–≤—É
        user_data["current_word_index"] += 1
        save_user_data(user_id, user_data)
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –æ—Ç–≤–µ—Ç–∞
        user_states[user_id] = {
            "translation_direction": user_states.get(user_id, {}).get("translation_direction", "ru_to_it"),
            "awaiting_answer": True,
            "current_example": None
        }
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ª–µ–¥—É—é—â–µ–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ
        show_current_exercise(message.chat.id, user_id)
        
    except Exception as e:
        logger.error(f"Error in next_exercise: {e}", exc_info=True)
        bot.reply_to(
            message,
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ.",
            reply_markup=get_main_keyboard()
        )
        
@bot.message_handler(commands=['reset'])
def handle_reset(message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /reset"""
    user_id = message.from_user.id
    logger.info(f"User {user_id} requested data reset")
    
    try:
        # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–π —Ñ–∞–π–ª —Å –¥–∞–Ω–Ω—ã–º–∏
        file_path = f'user_data/user_{user_id}.json'
        if os.path.exists(file_path):
            os.remove(file_path)
            logger.info(f"Deleted user data file: {file_path}")
        
        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
        create_initial_user_data(user_id)
        
        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        user_states[user_id] = {
            "translation_direction": "ru_to_it",
            "awaiting_answer": False,
            "current_example": None
        }
        
        bot.reply_to(
            message,
            "üîÑ –î–∞–Ω–Ω—ã–µ –ø–æ–ª–Ω–æ—Å—Ç—å—é —Å–±—Ä–æ—à–µ–Ω—ã. –ù–∞—á–∏–Ω–∞–µ–º –æ–±—É—á–µ–Ω–∏–µ —Å–Ω–∞—á–∞–ª–∞!",
            reply_markup=get_main_keyboard()
        )
    except Exception as e:
        logger.error(f"Error in handle_reset: {e}")
        bot.reply_to(
            message,
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–±—Ä–æ—Å–µ –¥–∞–Ω–Ω—ã—Ö",
            reply_markup=get_main_keyboard()
        )
def highlight_differences(user_answer: str, correct_answer: str) -> str:
    """–ü–æ–¥—Å–≤–µ—Ç–∫–∞ —Ä–∞–∑–ª–∏—á–∏–π –º–µ–∂–¥—É –æ—Ç–≤–µ—Ç–∞–º–∏"""
    user_words = user_answer.lower().split()
    correct_words = correct_answer.lower().split()
    
    result = []
    for i in range(max(len(user_words), len(correct_words))):
        # –ï—Å–ª–∏ —Å–ª–æ–≤–æ –µ—Å—Ç—å –≤ –æ–±–æ–∏—Ö –æ—Ç–≤–µ—Ç–∞—Ö
        if i < len(user_words) and i < len(correct_words):
            if user_words[i] != correct_words[i]:
                result.append(f"*{user_words[i]}* ‚Üí _{correct_words[i]}_")
            else:
                result.append(user_words[i])
        # –ï—Å–ª–∏ –≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–º –æ—Ç–≤–µ—Ç–µ –±–æ–ª—å—à–µ —Å–ª–æ–≤
        elif i < len(user_words):
            result.append(f"*{user_words[i]}* ‚Üí _[–ª–∏—à–Ω–µ–µ]_")
        # –ï—Å–ª–∏ –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –æ—Ç–≤–µ—Ç–µ –±–æ–ª—å—à–µ —Å–ª–æ–≤
        else:
            result.append(f"*[–ø—Ä–æ–ø—É—â–µ–Ω–æ]* ‚Üí _{correct_words[i]}_")
    
    return ' '.join(result)

@bot.message_handler(func=lambda message: message.text == "üîÑ –ü–æ–≤—Ç–æ—Ä–∏—Ç—å")
def retry_answer(message):
    """–ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞"""
    user_id = message.from_user.id
    logger.debug(f"User {user_id} retrying answer")
    
    try:
        state = user_states.get(user_id, {})
        state["awaiting_answer"] = True
        user_states[user_id] = state
        
        show_current_exercise(message.chat.id, user_id)
    except Exception as e:
        logger.error(f"Error in retry: {e}")
        bot.reply_to(
            message,
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ.",
            reply_markup=get_main_keyboard()
        )
        
@bot.message_handler(func=lambda message: True)
def handle_answer(message):
   """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
   user_id = message.from_user.id
   state = user_states.get(user_id, {})
   if not state.get("awaiting_answer"):
       return

   try:
       # –ó–∞–≥—Ä—É–∂–∞–µ–º –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º –¥–∞–Ω–Ω—ã–µ
       user_data = load_user_data(user_id)
       logger.debug(f"Active words before update: {[w['word'] for w in user_data['active_words']]}")
       
       if not user_data.get("current_session"):
           logger.debug("No current session found")
           return

       current_word = user_data["current_session"][user_data["current_word_index"]]
       example = state.get("current_example")
       if not example:
           logger.error(f"No current example found for user {user_id}")
           return

       # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç
       if state["translation_direction"] == "ru_to_it":
           correct_answer = example["–∏—Ç–∞–ª—å—è–Ω—Å–∫–∏–π"]
           alternatives = example.get("–∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤—ã_–∏—Ç", [])
       else:
           correct_answer = example["—Ä—É—Å—Å–∫–∏–π"]
           alternatives = example.get("–∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤—ã_—Ä—É—Å", [])

       # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç–≤–µ—Ç
       is_correct = check_answer(message.text, correct_answer, alternatives)
       logger.debug(f"Checking answer '{message.text}' for word '{current_word['word']}': {is_correct}")

       # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
       current_word_found = False
       for i, word in enumerate(user_data["active_words"]):
           if word["word"] == current_word["word"]:
               current_word_found = True
               previous_correct = word["correct_answers"]
               updated_word = update_word_progress(word, is_correct)
               
               # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ 3 –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤
               if is_correct and previous_correct < CORRECT_FOR_NEW_WORD and updated_word["correct_answers"] >= CORRECT_FOR_NEW_WORD:
                   if user_data["remaining_words"]:
                       new_word = random.choice(user_data["remaining_words"])
                       user_data["remaining_words"].remove(new_word)
                       word_data = VOCABULARY["–ë—É–¥—É –∏–∑—É—á–∞—Ç—å"][new_word]
                       new_word_data = create_word_data(new_word, word_data["–ø–µ—Ä–µ–≤–æ–¥"])
                       user_data["active_words"].append(new_word_data)
                       logger.info(f"Added new word '{new_word}' after '{word['word']}' reached {CORRECT_FOR_NEW_WORD} correct answers")

               # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ 8 –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤
               if updated_word["correct_answers"] >= CORRECT_FOR_LEARNED:
                   logger.info(f"Word '{updated_word['word']}' learned, moving to learned words")
                   user_data["learned_words"].append(updated_word)
                   user_data["active_words"].pop(i)
                   # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—É—â—É—é —Å–µ—Å—Å–∏—é
                   user_data["current_session"] = [w for w in user_data["current_session"] 
                                                 if w["word"] != updated_word["word"]]
               else:
                   user_data["active_words"][i] = updated_word
                   current_word.update(updated_word)  # –û–±–Ω–æ–≤–ª—è–µ–º —Å–ª–æ–≤–æ –≤ —Ç–µ–∫—É—â–µ–π —Å–µ—Å—Å–∏–∏
               break

       if not current_word_found:
           logger.error(f"Word '{current_word['word']}' not found in active words")
           return

       # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
       logger.debug(f"Active words after update: {[w['word'] for w in user_data['active_words']]}")
       save_user_data(user_id, user_data)

       # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
       progress_bar = "üü¢" * updated_word["correct_answers"] + "‚ö™Ô∏è" * (CORRECT_FOR_LEARNED - updated_word["correct_answers"])
       
       if is_correct:
           response = [
               "‚úÖ *–ü—Ä–∞–≤–∏–ª—å–Ω–æ!*\n",
               f"–í–∞—à –æ—Ç–≤–µ—Ç: _{message.text}_",
               f"–ü—Ä–æ–≥—Ä–µ—Å—Å: {progress_bar}"
           ]
           
           # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–æ–≤–æ–º —Å–ª–æ–≤–µ
           if previous_correct < CORRECT_FOR_NEW_WORD and updated_word["correct_answers"] >= CORRECT_FOR_NEW_WORD:
               response.append("\nüéâ –í—ã –¥–æ—Å—Ç–∏–≥–ª–∏ 3 –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤!")
               if user_data["remaining_words"]:
                   response.append("–î–æ–±–∞–≤–ª–µ–Ω–æ –Ω–æ–≤–æ–µ —Å–ª–æ–≤–æ –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è!")
           
           markup = get_next_keyboard()
       else:
            response = [
                "‚ùå *–û—à–∏–±–∫–∞!*\n",
                "–í–∞—à –æ—Ç–≤–µ—Ç —Å –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è–º–∏:",
                f"{highlight_differences(message.text, correct_answer)}\n",
                f"–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: *{correct_answer}*",
                f"–ü—Ä–æ–≥—Ä–µ—Å—Å: {progress_bar}"
            ]
            markup = get_retry_keyboard()
           

       # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç
       state["awaiting_answer"] = False
       bot.reply_to(message, "\n".join(response), parse_mode='Markdown', reply_markup=markup)

   except Exception as e:
       logger.error(f"Error in handle_answer: {e}", exc_info=True)
       bot.reply_to(message, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ.",
                   reply_markup=get_main_keyboard())
                   

def check_notifications():
   while True:
       try:
           current_time = get_now()
           for filename in os.listdir('user_data'):
               try:
                   user_id = int(filename.split('_')[1].split('.')[0])
                   user_data = load_user_data(user_id)
                   words_to_review = [
                       word for word in user_data["active_words"]
                       if parse_time(word["next_review"]) <= current_time
                   ]
                   
                   if words_to_review:
                       text = (
                           "üîî –ü–æ—Ä–∞ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å —Å–ª–æ–≤–∞!\n\n"
                           f"–ì–æ—Ç–æ–≤–æ –∫ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—é: {len(words_to_review)} —Å–ª–æ–≤\n\n"
                       )
                       text += "\n".join(f"‚Ä¢ {w['word']} - {w['translation']}" 
                                       for w in words_to_review[:3])
                       bot.send_message(user_id, text, reply_markup=get_main_keyboard())
               except Exception as e:
                   logger.error(f"Notification error for user {filename}: {e}")
       except Exception as e:
           logger.error(f"Notification check error: {e}")
       time.sleep(600)
       
def send_initial_message():
    """–û—Ç–ø—Ä–∞–≤–∫–∞ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ"""
    try:
        if os.path.exists('user_data'):
            for filename in os.listdir('user_data'):
                try:
                    user_id = int(filename.split('_')[1].split('.')[0])
                    bot.send_message(
                        user_id,
                        "üü¢ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!\n–ù–∞–∂–º–∏—Ç–µ /start –¥–ª—è –Ω–∞—á–∞–ª–∞.",
                        reply_markup=get_main_keyboard()
                    )
                    logger.info(f"Sent startup message to user {user_id}")
                except Exception as e:
                    logger.error(f"Failed to send startup message: {e}")
    except Exception as e:
        logger.error(f"Error in send_initial_message: {e}")

def run_bot():
    try:
        if os.path.exists('user_data'):
            shutil.rmtree('user_data')
        os.makedirs('user_data')
        logger.info("Cleared old user data")

        bot.delete_webhook()
        bot.get_updates(offset=-1)  # –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –∞–ø–¥–µ–π—Ç—ã
        
        notifications = threading.Thread(target=check_notifications, daemon=True)
        notifications.start()
        
        send_initial_message()  # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        logger.info("Bot started")
        
        bot.infinity_polling(timeout=60)
    except Exception as e:
        logger.error(f"Bot error: {e}")
        sys.exit(1)


if __name__ == "__main__":
   try:
       signal.signal(signal.SIGINT, lambda s, f: (
           logger.info("Shutting down..."),
           sys.exit(0)
       ))
       run_bot()
   except Exception as e:
       logger.error(f"Fatal error: {e}")
       raise
       
   
   
   