import telebot
from telebot import types
import json
import datetime
import time
import random
import os
import logging
import sys
import signal
from typing import Dict, Optional, List
from vocabulary import VOCABULARY
import threading
from pydub import AudioSegment
import speech_recognition as sr
import requests
import tempfile
import shutil  # –î–æ–±–∞–≤–ª–µ–Ω–æ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ñ–∞–π–ª–∞–º–∏
from gtts import gTTS
import asyncio
from pydub.utils import mediainfo
import platform
import subprocess

# –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—É—Ç—å –∫ ffmpeg –¥–ª—è pydub
# –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ø—É—Ç–∏ –¥–ª—è pydub

AudioSegment.converter = "/usr/bin/ffmpeg"
AudioSegment.ffmpeg = "/usr/bin/ffmpeg"
AudioSegment.ffprobe = "/usr/bin/ffprobe"  # –¢–æ—á–Ω—ã–π –ø—É—Ç—å, –∫–æ—Ç–æ—Ä—ã–π –º—ã –Ω–∞—à–ª–∏

# –ë–∞–∑–æ–≤—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')
console_handler = logging.StreamHandler(sys.stdout)
console_handler.setFormatter(formatter)
file_handler = logging.FileHandler('bot_log.txt', encoding='utf-8')
file_handler.setFormatter(formatter)
logger = logging.getLogger('ItalianBot')
logger.setLevel(logging.DEBUG)
logger.addHandler(console_handler)
logger.addHandler(file_handler)
telebot_logger = logging.getLogger('TeleBot')
telebot_logger.setLevel(logging.WARNING)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
TOKEN = "7312843542:AAHVDxaHYSveOpitmkWagTFoMVNzYF4_tMU"
bot = telebot.TeleBot(TOKEN)
user_states = {}
WORDS_PER_SESSION = 5
CORRECT_FOR_NEW_WORD = 3
CORRECT_FOR_LEARNED = 8

WORD_STATUS = {
    "NEW": "new",
    "LEARNING": "learning",
    "LEARNED": "learned"
}


def get_now() -> datetime.datetime:
    """–£–Ω–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏"""
    return datetime.datetime.now().replace(tzinfo=None)

def parse_time(time_str: str) -> datetime.datetime:
    """–ë–µ–∑–æ–ø–∞—Å–Ω—ã–π –ø–∞—Ä—Å–∏–Ω–≥ –≤—Ä–µ–º–µ–Ω–∏ –∏–∑ —Å—Ç—Ä–æ–∫–∏"""
    try:
        dt = datetime.datetime.fromisoformat(time_str)
        return dt.replace(tzinfo=None)
    except:
        return get_now()
        
def calculate_next_interval(correct_answers: int) -> int:
   intervals = {
   0: 1, 1: 4, 2: 8, 3: 24, 4: 72,
   5: 168, 6: 336, 7: 720
   }
   return intervals.get(correct_answers, 720)

def create_word_data(word: str, translation: str) -> dict:
   return {
       "word": word,
       "translation": translation,
       "correct_answers": 0,
       "next_review": get_now().isoformat(),
       "status": WORD_STATUS["NEW"],
       "total_attempts": 0
   }

def create_initial_user_data(user_id: int) -> dict:
    logger.info(f"Creating initial data for user {user_id}")
    all_words = list(VOCABULARY["–ë—É–¥—É –∏–∑—É—á–∞—Ç—å"].keys())
    random.shuffle(all_words)
    
    initial_words = []
    for word in all_words[:WORDS_PER_SESSION]:
        word_data = VOCABULARY["–ë—É–¥—É –∏–∑—É—á–∞—Ç—å"][word]
        initial_words.append(create_word_data(word, word_data["–ø–µ—Ä–µ–≤–æ–¥"]))
    
    remaining = all_words[WORDS_PER_SESSION:]
    logger.info(f"Created initial data with {len(initial_words)} active words and {len(remaining)} remaining")
    
    return {
        "user_id": user_id,
        "active_words": initial_words,
        "learned_words": [],
        "remaining_words": remaining,
        "current_session": [],
        "current_word_index": 0,
        "last_update": get_now().isoformat()
    }

def load_user_data(user_id: int) -> dict:
   if not os.path.exists('user_data'):
       os.makedirs('user_data')
   
   file_path = f'user_data/user_{user_id}.json'
   if os.path.exists(file_path):
       with open(file_path, 'r', encoding='utf-8') as f:
           return json.load(f)
   return create_initial_user_data(user_id)

def save_user_data(user_id: int, data: dict):
   if not os.path.exists('user_data'):
       os.makedirs('user_data')
       
   file_path = f'user_data/user_{user_id}.json'
   with open(file_path, 'w', encoding='utf-8') as f:
       json.dump(data, f, ensure_ascii=False, indent=2)

# –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ get_words_for_review
def get_words_for_review(user_data: dict) -> List[dict]:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Å–ª–æ–≤ –¥–ª—è –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è"""
    logger.debug(f"Getting words for review from active words: {[w['word'] for w in user_data['active_words']]}")
    
    current_time = get_now()
    return [word for word in user_data["active_words"] 
            if parse_time(word["next_review"]) <= current_time]

    # –†–∞–∑–¥–µ–ª—è–µ–º —Å–ª–æ–≤–∞ –Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    for word in user_data["active_words"]:
        if word["correct_answers"] == 0:
            new_words.append(word)
        else:
            review_time = parse_time(word["next_review"])
            if review_time <= current_time:
                overdue_words.append(word)
            else:
                future_words.append(word)

    # –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: –Ω–æ–≤—ã–µ —Å–ª–æ–≤–∞, –ø–æ—Ç–æ–º –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã–µ, –ø–æ—Ç–æ–º –±—É–¥—É—â–∏–µ
    words_to_return = []
    words_to_return.extend(new_words[:WORDS_PER_SESSION])
    
    if len(words_to_return) < WORDS_PER_SESSION:
        words_to_return.extend(overdue_words[:WORDS_PER_SESSION - len(words_to_return)])
    
    if len(words_to_return) < WORDS_PER_SESSION:
        random.shuffle(future_words)
        words_to_return.extend(future_words[:WORDS_PER_SESSION - len(words_to_return)])

    logger.debug(f"Selected words for review: {[w['word'] for w in words_to_return]}")
    return words_to_return[:WORDS_PER_SESSION]

def update_word_progress(word: dict, is_correct: bool) -> dict:
    """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ —Å–ª–æ–≤–∞"""
    word["total_attempts"] = word.get("total_attempts", 0) + 1
    
    if is_correct:
        previous_correct = word.get("correct_answers", 0)
        word["correct_answers"] = previous_correct + 1
        
        if word["correct_answers"] >= CORRECT_FOR_LEARNED:
            word["status"] = WORD_STATUS["LEARNED"]
        elif word["correct_answers"] > 0:
            word["status"] = WORD_STATUS["LEARNING"]
            
        next_interval = calculate_next_interval(word["correct_answers"])
        next_review = get_now() + datetime.timedelta(hours=next_interval)
        word["next_review"] = next_review.isoformat()
        
        logger.debug(
            f"Word {word['word']} progress updated: "
            f"correct_answers: {previous_correct} -> {word['correct_answers']}, "
            f"next_review: {word['next_review']}"
        )
    
    return word
    
def get_main_keyboard():
   markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
   markup.row(types.KeyboardButton("üéØ –ù–∞—á–∞—Ç—å –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–µ"),
              types.KeyboardButton("üèÜ –†–µ–π—Ç–∏–Ω–≥"))
   markup.row(types.KeyboardButton("üîÄ –°–º–µ–Ω–∏—Ç—å –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–µ—Ä–µ–≤–æ–¥–∞"), 
              types.KeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"))
   markup.row(types.KeyboardButton("‚ôªÔ∏è –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞"), types.KeyboardButton("‚ÑπÔ∏è –ü–æ–º–æ—â—å"))
   return markup

def get_exercise_keyboard():
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.row(
        types.KeyboardButton("üí° –ü–æ–¥—Å–∫–∞–∑–∫–∞"),
        types.KeyboardButton("üé§ –ì–æ–ª–æ—Å–æ–≤–æ–π –æ—Ç–≤–µ—Ç")
    )
    markup.row(
        types.KeyboardButton("üîÄ –°–º–µ–Ω–∏—Ç—å –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ"),
        types.KeyboardButton("‚è© –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å")
    )
    markup.row(
        types.KeyboardButton("üèÅ –ó–∞–≤–µ—Ä—à–∏—Ç—å –∑–∞–Ω—è—Ç–∏–µ")
    )
    return markup

def get_next_keyboard():
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.row(
        types.KeyboardButton("‚û°Ô∏è –î–∞–ª–µ–µ"),
        types.KeyboardButton("üîä –ü—Ä–æ—Å–ª—É—à–∞—Ç—å")
    )
    markup.row(
        types.KeyboardButton("üèÅ –ó–∞–≤–µ—Ä—à–∏—Ç—å –∑–∞–Ω—è—Ç–∏–µ")
    )
    return markup

def get_retry_keyboard():
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.row(
        types.KeyboardButton("üîÑ –ü–æ–≤—Ç–æ—Ä–∏—Ç—å"),
        types.KeyboardButton("üí° –ü–æ–¥—Å–∫–∞–∑–∫–∞")
    )
    markup.row(
        types.KeyboardButton("‚û°Ô∏è –î–∞–ª–µ–µ"),
        types.KeyboardButton("üèÅ –ó–∞–≤–µ—Ä—à–∏—Ç—å –∑–∞–Ω—è—Ç–∏–µ")
    )
    return markup

def normalize_text(text: str) -> str:
   text = text.lower().strip()
   replacements = {
       '√®': 'e', '√à': 'e', '√©': 'e', '√â': 'e',
       '√†': 'a', '√Ä': 'a', 
       '√¨': 'i', '√å': 'i',
       '√≤': 'o', '√í': 'o',
       '√π': 'u', '√ô': 'u'
   }
   for old, new in replacements.items():
       text = text.replace(old, new)
   return text.strip()

def check_answer(user_answer: str, correct_answer: str, alternatives: List[str]) -> bool:
   user_answer = user_answer.strip().replace('`', "'")
   
   if user_answer == correct_answer:
       return True
       
   if user_answer in alternatives:
       return True
       
   normalized_user = normalize_text(user_answer)
   normalized_correct = normalize_text(correct_answer)
   
   if normalized_user == normalized_correct:
       return True
       
   for alt in alternatives:
       if normalized_user == normalize_text(alt):
           return True
           
   return False

def delete_messages_with_delay(chat_id: int, message_ids: list):
    """–£–¥–∞–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π —Å –Ω–µ–±–æ–ª—å—à–æ–π –∑–∞–¥–µ—Ä–∂–∫–æ–π –¥–ª—è –∞–Ω–∏–º–∞—Ü–∏–∏"""
    for msg_id in message_ids:
        try:
            # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–µ—Ä–∂–∫—É 0.3 —Å–µ–∫—É–Ω–¥—ã –º–µ–∂–¥—É —É–¥–∞–ª–µ–Ω–∏—è–º–∏
            time.sleep(0.3)
            bot.delete_message(chat_id, msg_id)
        except Exception as e:
            logger.debug(f"Could not delete message {msg_id}: {e}")
    
@bot.message_handler(func=lambda message: message.text == "üé§ –ì–æ–ª–æ—Å–æ–≤–æ–π –æ—Ç–≤–µ—Ç")
def voice_answer_prompt(message):
    user_id = message.from_user.id
    state = user_states.get(user_id, {})
    
    sent_message = bot.reply_to(
        message, 
        "üé§ –ó–∞–ø–∏—à–∏—Ç–µ —Å–≤–æ–π –æ—Ç–≤–µ—Ç –≥–æ–ª–æ—Å–æ–≤—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º.\n"
        "–ì–æ–≤–æ—Ä–∏—Ç–µ —á—ë—Ç–∫–æ –∏ –Ω–µ —Å–ª–∏—à–∫–æ–º –±—ã—Å—Ç—Ä–æ.",
        reply_markup=get_exercise_keyboard()
    )
    
    # –î–æ–±–∞–≤–ª—è–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏–π
    message_ids = state.get("message_ids", [])
    message_ids.extend([message.message_id, sent_message.message_id])
    state["message_ids"] = message_ids
    user_states[user_id] = state
    
@bot.message_handler(func=lambda message: message.text == "üèÜ –†–µ–π—Ç–∏–Ω–≥")
def show_rating(message):
    try:
        user_ratings = []
        current_user_id = message.from_user.id
        
        # –°–æ–±–∏—Ä–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –≤—Å–µ—Ö —Ñ–∞–π–ª–æ–≤ user_data
        for filename in os.listdir('user_data'):
            if filename.startswith('user_') and filename.endswith('.json'):
                try:
                    user_id = int(filename.split('_')[1].split('.')[0])
                    with open(os.path.join('user_data', filename), 'r', encoding='utf-8') as f:
                        user_data = json.load(f)
                        
                        user_ratings.append({
                            'user_id': user_id,
                            'active_words': len(user_data.get('active_words', [])),
                            'learned_words': len(user_data.get('learned_words', [])),
                            'total_words': len(user_data.get('active_words', [])) + len(user_data.get('learned_words', [])),
                            'is_current': user_id == current_user_id
                        })
                except Exception as e:
                    logger.error(f"Error processing user file {filename}: {e}")
                    continue
        
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –æ–±—â–µ–º—É –∫–æ–ª–∏—á–µ—Å—Ç–≤—É —Å–ª–æ–≤
        user_ratings.sort(key=lambda x: x['total_words'], reverse=True)
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        rating_text = ["üèÜ *–†–µ–π—Ç–∏–Ω–≥ —É—á–µ–Ω–∏–∫–æ–≤:*\n"]
        
        for i, user in enumerate(user_ratings, 1):
            medal = "ü•á" if i == 1 else "ü•à" if i == 2 else "ü•â" if i == 3 else "üë§"
            current_mark = "üëâ" if user['is_current'] else " "
            
            rating_text.append(
                f"{current_mark}{medal} #{i}: ID{user['user_id']}\n"
                f"   üìö –ò–∑—É—á–∞–µ—Ç—Å—è: {user['active_words']}\n"
                f"   ‚úÖ –ò–∑—É—á–µ–Ω–æ: {user['learned_words']}\n"
                f"   üìä –í—Å–µ–≥–æ —Å–ª–æ–≤: {user['total_words']}"
            )
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        sent_message = bot.reply_to(
            message,
            "\n\n".join(rating_text),
            parse_mode='Markdown'
        )
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è
        state = user_states.get(current_user_id, {})
        state["message_ids"] = [sent_message.message_id, message.message_id]
        user_states[current_user_id] = state
        
    except Exception as e:
        logger.error(f"Error showing rating: {e}")
        sent_message = bot.reply_to(
            message,
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–∏ —Ä–µ–π—Ç–∏–Ω–≥–∞"
        )
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ
        state = user_states.get(current_user_id, {})
        state["message_ids"] = [sent_message.message_id, message.message_id]
        user_states[current_user_id] = state
        
@bot.message_handler(func=lambda message: message.text == "üîä –ü—Ä–æ—Å–ª—É—à–∞—Ç—å")
def play_phrase(message):
    try:
        user_id = message.from_user.id
        state = user_states.get(user_id, {})
        example = state.get("current_example")
        if not example:
            return
            
        # –í—ã–±–∏—Ä–∞–µ–º —Ç–µ–∫—Å—Ç –∏ —è–∑—ã–∫ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–µ—Ä–µ–≤–æ–¥–∞
        if state["translation_direction"] == "ru_to_it":
            text = example["–∏—Ç–∞–ª—å—è–Ω—Å–∫–∏–π"]
            lang = "it"
        else:
            text = example["—Ä—É—Å—Å–∫–∏–π"]
            lang = "ru"
        
        with tempfile.NamedTemporaryFile(suffix='.mp3', delete=False) as temp_audio:
            tts = gTTS(text=text, lang=lang, slow=False)
            tts.save(temp_audio.name)
            
            with open(temp_audio.name, 'rb') as audio:
                sent_message = bot.send_voice(message.chat.id, audio)
            
            # –ü—Ä–æ—Å—Ç–æ –¥–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ ID —Å–æ–æ–±—â–µ–Ω–∏–π, –Ω–µ —É–¥–∞–ª—è—è —Å—Ç–∞—Ä—ã–µ
            message_ids = state.get("message_ids", [])
            message_ids.extend([message.message_id, sent_message.message_id])
            state["message_ids"] = message_ids
            user_states[user_id] = state
            
        os.unlink(temp_audio.name)

    except Exception as e:
        logger.error(f"Error playing phrase: {e}")
        sent_message = bot.reply_to(
            message, 
            "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–∏ —Ñ—Ä–∞–∑—ã",
            reply_markup=get_next_keyboard()
        )
        state["message_ids"].append(sent_message.message_id)
     
     
@bot.message_handler(content_types=['voice'])
def handle_voice(message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≥–æ–ª–æ—Å–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    try:
        user_id = message.from_user.id
        state = user_states.get(user_id, {})
        if not state.get("awaiting_answer"):
            return

        # –î–æ–±–∞–≤–ª—è–µ–º ID –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —Å–ø–∏—Å–æ–∫ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
        state["message_ids"].append(message.message_id)

        file_info = bot.get_file(message.voice.file_id)
        file_path = file_info.file_path
        file_url = f"https://api.telegram.org/file/bot{TOKEN}/{file_path}"

        # –°–∫–∞—á–∏–≤–∞–µ–º –∞—É–¥–∏–æ
        with tempfile.NamedTemporaryFile(suffix='.ogg', delete=False) as temp_ogg:
            response = requests.get(file_url)
            temp_ogg.write(response.content)
            temp_ogg_path = temp_ogg.name

        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ WAV
        with tempfile.NamedTemporaryFile(suffix='.wav', delete=False) as temp_wav:
            audio = AudioSegment.from_ogg(temp_ogg_path)
            audio = audio.set_frame_rate(16000).set_channels(1)
            audio.export(temp_wav.name, format="wav")
            temp_wav_path = temp_wav.name

        # –†–∞—Å–ø–æ–∑–Ω–∞–µ–º —Ä–µ—á—å
        r = sr.Recognizer()
        with sr.AudioFile(temp_wav_path) as source:
            audio_data = r.record(source)
            
            # –í—ã–±–∏—Ä–∞–µ–º —è–∑—ã–∫ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–µ—Ä–µ–≤–æ–¥–∞
            language = "it-IT" if state["translation_direction"] == "ru_to_it" else "ru-RU"
            text = r.recognize_google(audio_data, language=language)
            logger.debug(f"Voice recognized ({language}): {text}")

        # –û—á–∏—â–∞–µ–º —Ñ–∞–π–ª—ã
        os.unlink(temp_ogg_path)
        os.unlink(temp_wav_path)

        # –ü–µ—Ä–µ–¥–∞–µ–º –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
        message.text = text
        handle_answer(message)

    except sr.UnknownValueError:
        lang_text = "–∏—Ç–∞–ª—å—è–Ω—Å–∫–æ–º" if state["translation_direction"] == "ru_to_it" else "—Ä—É—Å—Å–∫–æ–º"
        sent_message = bot.reply_to(
            message, 
            f"üé§ –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —Ä–µ—á—å –Ω–∞ {lang_text} —è–∑—ã–∫–µ. "
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≥–æ–≤–æ—Ä–∏—Ç—å —á—ë—Ç—á–µ –∏ –º–µ–¥–ª–µ–Ω–Ω–µ–µ.",
            reply_markup=get_exercise_keyboard()
        )
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ
        state["message_ids"].append(sent_message.message_id)
        
    except sr.RequestError as e:
        sent_message = bot.reply_to(
            message, 
            "üé§ –û—à–∏–±–∫–∞ —Å–µ—Ä–≤–∏—Å–∞ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ—Ç–≤–µ—Ç–∏—Ç—å —Ç–µ–∫—Å—Ç–æ–º.",
            reply_markup=get_exercise_keyboard()
        )
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ
        state["message_ids"].append(sent_message.message_id)
        
    except Exception as e:
        logger.error(f"Error processing voice: {e}")
        sent_message = bot.reply_to(
            message, 
            "üé§ –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è.",
            reply_markup=get_exercise_keyboard()
        )
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ
        state["message_ids"].append(sent_message.message_id)
        

@bot.message_handler(commands=['start'])
@bot.message_handler(func=lambda message: message.text == "‚ôªÔ∏è –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞")  # –£ –≤–∞—Å —Å–µ–π—á–∞—Å üîÑ, –∞ –≤ –∫–Ω–æ–ø–∫–µ ‚ôªÔ∏è
def send_welcome(message):
    user_id = message.from_user.id
    user_data = load_user_data(user_id)
    user_states[user_id] = {
        "translation_direction": "ru_to_it",
        "awaiting_answer": False,
        "message_ids": [],
        "last_question_id": None
    }
    
    welcome_text = (
        "*–ü—Ä–∏–≤–µ—Ç! *\n"
        "–Ø –±–æ—Ç –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è –∏—Ç–∞–ª—å—è–Ω—Å–∫–æ–≥–æ —è–∑—ã–∫–∞.\n\n"
        f"üìö –ê–∫—Ç–∏–≤–Ω—ã—Ö —Å–ª–æ–≤: {len(user_data['active_words'])}\n"
        f"‚úÖ –ò–∑—É—á–µ–Ω–æ —Å–ª–æ–≤: {len(user_data['learned_words'])}\n\n"
        "üîπ *'–ù–∞—á–∞—Ç—å –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–µ'* - –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è —Å–ª–æ–≤\n"
        "üîπ *'–°–º–µ–Ω–∏—Ç—å –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ'* - –≤—ã–±–æ—Ä –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–µ—Ä–µ–≤–æ–¥–∞\n"
        "üîπ *'–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞'* - –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞\n\n"
        "–ù–∞—á–Ω—ë–º? üòä"
    )
    sent_message = bot.reply_to(message, welcome_text, parse_mode='Markdown', reply_markup=get_main_keyboard())
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏–π
    state = user_states.get(user_id, {})
    state["message_ids"] = [sent_message.message_id, message.message_id]
    user_states[user_id] = state


@bot.message_handler(func=lambda message: message.text in ["üéØ –ù–∞—á–∞—Ç—å –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–µ", "/review"])
# @maintenance_aware
def start_review(message):
    user_id = message.from_user.id
    user_data = load_user_data(user_id)
    words_to_review = get_words_for_review(user_data)
    
    if not words_to_review:
        sent_message = bot.reply_to(
    message, 
    "üìù –°–µ–π—á–∞—Å –Ω–µ—Ç —Å–ª–æ–≤ –¥–ª—è –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è.\n–ú—ã –Ω–∞–ø–æ–º–Ω–∏–º –í–∞–º, –∫–æ–≥–¥–∞ –ø–æ–¥–æ–π–¥—ë—Ç –≤—Ä–µ–º—è –ø–æ –≥—Ä–∞—Ñ–∏–∫—É –∏–Ω—Ç–µ—Ä–≤–∞–ª—å–Ω–æ–≥–æ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è.", 
    reply_markup=get_main_keyboard()
)
        user_states[user_id] = {
            "translation_direction": "ru_to_it",
            "awaiting_answer": False,
            "message_ids": [sent_message.message_id, message.message_id],
            "last_question_id": None
        }
        return
    user_data["current_session"] = words_to_review
    user_data["current_word_index"] = 0
    save_user_data(user_id, user_data)
    
    user_states[user_id] = {
        "translation_direction": "ru_to_it",
        "awaiting_answer": True,
        "message_ids": [message.message_id],
        "last_question_id": None
    }
    
    show_current_exercise(message.chat.id, user_id)



def show_current_exercise(chat_id: int, user_id: int):
    logger.debug(f"Showing exercise for user {user_id}")
    
    try:
        state = user_states.get(user_id, {})
        # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        message_ids = state.get("message_ids", [])
        if state.get("last_question_id"):
            message_ids.append(state["last_question_id"])
            
        for msg_id in message_ids:
            try:
                bot.delete_message(chat_id, msg_id)
            except Exception as e:
                logger.debug(f"Could not delete message {msg_id}: {e}")

        user_data = load_user_data(user_id)
        
        if not user_data["current_session"]:
            sent_message = bot.send_message(chat_id, "‚ùå –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π —Å–µ—Å—Å–∏–∏", reply_markup=get_main_keyboard())
            user_states[user_id] = {
                "translation_direction": state.get("translation_direction", "ru_to_it"),
                "awaiting_answer": False,
                "message_ids": [sent_message.message_id],
                "last_question_id": None,
                "current_example": None,
                "retry_message_id": None
            }
            return
        
        current_word = user_data["current_session"][user_data["current_word_index"]]
        word_data = VOCABULARY["–ë—É–¥—É –∏–∑—É—á–∞—Ç—å"].get(current_word["word"])
        example = random.choice(word_data["–ø—Ä–∏–º–µ—Ä—ã"])
        
        translation_direction = state.get("translation_direction", "ru_to_it")
        question = example["—Ä—É—Å—Å–∫–∏–π"] if translation_direction == "ru_to_it" else example["–∏—Ç–∞–ª—å—è–Ω—Å–∫–∏–π"]
        direction_text = "–∏—Ç–∞–ª—å—è–Ω—Å–∫–∏–π" if translation_direction == "ru_to_it" else "—Ä—É—Å—Å–∫–∏–π"
        
        progress_bar = "üü¢" * current_word["correct_answers"] + "‚ö™Ô∏è" * (CORRECT_FOR_LEARNED - current_word["correct_answers"])
        message_text = (
            f"*{current_word['word']} - {current_word['translation']}*\n\n"
            f"–ü–µ—Ä–µ–≤–µ–¥–∏—Ç–µ –Ω–∞ {direction_text}:\n"
            f"*{question}*\n\n"
            f"–ü—Ä–æ–≥—Ä–µ—Å—Å –∏–∑—É—á–µ–Ω–∏—è: {progress_bar}\n"
            f"_–°–ª–æ–≤–æ {user_data['current_word_index'] + 1} –∏–∑ {len(user_data['current_session'])}_"
        )
        
        sent_message = bot.send_message(
            chat_id, 
            message_text, 
            parse_mode='Markdown', 
            reply_markup=get_exercise_keyboard()
        )
        
        user_states[user_id] = {
            "translation_direction": translation_direction,
            "awaiting_answer": True,
            "current_example": example,
            "last_question_id": sent_message.message_id,
            "message_ids": [sent_message.message_id],
            "retry_message_id": None
        }
        
        logger.debug(f"Exercise shown: {current_word['word']}")
        
    except Exception as e:
        logger.error(f"Error showing exercise: {e}")
        sent_message = bot.send_message(
            chat_id,
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è",
            reply_markup=get_main_keyboard()
        )
        user_states[user_id] = {
            "translation_direction": "ru_to_it",
            "awaiting_answer": False,
            "message_ids": [sent_message.message_id],
            "last_question_id": None,
            "current_example": None,
            "retry_message_id": None
        }
        
          
@bot.message_handler(func=lambda message: message.text == "‚è© –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å")
def skip_word(message):
    logger.debug("Skip word requested")
    user_id = message.from_user.id
    user_data = load_user_data(user_id)
    
    if not user_data.get("current_session"):
        return
        
    if user_data["current_word_index"] >= len(user_data["current_session"]) - 1:
        user_data["current_session"] = []
        user_data["current_word_index"] = 0
        save_user_data(user_id, user_data)
        bot.reply_to(message, "–°–µ—Å—Å–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞", reply_markup=get_main_keyboard())
        return
        
    user_data["current_word_index"] += 1
    save_user_data(user_id, user_data)
    
    bot.reply_to(message, "‚è© –°–ª–æ–≤–æ –ø—Ä–æ–ø—É—â–µ–Ω–æ")
    show_current_exercise(message.chat.id, user_id)
    
@bot.message_handler(func=lambda message: message.text == "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
def show_statistics(message):
    user_id = message.from_user.id
    user_data = load_user_data(user_id)
    current_time = get_now()
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Å–ª–æ–≤–∞–º
    active_words = user_data["active_words"]
    new_words = sum(1 for w in active_words if w["correct_answers"] == 0)
    learning_words = sum(1 for w in active_words if 0 < w["correct_answers"] < CORRECT_FOR_LEARNED)
    learned_words = len(user_data["learned_words"])
    
    # –°–ª–æ–≤–∞ –¥–ª—è –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è
    words_to_review = []
    upcoming = []
    for word in active_words:
        review_time = parse_time(word["next_review"])
        if review_time <= current_time:
            words_to_review.append(word)
        else:
            time_diff = review_time - current_time
            hours = int(time_diff.total_seconds() // 3600)
            upcoming.append((word, hours))
    
    stats_text = [
        "üìä *–û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:*\n",
        f"üìö –ê–∫—Ç–∏–≤–Ω—ã–µ —Å–ª–æ–≤–∞: {len(active_words)}",
        f"üÜï –ù–æ–≤—ã–µ —Å–ª–æ–≤–∞ (0 –æ—Ç–≤–µ—Ç–æ–≤): {new_words}",
        f"üìù –í –ø—Ä–æ—Ü–µ—Å—Å–µ (1-7 –æ—Ç–≤–µ—Ç–æ–≤): {learning_words}",
        f"‚úÖ –ò–∑—É—á–µ–Ω–æ (8+ –æ—Ç–≤–µ—Ç–æ–≤): {learned_words}",
        f"\n–í—Å–µ–≥–æ —Å–ª–æ–≤ –≤ —Å–ª–æ–≤–∞—Ä–µ: {len(VOCABULARY['–ë—É–¥—É –∏–∑—É—á–∞—Ç—å'])}\n"
    ]
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–ª–æ–≤–∞—Ö –¥–ª—è –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è
    if words_to_review:
        stats_text.append("\nüîî *–ì–æ—Ç–æ–≤–æ –∫ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—é:*")
        for word in words_to_review:
            stats_text.append(f"‚Ä¢ {word['word']} - {word['translation']}")
    else:
        stats_text.append("\n‚úÖ –ù–µ—Ç —Å–ª–æ–≤ –¥–ª—è –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å")
    
    if upcoming:
        stats_text.append("\n‚è∞ *–ü—Ä–µ–¥—Å—Ç–æ—è—â–∏–µ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è:*")
        upcoming.sort(key=lambda x: x[1])
        for word, hours in upcoming:
            if hours < 24:
                stats_text.append(f"‚Ä¢ {word['word']} - —á–µ—Ä–µ–∑ {hours}—á")
            else:
                days = hours // 24
                remaining_hours = hours % 24
                stats_text.append(f"‚Ä¢ {word['word']} - —á–µ—Ä–µ–∑ {days}–¥ {remaining_hours}—á")
    
    sent_message = bot.reply_to(message, "\n".join(stats_text), 
                               parse_mode='Markdown', 
                               reply_markup=get_main_keyboard())
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è
    state = user_states.get(user_id, {})
    state["message_ids"] = [sent_message.message_id, message.message_id]
    user_states[user_id] = state
    

@bot.message_handler(func=lambda message: message.text == "üîÄ –°–º–µ–Ω–∏—Ç—å –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ")
def switch_translation_direction(message):
    logger.debug("Direction switch requested")
    user_id = message.from_user.id
    state = user_states.get(user_id, {"translation_direction": "ru_to_en"})
    new_direction = "en_to_ru" if state.get("translation_direction") == "ru_to_en" else "ru_to_en"
    
    direction_text = "–∞–Ω–≥–ª–∏–π—Å–∫–∏–π ‚Üí —Ä—É—Å—Å–∫–∏–π" if new_direction == "en_to_ru" else "—Ä—É—Å—Å–∫–∏–π ‚Üí –∞–Ω–≥–ª–∏–π—Å–∫–∏–π"
    sent_message = bot.reply_to(message, f"üîÑ –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–µ—Ä–µ–≤–æ–¥–∞ –∏–∑–º–µ–Ω–µ–Ω–æ –Ω–∞:\n*{direction_text}*", 
                parse_mode='Markdown')
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è
    message_ids = state.get("message_ids", [])
    message_ids.extend([message.message_id, sent_message.message_id])
    
    user_states[user_id] = {
        "translation_direction": new_direction,
        "awaiting_answer": state.get("awaiting_answer", True),
        "current_example": state.get("current_example"),
        "last_question_id": state.get("last_question_id"),
        "message_ids": message_ids  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ ID
    }
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–æ–≤–æ–µ –∑–∞–¥–∞–Ω–∏–µ
    show_current_exercise(message.chat.id, user_id)

@bot.message_handler(func=lambda message: message.text == "‚ÑπÔ∏è –ü–æ–º–æ—â—å")
def show_help(message):
    help_text = [
        "*üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:*\n",
        "üéØ *–ù–∞—á–∞—Ç—å –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–µ* - –∏–∑—É—á–µ–Ω–∏–µ —Å–ª–æ–≤",
        "üîÑ *–°–º–µ–Ω–∏—Ç—å –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ* - –∏–∑–º–µ–Ω–∏—Ç—å –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–µ—Ä–µ–≤–æ–¥–∞",
        "üìä *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞* - –ø—Ä–æ–≥—Ä–µ—Å—Å –æ–±—É—á–µ–Ω–∏—è\n",
        "*–í–æ –≤—Ä–µ–º—è –∑–∞–Ω—è—Ç–∏—è:*",
        "üé§ –í—ã –º–æ–∂–µ—Ç–µ –æ—Ç–≤–µ—á–∞—Ç—å –≥–æ–ª–æ—Å–æ–≤—ã–º–∏ —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏",
        "üí° –ü–æ–¥—Å–∫–∞–∑–∫–∞ - –ø–æ–∫–∞–∑–∞—Ç—å –ø–µ—Ä–≤—ã–µ –±—É–∫–≤—ã",
        "‚è© –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å - –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å —Å–ª–æ–≤–æ",
        "üèÅ –ó–∞–≤–µ—Ä—à–∏—Ç—å –∑–∞–Ω—è—Ç–∏–µ - –∑–∞–∫–æ–Ω—á–∏—Ç—å —Å–µ—Å—Å–∏—é"
    ]
    sent_message = bot.reply_to(message, "\n".join(help_text), 
                               parse_mode='Markdown', 
                               reply_markup=get_main_keyboard())
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏–π
    state = user_states.get(user_id, {})
    state["message_ids"] = [sent_message.message_id, message.message_id]
    user_states[user_id] = state

@bot.message_handler(func=lambda message: message.text == "üí° –ü–æ–¥—Å–∫–∞–∑–∫–∞")
def show_hint(message):
    user_id = message.from_user.id
    state = user_states.get(user_id, {})
    
    if not state.get("awaiting_answer") or not state.get("current_example"):
        return
        
    example = state["current_example"]
    answer = example["–∏—Ç–∞–ª—å—è–Ω—Å–∫–∏–π"] if state["translation_direction"] == "ru_to_it" else example["—Ä—É—Å—Å–∫–∏–π"]
    hint = ' '.join(word[0] + '_' * (len(word)-1) for word in answer.split())
    
    sent_message = bot.reply_to(message, f"üí° –ü–æ–¥—Å–∫–∞–∑–∫–∞:\n{hint}", 
                               reply_markup=get_exercise_keyboard())
    
    # –î–æ–±–∞–≤–ª—è–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏–π –∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º
    message_ids = state.get("message_ids", [])
    message_ids.extend([message.message_id, sent_message.message_id])
    state["message_ids"] = message_ids
    user_states[user_id] = state

@bot.message_handler(func=lambda message: message.text == "üèÅ –ó–∞–≤–µ—Ä—à–∏—Ç—å –∑–∞–Ω—è—Ç–∏–µ")
def end_session(message):
    user_id = message.from_user.id
    user_data = load_user_data(user_id)
    user_data["current_session"] = []
    user_data["current_word_index"] = 0
    save_user_data(user_id, user_data)
    
    sent_message = bot.reply_to(message, "–ó–∞–Ω—è—Ç–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!", 
                               reply_markup=get_main_keyboard())
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏–π
    state = user_states.get(user_id, {})
    state["message_ids"] = [sent_message.message_id, message.message_id]
    user_states[user_id] = state


@bot.message_handler(commands=['status'])
def check_status(message):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ —Å–ª–æ–≤"""
    user_id = message.from_user.id
    try:
        user_data = load_user_data(user_id)
        current_time = get_now()
        
        status_text = ["üìä *–¢–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å:*\n"]
        
        # –†–∞–∑–¥–µ–ª—è–µ–º —Å–ª–æ–≤–∞ –ø–æ –≤—Ä–µ–º–µ–Ω–∏
        ready_now = []
        upcoming = []
        for word in user_data["active_words"]:
            review_time = parse_time(word["next_review"])
            if review_time <= current_time:
                ready_now.append(word)
            else:
                time_diff = review_time - current_time
                hours = int(time_diff.total_seconds() // 3600)
                upcoming.append((word, hours))
        
        # –°–ª–æ–≤–∞ –¥–ª—è –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è —Å–µ–π—á–∞—Å
        if ready_now:
            status_text.append("üîî *–ì–æ—Ç–æ–≤—ã –∫ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—é:*")
            for word in ready_now:
                status_text.append(f"‚Ä¢ {word['word']} - {word['translation']}")
        else:
            status_text.append("‚úÖ –ù–µ—Ç —Å–ª–æ–≤ –¥–ª—è –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å")
        
        # –ü—Ä–µ–¥—Å—Ç–æ—è—â–∏–µ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è
        if upcoming:
            status_text.append("\n‚è∞ *–ü—Ä–µ–¥—Å—Ç–æ—è—â–∏–µ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è:*")
            # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –≤—Ä–µ–º–µ–Ω–∏
            upcoming.sort(key=lambda x: x[1])
            for word, hours in upcoming:
                if hours < 24:
                    status_text.append(f"‚Ä¢ {word['word']} - —á–µ—Ä–µ–∑ {hours}—á")
                else:
                    days = hours // 24
                    remaining_hours = hours % 24
                    status_text.append(f"‚Ä¢ {word['word']} - —á–µ—Ä–µ–∑ {days}–¥ {remaining_hours}—á")
        
        bot.reply_to(message, "\n".join(status_text), parse_mode='Markdown')
        
    except Exception as e:
        logger.error(f"Error checking status: {e}")
        bot.reply_to(message, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å—Ç–∞—Ç—É—Å–∞")
        
@bot.message_handler(func=lambda message: message.text == "‚û°Ô∏è –î–∞–ª–µ–µ")
def next_exercise(message):
    user_id = message.from_user.id
    logger.debug(f"Next exercise requested by user {user_id}")
    
    try:
        # –£–¥–∞–ª—è–µ–º –≤—Å–µ –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        state = user_states.get(user_id, {})
        message_ids = state.get("message_ids", []) + [message.message_id]
        
        for msg_id in message_ids:
            try:
                bot.delete_message(message.chat.id, msg_id)
            except Exception as e:
                logger.debug(f"Could not delete message {msg_id}: {e}")

        user_data = load_user_data(user_id)
        if not user_data.get("current_session"):
            sent_message = bot.send_message(
                message.chat.id,
                "‚ùå –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π —Å–µ—Å—Å–∏–∏. –ù–∞—á–Ω–∏—Ç–µ –Ω–æ–≤–æ–µ –∑–∞–Ω—è—Ç–∏–µ.",
                reply_markup=get_main_keyboard()
            )
            user_states[user_id] = {
                "translation_direction": state.get("translation_direction", "ru_to_it"),
                "awaiting_answer": False,
                "message_ids": [sent_message.message_id],
                "last_question_id": None,
                "current_example": None
            }
            return
            
        current_index = user_data.get("current_word_index", 0)
        if current_index >= len(user_data["current_session"]) - 1:
            user_data["current_session"] = []
            user_data["current_word_index"] = 0
            save_user_data(user_id, user_data)
            
            sent_message = bot.send_message(
                message.chat.id,
                "‚úÖ –í—Å–µ –∑–∞–¥–∞–Ω–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω—ã!\n–°–ª–µ–¥—É—é—â–∏–µ —Å–ª–æ–≤–∞ –±—É–¥—É—Ç –¥–æ—Å—Ç—É–ø–Ω—ã, –∫–æ–≥–¥–∞ –ø–æ–¥–æ–π–¥—ë—Ç –≤—Ä–µ–º—è –∏—Ö –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è.",
                reply_markup=get_main_keyboard()
            )
            user_states[user_id] = {
                "translation_direction": state.get("translation_direction", "ru_to_it"),
                "awaiting_answer": False,
                "message_ids": [sent_message.message_id],
                "last_question_id": None,
                "current_example": None
            }
            return
        
        user_data["current_word_index"] = current_index + 1
        save_user_data(user_id, user_data)
        show_current_exercise(message.chat.id, user_id)
        
    except Exception as e:
        logger.error(f"Error in next_exercise: {e}", exc_info=True)
        sent_message = bot.send_message(
            message.chat.id,
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ.",
            reply_markup=get_main_keyboard()
        )
        user_states[user_id] = {
            "translation_direction": state.get("translation_direction", "ru_to_it"),
            "awaiting_answer": False,
            "message_ids": [sent_message.message_id],
            "last_question_id": None,
            "current_example": None
        }
        
               
@bot.message_handler(commands=['reset'])
def handle_reset(message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /reset"""
    user_id = message.from_user.id
    logger.info(f"User {user_id} requested data reset")
    
    try:
        # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–π —Ñ–∞–π–ª —Å –¥–∞–Ω–Ω—ã–º–∏
        file_path = f'user_data/user_{user_id}.json'
        if os.path.exists(file_path):
            os.remove(file_path)
            logger.info(f"Deleted user data file: {file_path}")
        
        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
        create_initial_user_data(user_id)
        
        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        user_states[user_id] = {
            "translation_direction": "ru_to_it",
            "awaiting_answer": False,
            "current_example": None,
            "last_question_id": None
        }
        
        bot.reply_to(
            message,
            "üîÑ –î–∞–Ω–Ω—ã–µ –ø–æ–ª–Ω–æ—Å—Ç—å—é —Å–±—Ä–æ—à–µ–Ω—ã. –ù–∞—á–∏–Ω–∞–µ–º –æ–±—É—á–µ–Ω–∏–µ —Å–Ω–∞—á–∞–ª–∞!",
            reply_markup=get_main_keyboard()
        )
    except Exception as e:
        logger.error(f"Error in handle_reset: {e}")
        bot.reply_to(
            message,
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–±—Ä–æ—Å–µ –¥–∞–Ω–Ω—ã—Ö",
            reply_markup=get_main_keyboard()
        )
def highlight_differences(user_answer: str, correct_answer: str) -> str:
    """–ü–æ–¥—Å–≤–µ—Ç–∫–∞ —Ä–∞–∑–ª–∏—á–∏–π –º–µ–∂–¥—É –æ—Ç–≤–µ—Ç–∞–º–∏"""
    user_words = user_answer.lower().split()
    correct_words = correct_answer.lower().split()
    
    result = []
    for i in range(max(len(user_words), len(correct_words))):
        # –ï—Å–ª–∏ —Å–ª–æ–≤–æ –µ—Å—Ç—å –≤ –æ–±–æ–∏—Ö –æ—Ç–≤–µ—Ç–∞—Ö
        if i < len(user_words) and i < len(correct_words):
            if user_words[i] != correct_words[i]:
                result.append(f"*{user_words[i]}* ‚Üí _{correct_words[i]}_")
            else:
                result.append(user_words[i])
        # –ï—Å–ª–∏ –≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–º –æ—Ç–≤–µ—Ç–µ –±–æ–ª—å—à–µ —Å–ª–æ–≤
        elif i < len(user_words):
            result.append(f"*{user_words[i]}* ‚Üí _[–ª–∏—à–Ω–µ–µ]_")
        # –ï—Å–ª–∏ –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –æ—Ç–≤–µ—Ç–µ –±–æ–ª—å—à–µ —Å–ª–æ–≤
        else:
            result.append(f"*[–ø—Ä–æ–ø—É—â–µ–Ω–æ]* ‚Üí _{correct_words[i]}_")
    
    return ' '.join(result)

@bot.message_handler(func=lambda message: message.text == "üîÑ –ü–æ–≤—Ç–æ—Ä–∏—Ç—å")
def retry_answer(message):
    """–ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞"""
    user_id = message.from_user.id
    logger.debug(f"User {user_id} retrying answer")
    
    try:
        state = user_states.get(user_id, {})
        
        # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–æ–π "–ü–æ–≤—Ç–æ—Ä–∏—Ç—å"
        if message.message_id:
            try:
                bot.delete_message(message.chat.id, message.message_id)
            except Exception as e:
                logger.debug(f"Could not delete retry button message: {e}")
                
        # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –æ—à–∏–±–∫–æ–π
        if state.get("retry_message_id"):
            try:
                bot.delete_message(message.chat.id, state["retry_message_id"])
            except Exception as e:
                logger.debug(f"Could not delete retry message: {e}")
        
        state["awaiting_answer"] = True
        state["retry_message_id"] = None
        user_states[user_id] = state
        
        show_current_exercise(message.chat.id, user_id)
    except Exception as e:
        logger.error(f"Error in retry: {e}")
        sent_message = bot.reply_to(
            message,
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ.",
            reply_markup=get_main_keyboard()
        )
        user_states[user_id] = {
            "translation_direction": "ru_to_it",
            "awaiting_answer": False,
            "message_ids": [sent_message.message_id],
            "last_question_id": None,
            "retry_message_id": None
        }
@bot.message_handler(func=lambda message: True)
def handle_answer(message):
    user_id = message.from_user.id
    state = user_states.get(user_id, {})
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥–æ–π —Å–º–µ–Ω—ã –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è
    if message.text == "üîÄ –°–º–µ–Ω–∏—Ç—å –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ":
        switch_translation_direction(message)
        return
        
    if not state.get("awaiting_answer"):
        return

    try:
        # –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ ID —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
        message_ids = state.get("message_ids", []) + [message.message_id]
        if state.get("last_question_id"):
            message_ids.append(state["last_question_id"])

        # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        for msg_id in message_ids:
            try:
                bot.delete_message(message.chat.id, msg_id)
            except Exception as e:
                logger.debug(f"Could not delete message {msg_id}: {e}")

        # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–æ–π "–ü–æ–≤—Ç–æ—Ä–∏—Ç—å" –µ—Å–ª–∏ –æ–Ω–æ –µ—Å—Ç—å
        if state.get("retry_message_id"):
            try:
                bot.delete_message(message.chat.id, state["retry_message_id"])
            except Exception as e:
                logger.debug(f"Could not delete retry message: {e}")

        # –ó–∞–≥—Ä—É–∂–∞–µ–º –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º –¥–∞–Ω–Ω—ã–µ
        user_data = load_user_data(user_id)
        logger.debug(f"Active words before update: {[w['word'] for w in user_data['active_words']]}")
        
        if not user_data.get("current_session"):
            logger.debug("No current session found")
            return

        current_word = user_data["current_session"][user_data["current_word_index"]]
        example = state.get("current_example")
        if not example:
            logger.error(f"No current example found for user {user_id}")
            return

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç
        if state["translation_direction"] == "ru_to_it":
            correct_answer = example["–∏—Ç–∞–ª—å—è–Ω—Å–∫–∏–π"]
            alternatives = example.get("–∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤—ã_–∏—Ç", [])
        else:
            correct_answer = example["—Ä—É—Å—Å–∫–∏–π"]
            alternatives = example.get("–∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤—ã_—Ä—É—Å", [])

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç–≤–µ—Ç
        is_correct = check_answer(message.text, correct_answer, alternatives)
        logger.debug(f"Checking answer '{message.text}' for word '{current_word['word']}': {is_correct}")

        # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å —Å–ª–æ–≤–∞
        current_word_found = False
        for i, word in enumerate(user_data["active_words"]):
            if word["word"] == current_word["word"]:
                current_word_found = True
                previous_correct = word["correct_answers"]
                updated_word = update_word_progress(word, is_correct)
                
                if is_correct and previous_correct < CORRECT_FOR_NEW_WORD and updated_word["correct_answers"] >= CORRECT_FOR_NEW_WORD:
                    if user_data["remaining_words"]:
                        new_word = random.choice(user_data["remaining_words"])
                        user_data["remaining_words"].remove(new_word)
                        word_data = VOCABULARY["–ë—É–¥—É –∏–∑—É—á–∞—Ç—å"][new_word]
                        new_word_data = create_word_data(new_word, word_data["–ø–µ—Ä–µ–≤–æ–¥"])
                        user_data["active_words"].append(new_word_data)
                        logger.info(f"Added new word '{new_word}' after '{word['word']}' reached {CORRECT_FOR_NEW_WORD} correct answers")

                if updated_word["correct_answers"] >= CORRECT_FOR_LEARNED:
                    logger.info(f"Word '{updated_word['word']}' learned, moving to learned words")
                    user_data["learned_words"].append(updated_word)
                    user_data["active_words"].pop(i)
                    user_data["current_session"] = [w for w in user_data["current_session"] 
                                                  if w["word"] != updated_word["word"]]
                else:
                    user_data["active_words"][i] = updated_word
                    current_word.update(updated_word)
                break

        if not current_word_found:
            logger.error(f"Word '{current_word['word']}' not found in active words")
            return

        save_user_data(user_id, user_data)

        progress_bar = "üü¢" * updated_word["correct_answers"] + "‚ö™Ô∏è" * (CORRECT_FOR_LEARNED - updated_word["correct_answers"])
        
        if is_correct:
            response = [
                "‚úÖ *–ü—Ä–∞–≤–∏–ª—å–Ω–æ!*\n",
                f"–í–∞—à –æ—Ç–≤–µ—Ç: _{message.text}_",
                f"–ü—Ä–æ–≥—Ä–µ—Å—Å: {progress_bar}"
            ]
            
            if previous_correct < CORRECT_FOR_NEW_WORD and updated_word["correct_answers"] >= CORRECT_FOR_NEW_WORD:
                response.append("\nüéâ –í—ã –¥–æ—Å—Ç–∏–≥–ª–∏ 3 –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤!")
                if user_data["remaining_words"]:
                    response.append("–î–æ–±–∞–≤–ª–µ–Ω–æ –Ω–æ–≤–æ–µ —Å–ª–æ–≤–æ –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è!")
            
            sent_message = bot.send_message(
                message.chat.id,
                "\n".join(response),
                parse_mode='Markdown',
                reply_markup=get_next_keyboard()
            )
            
            user_states[user_id] = {
                "translation_direction": state["translation_direction"],
                "awaiting_answer": False,
                # "message_ids": [sent_message.message_id],
                "message_ids": [],
                "last_question_id": None,
                "current_example": example  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–∏–º–µ—Ä –¥–ª—è –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏—è
            }
        else:
            response = [
                "‚ùå *–û—à–∏–±–∫–∞!*\n",
                "–í–∞—à –æ—Ç–≤–µ—Ç —Å –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è–º–∏:",
                f"{highlight_differences(message.text, correct_answer)}\n",
                f"–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: *{correct_answer}*",
                f"–ü—Ä–æ–≥—Ä–µ—Å—Å: {progress_bar}"
            ]
            sent_message = bot.send_message(
                message.chat.id,
                "\n".join(response),
                parse_mode='Markdown',
                reply_markup=get_retry_keyboard()
            )
            
            user_states[user_id] = {
                "translation_direction": state["translation_direction"],
                "awaiting_answer": True,
                "current_example": example,
                "message_ids": [sent_message.message_id],
                "last_question_id": state.get("last_question_id"),
                "retry_message_id": sent_message.message_id
            }

    except Exception as e:
        logger.error(f"Error in handle_answer: {e}", exc_info=True)
        sent_message = bot.reply_to(
            message,
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ.",
            reply_markup=get_main_keyboard()
        )
        user_states[user_id] = {
            "translation_direction": "ru_to_it",
            "awaiting_answer": False,
            "message_ids": [sent_message.message_id],
            "last_question_id": None,
            "current_example": None,
            "retry_message_id": None
        }
        
 
def check_notifications():
    while True:
        try:
            current_time = get_now()
            for filename in os.listdir('user_data'):
                try:
                    user_id = int(filename.split('_')[1].split('.')[0])
                    user_data = load_user_data(user_id)
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è
                    last_activity = parse_time(user_data.get("last_update", ""))
                    inactive_time = (current_time - last_activity).total_seconds() / 3600  # –≤ —á–∞—Å–∞—Ö
                    
                    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –±—ã–ª –∞–∫—Ç–∏–≤–µ–Ω –≤ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 2 —á–∞—Å–∞, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ
                    if inactive_time < 2:
                        continue
                    
                    words_to_review = [
                        word for word in user_data["active_words"]
                        if parse_time(word["next_review"]) <= current_time
                    ]
                    
                    if words_to_review:
                        # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
                        state = user_states.get(user_id, {})
                        notification_ids = state.get("notification_ids", [])
                        for msg_id in notification_ids:
                            try:
                                bot.delete_message(user_id, msg_id)
                            except:
                                pass
                                
                        text = (
                            "üîî –ü–æ—Ä–∞ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å —Å–ª–æ–≤–∞!\n\n"
                            f"–ì–æ—Ç–æ–≤–æ –∫ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—é: {len(words_to_review)} —Å–ª–æ–≤\n\n"
                        )
                        text += "\n".join(f"‚Ä¢ {w['word']} - {w['translation']}" 
                                        for w in words_to_review[:3])
                        sent_message = bot.send_message(user_id, text, reply_markup=get_main_keyboard())
                        
                        # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –Ω–æ–≤–æ–≥–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
                        state["notification_ids"] = [sent_message.message_id]
                        user_states[user_id] = state
                        
                except Exception as e:
                    logger.error(f"Notification error for user {filename}: {e}")
        except Exception as e:
            logger.error(f"Notification check error: {e}")
        time.sleep(600)
       
def send_initial_message():
    """–û—Ç–ø—Ä–∞–≤–∫–∞ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ"""
    try:
        if os.path.exists('user_data'):
            for filename in os.listdir('user_data'):
                try:
                    user_id = int(filename.split('_')[1].split('.')[0])
                    bot.send_message(
                        user_id,
                        "üü¢ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!\n–ù–∞–∂–º–∏—Ç–µ /start –¥–ª—è –Ω–∞—á–∞–ª–∞.",
                        reply_markup=get_main_keyboard()
                    )
                    logger.info(f"Sent startup message to user {user_id}")
                except Exception as e:
                    logger.error(f"Failed to send startup message: {e}")
    except Exception as e:
        logger.error(f"Error in send_initial_message: {e}")

def run_bot():
    while True:
        try:
            logger.info("=== Starting Bot ===")
            logger.info(f"Vocabulary size: {len(VOCABULARY['–ë—É–¥—É –∏–∑—É—á–∞—Ç—å'])} words")
            
            bot.delete_webhook()
            bot.get_updates(offset=-1)
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
            notifications = threading.Thread(target=check_notifications, daemon=True)
            notifications.start()
            logger.info("Notification thread started")
            
            bot.infinity_polling(
                timeout=10, 
                long_polling_timeout=20,
                interval=1,
                allowed_updates=None
            )
        except requests.exceptions.ReadTimeout as e:
            logger.warning(f"Timeout error: {e}")
            time.sleep(5)
        except Exception as e:
            logger.error(f"Unexpected error: {e}")
            time.sleep(10)

if __name__ == "__main__":
    try:
        import signal
        def signal_handler(sig, frame):
            logger.info("Received stop signal, shutting down...")
            os._exit(0)
        signal.signal(signal.SIGINT, signal_handler)
        
        run_bot()
    except KeyboardInterrupt:
        logger.info("Bot stopped by user")
    except Exception as e:
        logger.error(f"Fatal error: {e}")
        raise
       
   
   
   