import telebot
from telebot import types
import json
import datetime
import time
import random
import os
import logging
import sys
from typing import Dict, Optional, List
from vocabulary import VOCABULARY

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')

console_handler = logging.StreamHandler(sys.stdout)
console_handler.setFormatter(formatter)

file_handler = logging.FileHandler('bot_log.txt', encoding='utf-8')
file_handler.setFormatter(formatter)

logger = logging.getLogger('ItalianBot')
logger.setLevel(logging.DEBUG)
logger.addHandler(console_handler)
logger.addHandler(file_handler)

telebot_logger = logging.getLogger('TeleBot')
telebot_logger.setLevel(logging.WARNING)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
TOKEN = "7312843542:AAHVDxaHYSveOpitmkWagTFoMVNzYF4_tMU"
bot = telebot.TeleBot(TOKEN)

# –ì–ª–æ–±–∞–ª—å–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ —Å–æ—Å—Ç–æ—è–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_states = {}

class WordStatus:
    NEW = "new"           # –ù–æ–≤–æ–µ —Å–ª–æ–≤–æ (0 –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤)
    LEARNING = "learning" # –í –ø—Ä–æ—Ü–µ—Å—Å–µ –∏–∑—É—á–µ–Ω–∏—è (1-2 –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–∞)
    LEARNED = "learned"   # –ò–∑—É—á–µ–Ω–æ (3+ –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–∞)

def normalize_text(text: str) -> str:
    """–ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è —Ç–µ–∫—Å—Ç–∞ –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è"""
    # –ó–∞–º–µ–Ω–∞ –∏—Ç–∞–ª—å—è–Ω—Å–∫–∏—Ö –±—É–∫–≤ –Ω–∞ –±–∞–∑–æ–≤—ã–µ
    # –ü—Ä–∏ —Å—Ä–∞–≤–Ω–µ–Ω–∏–∏ √®/e/√à/E —Å—á–∏—Ç–∞—é—Ç—Å—è –æ–¥–∏–Ω–∞–∫–æ–≤—ã–º–∏
    replacements = {
        '√®': 'e', '√à': 'e', 'E': 'e', '√©': 'e', '√â': 'e',
        '√†': 'a', '√Ä': 'a',
        '√¨': 'i', '√å': 'i',
        '√≤': 'o', '√í': 'o',
        '√π': 'u', '√ô': 'u'
    }
    
    # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º —Ç–µ–∫—Å—Ç
    text = text.strip().lower()  # –£–±–∏—Ä–∞–µ–º –ø—Ä–æ–±–µ–ª—ã –∏ –ø–µ—Ä–µ–≤–æ–¥–∏–º –≤ –Ω–∏–∂–Ω–∏–π —Ä–µ–≥–∏—Å—Ç—Ä
    
    # –ó–∞–º–µ–Ω—è–µ–º –∏—Ç–∞–ª—å—è–Ω—Å–∫–∏–µ –±—É–∫–≤—ã
    for old, new in replacements.items():
        text = text.replace(old, new)
    
    return text

def check_answer(user_answer: str, correct_answers: List[str]) -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç–∏ –æ—Ç–≤–µ—Ç–∞"""
    # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_normalized = normalize_text(user_answer)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–æ—Ç–∏–≤ –≤—Å–µ—Ö –≤–æ–∑–º–æ–∂–Ω—ã—Ö –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤
    for answer in correct_answers:
        if user_normalized == normalize_text(answer):
            return True
            
    return False

def get_main_keyboard():
    """–°–æ–∑–¥–∞–Ω–∏–µ –æ—Å–Ω–æ–≤–Ω–æ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã"""
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.row(types.KeyboardButton("üéØ –ù–∞—á–∞—Ç—å –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–µ"))
    markup.row(
        types.KeyboardButton("üîÑ –°–º–µ–Ω–∏—Ç—å –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–µ—Ä–µ–≤–æ–¥–∞"),
        types.KeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
    )
    markup.row(types.KeyboardButton("‚ÑπÔ∏è –ü–æ–º–æ—â—å"))
    return markup

def get_exercise_keyboard():
    """–°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è"""
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.row(types.KeyboardButton("üí° –ü–æ–¥—Å–∫–∞–∑–∫–∞"))
    markup.row(
        types.KeyboardButton("üîÑ –°–º–µ–Ω–∏—Ç—å –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ"),
        types.KeyboardButton("‚è© –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å")
    )
    markup.row(types.KeyboardButton("üèÅ –ó–∞–≤–µ—Ä—à–∏—Ç—å –∑–∞–Ω—è—Ç–∏–µ"))
    return markup

def get_next_keyboard():
    """–°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —Å–ª–æ–≤—É"""
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.row(types.KeyboardButton("‚û°Ô∏è –î–∞–ª–µ–µ"))
    markup.row(types.KeyboardButton("üèÅ –ó–∞–≤–µ—Ä—à–∏—Ç—å –∑–∞–Ω—è—Ç–∏–µ"))
    return markup

def get_retry_keyboard():
    """–°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–∏"""
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.row(types.KeyboardButton("üîÑ –ü–æ–≤—Ç–æ—Ä–∏—Ç—å"))
    markup.row(
        types.KeyboardButton("üí° –ü–æ–¥—Å–∫–∞–∑–∫–∞"),
        types.KeyboardButton("‚û°Ô∏è –î–∞–ª–µ–µ")
    )
    markup.row(types.KeyboardButton("üèÅ –ó–∞–≤–µ—Ä—à–∏—Ç—å –∑–∞–Ω—è—Ç–∏–µ"))
    return markup
def load_user_data(user_id: int) -> dict:
    """–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    logger.debug(f"Loading data for user {user_id}")
    if not os.path.exists('user_data'):
        os.makedirs('user_data')
        
    file_path = f'user_data/user_{user_id}.json'
    if os.path.exists(file_path):
        try:
            with open(file_path, 'r', encoding='utf-8') as f:
                data = json.load(f)
                logger.debug(f"Successfully loaded data for user {user_id}")
                return data
        except Exception as e:
            logger.error(f"Error loading user data: {e}")
            
    logger.debug(f"Creating initial data for user {user_id}")
    return create_initial_user_data(user_id)

def save_user_data(user_id: int, data: dict):
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    logger.debug(f"Saving data for user {user_id}")
    if not os.path.exists('user_data'):
        os.makedirs('user_data')
        
    file_path = f'user_data/user_{user_id}.json'
    try:
        with open(file_path, 'w', encoding='utf-8') as f:
            json.dump(data, f, ensure_ascii=False, indent=2)
        logger.debug(f"Successfully saved data for user {user_id}")
    except Exception as e:
        logger.error(f"Error saving user data: {e}")

def create_initial_user_data(user_id: int) -> dict:
    """–°–æ–∑–¥–∞–Ω–∏–µ –Ω–∞—á–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    logger.info(f"Creating initial data for user {user_id}")
    
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Å–ª–æ–≤–∞ –∏ –ø–µ—Ä–µ–º–µ—à–∏–≤–∞–µ–º –∏—Ö
    all_words = list(VOCABULARY["–ë—É–¥—É –∏–∑—É—á–∞—Ç—å"].keys())
    random.shuffle(all_words)
    
    # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–µ 20 —Å–ª–æ–≤ –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è
    initial_words = all_words[:20]
    remaining_words = all_words[20:]
    
    current_time = datetime.datetime.now().isoformat()
    
    # –°–æ–∑–¥–∞–µ–º —Å–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–ª–æ–≤
    active_words = []
    for word in initial_words:
        active_words.append({
            "word": word,
            "translation": VOCABULARY["–ë—É–¥—É –∏–∑—É—á–∞—Ç—å"][word]["–ø–µ—Ä–µ–≤–æ–¥"],
            "status": WordStatus.NEW,
            "correct_answers": 0,
            "next_review": current_time,
            "interval": 4
        })
    
    data = {
        "user_id": user_id,
        "active_words": active_words,       # –°–ª–æ–≤–∞ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –∏–∑—É—á–µ–Ω–∏—è
        "learned_words": [],                # –ò–∑—É—á–µ–Ω–Ω—ã–µ —Å–ª–æ–≤–∞ (3+ –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–∞)
        "remaining_words": remaining_words, # –°–ª–æ–≤–∞, –∫–æ—Ç–æ—Ä—ã–µ –µ—â–µ –Ω–µ –Ω–∞—á–∞–ª–∏ —É—á–∏—Ç—å
        "current_session": [],              # –¢–µ–∫—É—â–∞—è —Å–µ—Å—Å–∏—è –∏–∑—É—á–µ–Ω–∏—è
        "current_word_index": 0,            # –ò–Ω–¥–µ–∫—Å —Ç–µ–∫—É—â–µ–≥–æ —Å–ª–æ–≤–∞ –≤ —Å–µ—Å—Å–∏–∏
        "last_update": current_time         # –í—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
    }
    
    save_user_data(user_id, data)
    logger.info(f"Initial data created for user {user_id} with {len(initial_words)} words")
    return data

def calculate_next_interval(correct_answers: int) -> int:
    """–†–∞—Å—á–µ—Ç —Å–ª–µ–¥—É—é—â–µ–≥–æ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è"""
    if correct_answers >= 3:
        return 24  # 24 —á–∞—Å–∞ –¥–ª—è –∏–∑—É—á–µ–Ω–Ω—ã—Ö —Å–ª–æ–≤
    elif correct_answers == 2:
        return 8   # 8 —á–∞—Å–æ–≤
    elif correct_answers == 1:
        return 4   # 4 —á–∞—Å–∞
    else:
        return 1   # 1 —á–∞—Å –¥–ª—è –Ω–æ–≤—ã—Ö —Å–ª–æ–≤

def get_words_for_review(user_data: dict) -> List[dict]:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ª–æ–≤ –¥–ª—è –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è"""
    current_time = datetime.datetime.now()
    words_to_review = []
    
    # –ï—Å–ª–∏ –≤—Å–µ —Å–ª–æ–≤–∞ –Ω–æ–≤—ã–µ (–ø–µ—Ä–≤—ã–π –∑–∞–ø—É—Å–∫), –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ —Å–ª–æ–≤–∞
    if all(word.get("status") == WordStatus.NEW for word in user_data["active_words"]):
        return user_data["active_words"]
    
    # –ò–Ω–∞—á–µ –ø—Ä–æ–≤–µ—Ä—è–µ–º –≤—Ä–µ–º—è —Å–ª–µ–¥—É—é—â–µ–≥–æ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è
    for word in user_data["active_words"]:
        next_review = datetime.datetime.fromisoformat(word["next_review"])
        if next_review <= current_time:
            words_to_review.append(word)
            
    logger.debug(f"Found {len(words_to_review)} words for review")
    return words_to_review

# –¢–∞–∫–∂–µ –Ω—É–∂–Ω–æ –∏–∑–º–µ–Ω–∏—Ç—å create_initial_user_data:
def create_initial_user_data(user_id: int) -> dict:
    """–°–æ–∑–¥–∞–Ω–∏–µ –Ω–∞—á–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    logger.info(f"Creating initial data for user {user_id}")
    
    all_words = list(VOCABULARY["–ë—É–¥—É –∏–∑—É—á–∞—Ç—å"].keys())
    random.shuffle(all_words)
    initial_words = all_words[:20]
    remaining_words = all_words[20:]
    
    current_time = datetime.datetime.now().isoformat()
    active_words = []
    
    # –°–æ–∑–¥–∞–µ–º —Å–ª–æ–≤–∞ –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è
    for word in initial_words:
        active_words.append({
            "word": word,
            "translation": VOCABULARY["–ë—É–¥—É –∏–∑—É—á–∞—Ç—å"][word]["–ø–µ—Ä–µ–≤–æ–¥"],
            "status": WordStatus.NEW,  # –í—Å–µ —Å–ª–æ–≤–∞ –Ω–∞—á–∏–Ω–∞—é—Ç—Å—è —Å–æ —Å—Ç–∞—Ç—É—Å–∞ NEW
            "correct_answers": 0,
            "next_review": current_time,  # –í—Ä–µ–º—è —Å–ª–µ–¥—É—é—â–µ–≥–æ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è - —Å–µ–π—á–∞—Å
            "interval": 4
        })
    
    data = {
        "user_id": user_id,
        "active_words": active_words,
        "learned_words": [],
        "remaining_words": remaining_words,
        "current_session": [],
        "current_word_index": 0,
        "last_update": current_time
    }
    
    save_user_data(user_id, data)
    logger.info(f"Initial data created for user {user_id} with {len(initial_words)} words")
    return data
    

def update_word_status(word: dict) -> str:
    """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ —Å–ª–æ–≤–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤"""
    correct_answers = word.get("correct_answers", 0)
    if correct_answers >= 3:
        return WordStatus.LEARNED
    elif correct_answers > 0:
        return WordStatus.LEARNING
    else:
        return WordStatus.NEW

def show_current_exercise(chat_id: int, user_id: int):
    """–ü–æ–∫–∞–∑ —Ç–µ–∫—É—â–µ–≥–æ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è"""
    logger.debug(f"Showing exercise for user {user_id}")
    
    user_data = load_user_data(user_id)
    if not user_data["current_session"]:
        logger.error(f"No current session for user {user_id}")
        return
        
    current_word = user_data["current_session"][user_data["current_word_index"]]
    word_data = VOCABULARY["–ë—É–¥—É –∏–∑—É—á–∞—Ç—å"][current_word["word"]]
    example = random.choice(word_data["–ø—Ä–∏–º–µ—Ä—ã"])
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–µ—Ä–µ–≤–æ–¥–∞
    state = user_states.get(user_id, {})
    translation_direction = state.get("translation_direction", "ru_to_it")
    
    if translation_direction == "ru_to_it":
        question = example["—Ä—É—Å—Å–∫–∏–π"]
        direction_text = "–∏—Ç–∞–ª—å—è–Ω—Å–∫–∏–π"
    else:
        question = example["–∏—Ç–∞–ª—å—è–Ω—Å–∫–∏–π"]
        direction_text = "—Ä—É—Å—Å–∫–∏–π"
    
    # –°–æ–∑–¥–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    progress_bar = "üü¢" * current_word.get("correct_answers", 0) + "‚ö™Ô∏è" * (3 - current_word.get("correct_answers", 0))
    message_text = (
        f"*{current_word['word']} - {current_word['translation']}*\n\n"
        f"–ü–µ—Ä–µ–≤–µ–¥–∏—Ç–µ –Ω–∞ {direction_text}:\n"
        f"*{question}*\n\n"
        # "‚ùóÔ∏è –£—á–∏—Ç—ã–≤–∞–π—Ç–µ –∑–∞–≥–ª–∞–≤–Ω—ã–µ –±—É–∫–≤—ã –∏ –∑–Ω–∞–∫–∏ –ø—Ä–µ–ø–∏–Ω–∞–Ω–∏—è\n\n"
        f"–ü—Ä–æ–≥—Ä–µ—Å—Å –∏–∑—É—á–µ–Ω–∏—è: {progress_bar}\n"
        f"_–°–ª–æ–≤–æ {user_data['current_word_index'] + 1} –∏–∑ {len(user_data['current_session'])}_"
    )
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    user_states[user_id] = {
        "translation_direction": translation_direction,
        "awaiting_answer": True,
        "current_example": example
    }
    
    bot.send_message(
        chat_id,
        message_text,
        parse_mode='Markdown',
        reply_markup=get_exercise_keyboard()
    )
    
    logger.debug(f"Exercise shown for user {user_id}, word: {current_word['word']}")
@bot.message_handler(commands=['start'])
def send_welcome(message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start"""
    user_id = message.from_user.id
    logger.info(f"User {user_id} started the bot")
    
    user_data = load_user_data(user_id)
    
    user_states[user_id] = {
        "translation_direction": "ru_to_it",
        "awaiting_answer": False
    }
    
    active_words = len(user_data["active_words"])
    learned_words = len(user_data["learned_words"])
    
    welcome_text = (
        "*–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è –∏—Ç–∞–ª—å—è–Ω—Å–∫–æ–≥–æ —è–∑—ã–∫–∞.*\n\n"
        f"üìö –ê–∫—Ç–∏–≤–Ω—ã—Ö —Å–ª–æ–≤: {active_words}\n"
        f"‚úÖ –ò–∑—É—á–µ–Ω–æ —Å–ª–æ–≤: {learned_words}\n\n"
        "üîπ *'–ù–∞—á–∞—Ç—å –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–µ'* - –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è —Å–ª–æ–≤\n"
        "üîπ *'–°–º–µ–Ω–∏—Ç—å –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ'* - –≤—ã–±–æ—Ä –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–µ—Ä–µ–≤–æ–¥–∞\n"
        "üîπ *'–ü–æ–¥—Å–∫–∞–∑–∫–∞'* - –µ—Å–ª–∏ –Ω—É–∂–Ω–∞ –ø–æ–º–æ—â—å\n"
        "üîπ *'–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞'* - –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞\n"
        "üîπ *'–ó–∞–≤–µ—Ä—à–∏—Ç—å –∑–∞–Ω—è—Ç–∏–µ'* - –¥–ª—è –≤—ã—Ö–æ–¥–∞ –∏–∑ —Å–µ—Å—Å–∏–∏\n\n"
        "–ù–∞—á–Ω—ë–º? üòä"
    )
    
    bot.reply_to(
        message,
        welcome_text,
        parse_mode='Markdown',
        reply_markup=get_main_keyboard()
    )

@bot.message_handler(func=lambda message: message.text in ["üéØ –ù–∞—á–∞—Ç—å –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–µ", "/review"])
def start_review(message):
    """–ù–∞—á–∞–ª–æ —Å–µ—Å—Å–∏–∏ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è"""
    user_id = message.from_user.id
    logger.info(f"User {user_id} started review session")
    
    user_data = load_user_data(user_id)
    words_to_review = get_words_for_review(user_data)
    
    if not words_to_review:
        bot.reply_to(
            message,
            "üïí –°–µ–π—á–∞—Å –Ω–µ—Ç —Å–ª–æ–≤ –¥–ª—è –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è!",
            reply_markup=get_main_keyboard()
        )
        return
    
    # –ù–∞—á–∏–Ω–∞–µ–º –Ω–æ–≤—É—é —Å–µ—Å—Å–∏—é
    random.shuffle(words_to_review)  # –ü–µ—Ä–µ–º–µ—à–∏–≤–∞–µ–º —Å–ª–æ–≤–∞
    user_data["current_session"] = words_to_review
    user_data["current_word_index"] = 0
    save_user_data(user_id, user_data)
    
    show_current_exercise(message.chat.id, user_id)

@bot.message_handler(func=lambda message: message.text == "‚û°Ô∏è –î–∞–ª–µ–µ")
def next_exercise(message):
    """–ü–µ—Ä–µ—Ö–æ–¥ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—é"""
    user_id = message.from_user.id
    logger.info(f"User {user_id} pressed Next button")
    
    user_data = load_user_data(user_id)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –µ—â–µ —Å–ª–æ–≤–∞ –≤ —Ç–µ–∫—É—â–µ–π —Å–µ—Å—Å–∏–∏
    if not user_data["current_session"] or user_data["current_word_index"] >= len(user_data["current_session"]) - 1:
        words_to_review = get_words_for_review(user_data)
        if not words_to_review:
            bot.reply_to(
                message,
                "–°–µ—Å—Å–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–µ—Ç —Å–ª–æ–≤ –¥–ª—è –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è.",
                reply_markup=get_main_keyboard()
            )
            return
        # –ù–∞—á–∏–Ω–∞–µ–º –Ω–æ–≤—É—é —Å–µ—Å—Å–∏—é
        random.shuffle(words_to_review)
        user_data["current_session"] = words_to_review
        user_data["current_word_index"] = 0
    else:
        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —Å–ª–æ–≤—É
        user_data["current_word_index"] += 1
    
    save_user_data(user_id, user_data)
    show_current_exercise(message.chat.id, user_id)

@bot.message_handler(func=lambda message: message.text == "üîÑ –ü–æ–≤—Ç–æ—Ä–∏—Ç—å")
def retry_answer(message):
    """–ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞"""
    user_id = message.from_user.id
    logger.info(f"User {user_id} retrying answer")
    show_current_exercise(message.chat.id, user_id)

@bot.message_handler(func=lambda message: message.text == "üí° –ü–æ–¥—Å–∫–∞–∑–∫–∞")
def show_hint(message):
    """–ü–æ–∫–∞–∑ –ø–æ–¥—Å–∫–∞–∑–∫–∏"""
    user_id = message.from_user.id
    logger.info(f"User {user_id} requested hint")
    
    state = user_states.get(user_id, {})
    if not state.get("awaiting_answer"):
        bot.reply_to(message, "‚ùå –°–Ω–∞—á–∞–ª–∞ –Ω–∞—á–Ω–∏—Ç–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ")
        return
    
    example = state.get("current_example")
    if not example:
        bot.reply_to(message, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ù–∞—á–Ω–∏—Ç–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ –∑–∞–Ω–æ–≤–æ")
        return
    
    if state["translation_direction"] == "ru_to_it":
        answer = example["–∏—Ç–∞–ª—å—è–Ω—Å–∫–∏–π"]
    else:
        answer = example["—Ä—É—Å—Å–∫–∏–π"]
    
    # –°–æ–∑–¥–∞–µ–º –ø–æ–¥—Å–∫–∞–∑–∫—É (–ø–µ—Ä–≤—ã–µ –±—É–∫–≤—ã —Å–ª–æ–≤)
    words = answer.split()
    hint_words = []
    for word in words:
        if len(word) > 0:
            hint_words.append(word[0] + '_' * (len(word)-1))
    hint = ' '.join(hint_words)
    
    # –í –ø–æ–¥—Å–∫–∞–∑–∫–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ –±—É–∫–≤—ã —Å —É—á–µ—Ç–æ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞
    bot.reply_to(
        message,
        f"üí° –ü–æ–¥—Å–∫–∞–∑–∫–∞:\n{hint}\n\n ",
        reply_markup=get_exercise_keyboard()
    )
    logger.debug(f"Hint shown for user {user_id}")

@bot.message_handler(func=lambda message: message.text == "‚è© –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å")
def skip_word(message):
    """–ü—Ä–æ–ø—É—Å–∫ —Ç–µ–∫—É—â–µ–≥–æ —Å–ª–æ–≤–∞"""
    user_id = message.from_user.id
    logger.info(f"User {user_id} skipping word")
    
    user_data = load_user_data(user_id)
    if not user_data["current_session"] or user_data["current_word_index"] >= len(user_data["current_session"]):
        return
    
    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —Å–ª–æ–≤—É –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
    user_data["current_word_index"] += 1
    save_user_data(user_id, user_data)
    
    bot.reply_to(message, "‚è© –°–ª–æ–≤–æ –ø—Ä–æ–ø—É—â–µ–Ω–æ")
    show_current_exercise(message.chat.id, user_id)
@bot.message_handler(func=lambda message: message.text == "üèÅ –ó–∞–≤–µ—Ä—à–∏—Ç—å –∑–∞–Ω—è—Ç–∏–µ")
def end_session(message):
    """–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–π —Å–µ—Å—Å–∏–∏"""
    user_id = message.from_user.id
    logger.info(f"User {user_id} ending session")
    
    user_data = load_user_data(user_id)
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Ä–µ–º—è —Å–ª–µ–¥—É—é—â–µ–≥–æ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è
    current_time = datetime.datetime.now()
    next_review = None
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å—ã –∏ –≤—Ä–µ–º—è —Å–ª–µ–¥—É—é—â–µ–≥–æ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è
    for word in user_data["active_words"]:
        word["status"] = update_word_status(word)
        next_interval = calculate_next_interval(word.get("correct_answers", 0))
        word_next_review = current_time + datetime.timedelta(hours=next_interval)
        word["next_review"] = word_next_review.isoformat()
        
        if next_review is None or word_next_review < next_review:
            next_review = word_next_review
    
    # –û—á–∏—â–∞–µ–º —Ç–µ–∫—É—â—É—é —Å–µ—Å—Å–∏—é
    user_data["current_session"] = []
    user_data["current_word_index"] = 0
    save_user_data(user_id, user_data)
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    summary_text = [
        "üèÅ *–ó–∞–Ω—è—Ç–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!*\n"
    ]
    
    if next_review:
        time_diff = next_review - current_time
        hours = int(time_diff.total_seconds() // 3600)
        minutes = int((time_diff.total_seconds() % 3600) // 60)
        
        if hours > 0:
            time_str = f"{hours}—á {minutes}–º–∏–Ω"
        else:
            time_str = f"{minutes}–º–∏–Ω"
            
        summary_text.append(f"‚è∞ –°–ª–µ–¥—É—é—â–µ–µ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–µ —á–µ—Ä–µ–∑: *{time_str}*\n")
        summary_text.append("–Ø –ø—Ä–∏—à–ª—é —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ, –∫–æ–≥–¥–∞ –ø—Ä–∏–¥–µ—Ç –≤—Ä–µ–º—è!")
    
    bot.reply_to(
        message,
        "\n".join(summary_text),
        parse_mode='Markdown',
        reply_markup=get_main_keyboard()
    )
    
    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_states[user_id] = {
        "translation_direction": user_states[user_id].get("translation_direction", "ru_to_it"),
        "awaiting_answer": False
    }

@bot.message_handler(func=lambda message: message.text == "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
def show_statistics(message):
    """–ü–æ–∫–∞–∑ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –æ–±—É—á–µ–Ω–∏—è"""
    user_id = message.from_user.id
    logger.info(f"User {user_id} requested statistics")
    
    user_data = load_user_data(user_id)
    
    # –ü–æ–¥—Å—á–µ—Ç —Å–ª–æ–≤ –ø–æ —Å—Ç–∞—Ç—É—Å–∞–º
    new_words = sum(1 for w in user_data["active_words"] 
                   if w.get("status") == WordStatus.NEW)
    learning_words = sum(1 for w in user_data["active_words"] 
                        if w.get("status") == WordStatus.LEARNING)
    learned_words = len(user_data["learned_words"])
    
    # –ü–æ–¥—Å—á–µ—Ç —Å–ª–æ–≤ –¥–ª—è –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è
    words_to_review = get_words_for_review(user_data)
    
    stats_message = (
        "üìä *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ–±—É—á–µ–Ω–∏—è:*\n\n"
        f"üìö –ê–∫—Ç–∏–≤–Ω—ã–µ —Å–ª–æ–≤–∞: {len(user_data['active_words'])}\n"
        f"üÜï –ù–æ–≤—ã–µ —Å–ª–æ–≤–∞ (0 –æ—Ç–≤–µ—Ç–æ–≤): {new_words}\n"
        f"üìù –í –ø—Ä–æ—Ü–µ—Å—Å–µ (1-2 –æ—Ç–≤–µ—Ç–∞): {learning_words}\n"
        f"‚úÖ –ò–∑—É—á–µ–Ω–æ (3+ –æ—Ç–≤–µ—Ç–∞): {learned_words}\n"
        f"‚è∞ –ì–æ—Ç–æ–≤–æ –∫ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—é: {len(words_to_review)}\n\n"
        "–°–ª–æ–≤–æ —Å—á–∏—Ç–∞–µ—Ç—Å—è –∏–∑—É—á–µ–Ω–Ω—ã–º –ø–æ—Å–ª–µ 3 –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤\n"
        f"–í—Å–µ–≥–æ —Å–ª–æ–≤ –≤ —Å–ª–æ–≤–∞—Ä–µ: {len(VOCABULARY['–ë—É–¥—É –∏–∑—É—á–∞—Ç—å'])}"
    )
    
    bot.reply_to(
        message,
        stats_message,
        parse_mode='Markdown',
        reply_markup=get_main_keyboard()
    )

@bot.message_handler(func=lambda message: message.text in ["üîÑ –°–º–µ–Ω–∏—Ç—å –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ", "/switch"])
def switch_translation_direction(message):
    """–°–º–µ–Ω–∞ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–µ—Ä–µ–≤–æ–¥–∞"""
    user_id = message.from_user.id
    logger.info(f"User {user_id} switching translation direction")
    
    state = user_states.get(user_id, {"translation_direction": "ru_to_it"})
    current_direction = state["translation_direction"]
    new_direction = "it_to_ru" if current_direction == "ru_to_it" else "ru_to_it"
    
    user_states[user_id] = {
        **state,
        "translation_direction": new_direction
    }
    
    direction_text = "–∏—Ç–∞–ª—å—è–Ω—Å–∫–∏–π ‚Üí —Ä—É—Å—Å–∫–∏–π" if new_direction == "it_to_ru" else "—Ä—É—Å—Å–∫–∏–π ‚Üí –∏—Ç–∞–ª—å—è–Ω—Å–∫–∏–π"
    bot.reply_to(
        message,
        f"üîÑ –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–µ—Ä–µ–≤–æ–¥–∞ –∏–∑–º–µ–Ω–µ–Ω–æ –Ω–∞:\n*{direction_text}*",
        parse_mode='Markdown'
    )
    
    if state.get("awaiting_answer"):
        show_current_exercise(message.chat.id, user_id)

@bot.message_handler(func=lambda message: message.text in ["‚ÑπÔ∏è –ü–æ–º–æ—â—å", "/help"])
def send_help(message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /help –∏ –∫–Ω–æ–ø–∫–∏ –ü–æ–º–æ—â—å"""
    user_id = message.from_user.id
    logger.info(f"User {user_id} requested help")
    
    help_text = (
        "*–ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º:*\n\n"
        "1Ô∏è‚É£ *–ù–∞—á–∞–ª–æ —Ä–∞–±–æ—Ç—ã:*\n"
        "‚Ä¢ –ù–∞–∂–º–∏—Ç–µ 'üéØ –ù–∞—á–∞—Ç—å –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–µ'\n"
        "‚Ä¢ –í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–µ—Ä–µ–≤–æ–¥–∞\n\n"
        "2Ô∏è‚É£ *–í–æ –≤—Ä–µ–º—è —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è:*\n"
        "‚Ä¢ –ü–µ—Ä–µ–≤–æ–¥–∏—Ç–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω–æ–µ —Å–ª–æ–≤–æ –∏–ª–∏ —Ñ—Ä–∞–∑—É\n"
        "‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ 'üí° –ü–æ–¥—Å–∫–∞–∑–∫–∞' –µ—Å–ª–∏ –Ω—É–∂–Ω–∞ –ø–æ–º–æ—â—å\n"
        "‚Ä¢ 'üîÑ –ü–æ–≤—Ç–æ—Ä–∏—Ç—å' - –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–∏\n"
        "‚Ä¢ '‚è© –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å' - —á—Ç–æ–±—ã –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å —Å–ª–æ–∂–Ω–æ–µ —Å–ª–æ–≤–æ\n"
        "‚Ä¢ '‚û°Ô∏è –î–∞–ª–µ–µ' - –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —Å–ª–æ–≤—É\n"
        "‚Ä¢ 'üèÅ –ó–∞–≤–µ—Ä—à–∏—Ç—å –∑–∞–Ω—è—Ç–∏–µ' - –¥–ª—è –≤—ã—Ö–æ–¥–∞ –∏–∑ —Å–µ—Å—Å–∏–∏\n\n"
        "3Ô∏è‚É£ *–°–∏—Å—Ç–µ–º–∞ –∏–∑—É—á–µ–Ω–∏—è:*\n"
        "‚Ä¢ –ö–∞–∂–¥–æ–µ —Å–ª–æ–≤–æ –Ω—É–∂–Ω–æ –ø—Ä–∞–≤–∏–ª—å–Ω–æ –ø–µ—Ä–µ–≤–µ—Å—Ç–∏ –±–æ–ª–µ–µ 3—Ö —Ä–∞–∑\n"
        "‚Ä¢ –ü–æ—Å–ª–µ –∏–∑—É—á–µ–Ω–∏—è —Å–ª–æ–≤–∞ –¥–æ–±–∞–≤–ª—è–µ—Ç—Å—è –Ω–æ–≤–æ–µ\n"
        "‚Ä¢ –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è –æ–∫–æ–ª–æ 20 –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–ª–æ–≤\n"
        "‚Ä¢ –ò–Ω—Ç–µ—Ä–≤–∞–ª—ã –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è: 4—á ‚Üí 8—á ‚Üí 24—á\n"
        # "‚Ä¢ –£—á–∏—Ç—ã–≤–∞–π—Ç–µ –∑–∞–≥–ª–∞–≤–Ω—ã–µ –±—É–∫–≤—ã –∏ –∑–Ω–∞–∫–∏ –ø—Ä–µ–ø–∏–Ω–∞–Ω–∏—è!\n\n"
        "4Ô∏è‚É£ *–ö–æ–º–∞–Ω–¥—ã:*\n"
        "/start - –ù–∞—á–∞—Ç—å —Å–Ω–∞—á–∞–ª–∞\n"
        "/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ"
    )
    
    bot.reply_to(
        message,
        help_text,
        parse_mode='Markdown',
        reply_markup=get_main_keyboard()
    )
@bot.message_handler(func=lambda message: True)
def handle_answer(message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    user_id = message.from_user.id
    logger.debug(f"Received message from user {user_id}: {message.text}")
    
    state = user_states.get(user_id, {})
    if not state.get("awaiting_answer"):
        return

    user_data = load_user_data(user_id)
    if not user_data["current_session"] or user_data["current_word_index"] >= len(user_data["current_session"]):
        return

    current_word = user_data["current_session"][user_data["current_word_index"]]
    example = state.get("current_example")
    
    if not example:
        logger.error(f"No current example found for user {user_id}")
        bot.reply_to(message, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ù–∞—á–Ω–∏—Ç–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ –∑–∞–Ω–æ–≤–æ")
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç–≤–µ—Ç
    if state["translation_direction"] == "ru_to_it":
        correct_answer = example["–∏—Ç–∞–ª—å—è–Ω—Å–∫–∏–π"]
        alternatives = [correct_answer] + example.get("–∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤—ã_–∏—Ç", [])
    else:
        correct_answer = example["—Ä—É—Å—Å–∫–∏–π"]
        alternatives = [correct_answer] + example.get("–∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤—ã_—Ä—É—Å", [])
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç–≤–µ—Ç —Å —É—á–µ—Ç–æ–º –≤—Å–µ—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤
    is_correct = check_answer(message.text, alternatives)
    logger.debug(f"Answer from user {user_id} was {'correct' if is_correct else 'incorrect'}")
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
    if is_correct:
        current_word["correct_answers"] = current_word.get("correct_answers", 0) + 1
        current_word["status"] = update_word_status(current_word)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ç–µ—Ä–≤–∞–ª –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è
        new_interval = calculate_next_interval(current_word["correct_answers"])
        current_word["next_review"] = (datetime.datetime.now() + 
                                     datetime.timedelta(hours=new_interval)).isoformat()
        
        # –ï—Å–ª–∏ —Å–ª–æ–≤–æ –∏–∑—É—á–µ–Ω–æ, –ø–µ—Ä–µ–º–µ—â–∞–µ–º –µ–≥–æ –∏ –¥–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ
        if current_word["correct_answers"] >= 3:
            logger.info(f"Word '{current_word['word']}' learned by user {user_id}")
            user_data["learned_words"].append(current_word)
            user_data["active_words"].remove(current_word)
            
            # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–ª–æ–≤–æ, –µ—Å–ª–∏ –µ—Å—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ
            if user_data.get("remaining_words"):
                new_word = random.choice(user_data["remaining_words"])
                user_data["remaining_words"].remove(new_word)
                
                user_data["active_words"].append({
                    "word": new_word,
                    "translation": VOCABULARY["–ë—É–¥—É –∏–∑—É—á–∞—Ç—å"][new_word]["–ø–µ—Ä–µ–≤–æ–¥"],
                    "status": WordStatus.NEW,
                    "correct_answers": 0,
                    "next_review": datetime.datetime.now().isoformat(),
                    "interval": 4
                })
                logger.info(f"Added new word '{new_word}' for user {user_id}")
    
    save_user_data(user_id, user_data)
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    progress_bar = "üü¢" * current_word["correct_answers"] + "‚ö™Ô∏è" * (3 - current_word["correct_answers"])
    
    if is_correct:
        response = (
            "‚úÖ *–ü—Ä–∞–≤–∏–ª—å–Ω–æ!*\n\n"
            f"–í–∞—à –æ—Ç–≤–µ—Ç: _{message.text}_\n"
            f"–ü—Ä–æ–≥—Ä–µ—Å—Å: {progress_bar}"
        )
        markup = get_next_keyboard()
    else:
        response = (
            "‚ùå *–û—à–∏–±–∫–∞!*\n\n"
            f"–í–∞—à –æ—Ç–≤–µ—Ç: _{message.text}_\n"
            f"–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: *{correct_answer}*\n"
            f"–ü—Ä–æ–≥—Ä–µ—Å—Å: {progress_bar}\n\n"
            # "‚ùóÔ∏è –£—á–∏—Ç—ã–≤–∞–π—Ç–µ –∑–∞–≥–ª–∞–≤–Ω—ã–µ –±—É–∫–≤—ã –∏ –∑–Ω–∞–∫–∏ –ø—Ä–µ–ø–∏–Ω–∞–Ω–∏—è!"
        )
        markup = get_retry_keyboard()
    
    bot.reply_to(
        message,
        response,
        parse_mode='Markdown',
        reply_markup=markup
    )

def check_and_send_notifications():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
    logger.info("Starting notifications checker")
    last_notifications = {}  # –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    
    while True:
        try:
            current_time = datetime.datetime.now()
            if os.path.exists('user_data'):
                for filename in os.listdir('user_data'):
                    if not filename.startswith('user_') or not filename.endswith('.json'):
                        continue
                        
                    try:
                        user_id = int(filename.split('_')[1].split('.')[0])
                        
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —Å–ª–∏—à–∫–æ–º –ª–∏ —á–∞—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
                        if user_id in last_notifications:
                            time_since_last = current_time - last_notifications[user_id]
                            if time_since_last.total_seconds() < 3600:  # –ú–∏–Ω–∏–º—É–º —á–∞—Å –º–µ–∂–¥—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏
                                continue
                        
                        user_data = load_user_data(user_id)
                        if not user_data:
                            continue
                            
                        words_to_review = get_words_for_review(user_data)
                        if words_to_review:
                            # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
                            words_preview = [f"‚Ä¢ {w['word']} - {w['translation']}" 
                                          for w in words_to_review[:3]]
                            words_count = len(words_to_review)
                            
                            notification_text = [
                                "üîî *–ü–æ—Ä–∞ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å —Å–ª–æ–≤–∞!*\n",
                                f"–£ –≤–∞—Å {words_count} —Å–ª–æ–≤ –≥–æ—Ç–æ–≤–æ –∫ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—é:\n",
                                *words_preview
                            ]
                            
                            if words_count > 3:
                                notification_text.append(f"\n... –∏ –µ—â—ë {words_count - 3} —Å–ª–æ–≤")
                            
                            notification_text.extend([
                                f"\nüìö –í—Å–µ–≥–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–ª–æ–≤: {len(user_data['active_words'])}",
                                f"‚úÖ –ò–∑—É—á–µ–Ω–æ —Å–ª–æ–≤: {len(user_data['learned_words'])}"
                            ])
                            
                            try:
                                bot.send_message(
                                    user_id,
                                    "\n".join(notification_text),
                                    parse_mode='Markdown',
                                    reply_markup=get_main_keyboard()
                                )
                                last_notifications[user_id] = current_time
                                logger.info(f"Sent notification to user {user_id}")
                                
                            except telebot.apihelper.ApiTelegramException as e:
                                if e.error_code == 403:  # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞
                                    logger.warning(f"User {user_id} has blocked the bot")
                                else:
                                    logger.error(f"Error sending notification to user {user_id}: {e}")
                        
                    except Exception as e:
                        logger.error(f"Error processing user {filename}: {e}")
                        continue
                        
        except Exception as e:
            logger.error(f"Error in notification check: {e}")
        
        time.sleep(300)  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç

def run_bot():
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
    logger.info("=== Starting Bot ===")
    logger.info(f"Vocabulary size: {len(VOCABULARY['–ë—É–¥—É –∏–∑—É—á–∞—Ç—å'])} words")
    
    # –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
    telebot.apihelper.CONNECT_TIMEOUT = 15
    telebot.apihelper.READ_TIMEOUT = 10
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–∫–µ–Ω
        bot_info = bot.get_me()
        logger.info(f"Bot authorized successfully. Bot username: {bot_info.username}")
        
        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º webhook –∏ –æ—á–∏—â–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        bot.delete_webhook()
        logger.info("Webhook deleted")
        bot.get_updates(offset=-1, timeout=1)
        logger.info("Updates cleared")
        
        # –ó–∞–ø—É—Å–∫ –ø—Ä–æ–≤–µ—Ä–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
        import threading
        notification_thread = threading.Thread(target=check_and_send_notifications, daemon=True)
        notification_thread.start()
        logger.info("Notification thread started")
        
        # –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –±–æ—Ç–∞
        while True:
            try:
                logger.info("Starting bot polling...")
                bot.infinity_polling(
                    timeout=15,
                    long_polling_timeout=30,
                    logger_level=logging.ERROR,
                    restart_on_change=False,
                    skip_pending=True
                )
            except Exception as e:
                logger.error(f"Polling error: {e}")
                time.sleep(5)
    except Exception as e:
        logger.error(f"Critical error: {e}")

if __name__ == "__main__":
    try:
        # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –±–æ—Ç–∞ –ø–æ Ctrl+C
        import signal
        def signal_handler(sig, frame):
            logger.info("Received stop signal, shutting down...")
            os._exit(0)
        signal.signal(signal.SIGINT, signal_handler)
        
        run_bot()
    except KeyboardInterrupt:
        logger.info("Bot stopped by user")
    except Exception as e:
        logger.error(f"Fatal error: {e}")
        raise