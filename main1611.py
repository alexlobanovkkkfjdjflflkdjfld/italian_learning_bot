import tkinter as tk
from tkinter import ttk, messagebox
import json
import os
import datetime
from plyer import notification
import threading
import time
import random
import difflib
import unicodedata
from vocabulary import VOCABULARY


class ItalianLearningApp:
    def __init__(self):
        self.root = tk.Tk()
        self.root.title("–ò–∑—É—á–µ–Ω–∏–µ –∏—Ç–∞–ª—å—è–Ω—Å–∫–æ–≥–æ —è–∑—ã–∫–∞")
        self.root.geometry("800x600")
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ü–≤–µ—Ç–æ–≤ –¥–ª—è –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
        self.colors = {
            "primary": "#1976D2",     # –æ—Å–Ω–æ–≤–Ω–æ–π —Ü–≤–µ—Ç
            "success": "#4CAF50",     # —Ü–≤–µ—Ç —É—Å–ø–µ—Ö–∞
            "error": "#f44336",       # —Ü–≤–µ—Ç –æ—à–∏–±–∫–∏
            "warning": "#FFA726",     # —Ü–≤–µ—Ç –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è
            "hint": "#673AB7",        # —Ü–≤–µ—Ç –ø–æ–¥—Å–∫–∞–∑–∫–∏
            "background": "#FFFFFF",   # —Ñ–æ–Ω
            "text": "#212121",        # –æ—Å–Ω–æ–≤–Ω–æ–π —Ç–µ–∫—Å—Ç
            "secondary_text": "#757575" # –≤—Ç–æ—Ä–∏—á–Ω—ã–π —Ç–µ–∫—Å—Ç
        }
        
        # –°–æ–∑–¥–∞–µ–º —Å—Ç–∏–ª–∏ –ø–æ—Å–ª–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ü–≤–µ—Ç–æ–≤
        self.create_styles()
        
        # –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Å–ª–æ–≤–∞—Ä—è
        self.vocabulary = VOCABULARY
        
        # # ... –æ—Å—Ç–∞–ª—å–Ω–æ–π –∫–æ–¥ ...
        
# class ItalianLearningApp:
    # def __init__(self):
        # self.root = tk.Tk()
        # self.root.title("–ò–∑—É—á–µ–Ω–∏–µ –∏—Ç–∞–ª—å—è–Ω—Å–∫–æ–≥–æ —è–∑—ã–∫–∞")
        # self.root.geometry("800x600")
        
        # # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ü–≤–µ—Ç–æ–≤ –¥–ª—è –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
        # self.colors = {
            # "primary": "#1976D2",     # –æ—Å–Ω–æ–≤–Ω–æ–π —Ü–≤–µ—Ç
            # "success": "#4CAF50",     # —Ü–≤–µ—Ç —É—Å–ø–µ—Ö–∞
            # "error": "#f44336",       # —Ü–≤–µ—Ç –æ—à–∏–±–∫–∏
            # "warning": "#FFA726",     # —Ü–≤–µ—Ç –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è
            # "hint": "#673AB7",        # —Ü–≤–µ—Ç –ø–æ–¥—Å–∫–∞–∑–∫–∏
            # "background": "#FFFFFF",   # —Ñ–æ–Ω
            # "text": "#212121",        # –æ—Å–Ω–æ–≤–Ω–æ–π —Ç–µ–∫—Å—Ç
            # "secondary_text": "#757575" # –≤—Ç–æ—Ä–∏—á–Ω—ã–π —Ç–µ–∫—Å—Ç
        # }
        
        # # –°–æ–∑–¥–∞–µ–º —Å—Ç–∏–ª–∏ –ø–æ—Å–ª–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ü–≤–µ—Ç–æ–≤
        # self.create_styles()
        
        # # –°–ª–æ–≤–∞—Ä—å —Å –¥–∞–Ω–Ω—ã–º–∏
        # self.vocabulary = {
            # "–ò–∑—É—á–∞—é": {},
            # "–ë—É–¥—É –∏–∑—É—á–∞—Ç—å": {
                # "il progetto": {
                    # "–ø–µ—Ä–µ–≤–æ–¥": "–ø—Ä–æ–µ–∫—Ç",
                    # "–ø—Ä–∏–º–µ—Ä—ã": [
                        # {
                            # "—Ä—É—Å—Å–∫–∏–π": "–≠—Ç–æ –≤–∞–∂–Ω—ã–π –ø—Ä–æ–µ–∫—Ç",
                            # "–∏—Ç–∞–ª—å—è–Ω—Å–∫–∏–π": "√à un progetto importante",
                            # "–∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤—ã_—Ä—É—Å": ["–≠—Ç–æ –≤–∞–∂–Ω—ã–π –ø–ª–∞–Ω"],
                            # "–∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤—ã_–∏—Ç": ["Questo √® un progetto importante"]
                        # }
                    # ]
                # },
                # "il colloquio": {
                    # "–ø–µ—Ä–µ–≤–æ–¥": "—Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏–µ",
                    # "–ø—Ä–∏–º–µ—Ä—ã": [
                        # {
                            # "—Ä—É—Å—Å–∫–∏–π": "–£ –º–µ–Ω—è —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏–µ –≤ –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫ —É—Ç—Ä–æ–º",
                            # "–∏—Ç–∞–ª—å—è–Ω—Å–∫–∏–π": "Ho un colloquio luned√¨ mattina",
                            # "–∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤—ã_—Ä—É—Å": ["–£ –º–µ–Ω—è –≤—Å—Ç—Ä–µ—á–∞ –≤ –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫ —É—Ç—Ä–æ–º"],
                            # "–∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤—ã_–∏—Ç": ["Ho il colloquio luned√¨ mattina"]
                        # }
                    # ]
                # },
                # "l'esperienza": {
                    # "–ø–µ—Ä–µ–≤–æ–¥": "–æ–ø—ã—Ç",
                    # "–ø—Ä–∏–º–µ—Ä—ã": [
                        # {
                            # "—Ä—É—Å—Å–∫–∏–π": "–£ –º–µ–Ω—è –±–æ–ª—å—à–æ–π –æ–ø—ã—Ç —Ä–∞–±–æ—Ç—ã",
                            # "–∏—Ç–∞–ª—å—è–Ω—Å–∫–∏–π": "Ho molta esperienza di lavoro",
                            # "–∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤—ã_—Ä—É—Å": ["–Ø –∏–º–µ—é –±–æ–ª—å—à–æ–π –æ–ø—ã—Ç —Ä–∞–±–æ—Ç—ã"],
                            # "–∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤—ã_–∏—Ç": ["Ho una grande esperienza di lavoro"]
                        # }
                    # ]
                # },
                # "la riunione": {
                    # "–ø–µ—Ä–µ–≤–æ–¥": "—Å–æ–≤–µ—â–∞–Ω–∏–µ",
                    # "–ø—Ä–∏–º–µ—Ä—ã": [
                        # {
                            # "—Ä—É—Å—Å–∫–∏–π": "–°–æ–≤–µ—â–∞–Ω–∏–µ –Ω–∞—á–Ω–µ—Ç—Å—è —á–µ—Ä–µ–∑ —á–∞—Å",
                            # "–∏—Ç–∞–ª—å—è–Ω—Å–∫–∏–π": "La riunione inizier√† tra un'ora",
                            # "–∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤—ã_—Ä—É—Å": ["–í—Å—Ç—Ä–µ—á–∞ –Ω–∞—á–Ω–µ—Ç—Å—è —á–µ—Ä–µ–∑ —á–∞—Å"],
                            # "–∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤—ã_–∏—Ç": ["La riunione comincer√† tra un'ora"]
                        # }
                    # ]
                # }
            # },
            # "–ò–∑—É—á–∏–ª": {}
        # }
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
        self.setup_ui()
        
        # –ó–∞–≥—Ä—É–∑–∫–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
        self.load_schedule()
        
        # –ó–∞–ø—É—Å–∫ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        self.start_auto_update()
    def create_styles(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ —Å—Ç–∏–ª–µ–π –¥–ª—è –≤–∏–¥–∂–µ—Ç–æ–≤"""
        style = ttk.Style()
        
        # –û—Å–Ω–æ–≤–Ω–æ–π —Å—Ç–∏–ª—å –∫–Ω–æ–ø–æ–∫
        style.configure(
            "Main.TButton",
            padding=10,
            font=('Helvetica', 10, 'bold'),
            width=15
        )
        
        # –°—Ç–∏–ª—å –¥–ª—è –∫–Ω–æ–ø–æ–∫ –≤ –æ–∫–Ω–µ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è
        style.configure(
            "Review.TButton",
            padding=8,
            font=('Helvetica', 10),
            width=15
        )
        
        # –°—Ç–∏–ª—å –¥–ª—è –∫–Ω–æ–ø–∫–∏ –ø–æ–¥—Å–∫–∞–∑–∫–∏
        style.configure(
            "Hint.TButton",
            padding=8,
            font=('Helvetica', 10),
            width=15
        )
        
        # –°—Ç–∏–ª—å –¥–ª—è –∫–Ω–æ–ø–∫–∏ –ø—Ä–æ–≤–µ—Ä–∫–∏
        style.configure(
            "Check.TButton",
            padding=8,
            font=('Helvetica', 10, 'bold'),
            width=15
        )
        
        # –°—Ç–∏–ª—å –¥–ª—è –º–µ—Ç–æ–∫
        style.configure(
            "Main.TLabel",
            font=('Helvetica', 10),
            foreground=self.colors["text"]
        )
        
        # –°—Ç–∏–ª—å –¥–ª—è –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
        style.configure(
            "Header.TLabel",
            font=('Helvetica', 16, 'bold'),
            foreground=self.colors["primary"]
        )
        
        # –°—Ç–∏–ª—å –¥–ª—è –ø–æ–¥–∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
        style.configure(
            "Subheader.TLabel",
            font=('Helvetica', 12, 'bold'),
            foreground=self.colors["text"]
        )

    def setup_ui(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞"""
        # –û—Å–Ω–æ–≤–Ω–æ–π —Ñ—Ä–µ–π–º
        self.main_frame = ttk.Frame(self.root, padding="20")
        self.main_frame.grid(row=0, column=0, sticky=(tk.W, tk.E, tk.N, tk.S))
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è –æ–∫–Ω–∞
        self.root.columnconfigure(0, weight=1)
        self.root.rowconfigure(0, weight=1)
        self.main_frame.columnconfigure(1, weight=1)
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        header_frame = ttk.Frame(self.main_frame)
        header_frame.grid(row=0, column=0, columnspan=3, sticky=(tk.W, tk.E))
        
        title_label = ttk.Label(
            header_frame,
            text="–ò–∑—É—á–µ–Ω–∏–µ –∏—Ç–∞–ª—å—è–Ω—Å–∫–æ–≥–æ —è–∑—ã–∫–∞",
            style="Header.TLabel"
        )
        title_label.pack(pady=(0, 5))
        
        subtitle_label = ttk.Label(
            header_frame,
            text="–°–∏—Å—Ç–µ–º–∞ –∏–Ω—Ç–µ—Ä–≤–∞–ª—å–Ω–æ–≥–æ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è",
            style="Subheader.TLabel"
        )
        subtitle_label.pack(pady=(0, 20))
        
        # –†–∞–º–∫–∞ –¥–ª—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
        schedule_frame = ttk.LabelFrame(
            self.main_frame,
            text="–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–π",
            padding="10"
        )
        schedule_frame.grid(row=1, column=0, columnspan=3, sticky=(tk.W, tk.E, tk.N, tk.S))
        schedule_frame.columnconfigure(0, weight=1)
        schedule_frame.rowconfigure(0, weight=1)
        
        # –¢–µ–∫—Å—Ç–æ–≤–æ–µ –ø–æ–ª–µ –¥–ª—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è —Å –ø—Ä–æ–∫—Ä—É—Ç–∫–æ–π
        schedule_container = ttk.Frame(schedule_frame)
        schedule_container.grid(row=0, column=0, sticky=(tk.W, tk.E, tk.N, tk.S))
        schedule_container.columnconfigure(0, weight=1)
        schedule_container.rowconfigure(0, weight=1)
        
        self.schedule_text = tk.Text(
            schedule_container,
            height=15,
            width=70,
            font=('Helvetica', 10),
            wrap=tk.WORD,
            padx=10,
            pady=10,
            background=self.colors["background"],
            foreground=self.colors["text"]
        )
        self.schedule_text.grid(row=0, column=0, sticky=(tk.W, tk.E, tk.N, tk.S))
        
        scrollbar = ttk.Scrollbar(
            schedule_container,
            orient="vertical",
            command=self.schedule_text.yview
        )
        scrollbar.grid(row=0, column=1, sticky=(tk.N, tk.S))
        self.schedule_text.configure(yscrollcommand=scrollbar.set)
        
        # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        button_frame = ttk.Frame(self.main_frame)
        button_frame.grid(row=2, column=0, columnspan=3, pady=20)
        
        refresh_btn = ttk.Button(
            button_frame,
            text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ",
            command=self.load_schedule,
            style="Main.TButton",
            width=25
        )
        refresh_btn.pack(side=tk.LEFT, padx=10)
        
        start_btn = ttk.Button(
            button_frame,
            text="‚ñ∂Ô∏è –ù–∞—á–∞—Ç—å –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–µ",
            command=self.start_review,
            style="Main.TButton",
            width=25
        )
        start_btn.pack(side=tk.LEFT, padx=10)
        
        # –°—Ç–∞—Ç—É—Å –∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        self.status_frame = ttk.Frame(self.main_frame)
        self.status_frame.grid(row=3, column=0, columnspan=3, pady=(10, 0))
        
        self.status_label = ttk.Label(
            self.status_frame,
            text="",
            style="Main.TLabel"
        )
        self.status_label.pack(side=tk.LEFT)
    
    # def load_schedule(self):
    def load_schedule(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ –∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è"""
        print("–î–æ—Å—Ç—É–ø–Ω—ã–µ —Å–ª–æ–≤–∞ –≤ —Å–ª–æ–≤–∞—Ä–µ:", list(self.vocabulary["–ë—É–¥—É –∏–∑—É—á–∞—Ç—å"].keys()))
        print("–†–∞–∑–º–µ—Ä —Å–ª–æ–≤–∞—Ä—è:", len(self.vocabulary["–ë—É–¥—É –∏–∑—É—á–∞—Ç—å"]))
        
        self.schedule_text.config(state=tk.NORMAL)
        self.schedule_text.delete('1.0', tk.END)
        current_time = datetime.datetime.now()
        
        # """–ó–∞–≥—Ä—É–∑–∫–∞ –∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è"""
        # self.schedule_text.config(state=tk.NORMAL)
        # self.schedule_text.delete('1.0', tk.END)
        # current_time = datetime.datetime.now()
        
        schedule_file = 'schedule.json'
        
        try:
            with open(schedule_file, 'r', encoding='utf-8') as f:
                schedule = json.load(f)
        except FileNotFoundError:
            # –°–æ–∑–¥–∞–µ–º –Ω–∞—á–∞–ª—å–Ω–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ
            schedule = {"words": []}
            
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Å–ª–æ–≤–∞
            available_words = list(self.vocabulary["–ë—É–¥—É –∏–∑—É—á–∞—Ç—å"].keys())
            print("–°–æ–∑–¥–∞–µ–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è —Å–ª–æ–≤:", available_words)
            
            # –î–æ–±–∞–≤–ª—è–µ–º –≤—Å–µ —Å–ª–æ–≤–∞ –≤ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ
            for i, word in enumerate(available_words):
                # –ü–µ—Ä–≤–æ–µ —Å–ª–æ–≤–æ –¥–ª—è —Å—Ä–æ—á–Ω–æ–≥–æ –∏–∑—É—á–µ–Ω–∏—è, –æ—Å—Ç–∞–ª—å–Ω—ã–µ - —á–µ—Ä–µ–∑ –∏–Ω—Ç–µ—Ä–≤–∞–ª—ã
                next_review = current_time if i == 0 else current_time + datetime.timedelta(minutes=5*(i))
                
                schedule["words"].append({
                    "word": word,
                    "translation": self.vocabulary["–ë—É–¥—É –∏–∑—É—á–∞—Ç—å"][word]["–ø–µ—Ä–µ–≤–æ–¥"],
                    "next_review": next_review.isoformat()
                })
                print(f"–î–æ–±–∞–≤–ª–µ–Ω–æ —Å–ª–æ–≤–æ: {word}")
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ
            with open(schedule_file, 'w', encoding='utf-8') as f:
                json.dump(schedule, f, ensure_ascii=False, indent=2)
            
            print("–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–æ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ")
            
        # try:
            # with open(schedule_file, 'r', encoding='utf-8') as f:
                # schedule = json.load(f)
        # except FileNotFoundError:
            # # –°–æ–∑–¥–∞–µ–º –Ω–∞—á–∞–ª—å–Ω–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ
            # schedule = {"words": []}
            
            # # –°–ª–æ–≤–æ –¥–ª—è —Å—Ä–æ—á–Ω–æ–≥–æ –∏–∑—É—á–µ–Ω–∏—è
            # schedule["words"].append({
                # "word": "lavorare",
                # "translation": self.vocabulary["–ë—É–¥—É –∏–∑—É—á–∞—Ç—å"]["lavorare"]["–ø–µ—Ä–µ–≤–æ–¥"],
                # "next_review": current_time.isoformat()  # –¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –¥–ª—è —Å—Ä–æ—á–Ω–æ–≥–æ –∏–∑—É—á–µ–Ω–∏—è
            # })
            
            # # –î–æ–±–∞–≤–ª—è–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã–µ —Å–ª–æ–≤–∞ –¥–ª—è –±—É–¥—É—â–µ–≥–æ –∏–∑—É—á–µ–Ω–∏—è
            # future_words = ["un lavoro", "un impiegato", "un capo"]
            # for i, word in enumerate(future_words):
                # if word in self.vocabulary["–ë—É–¥—É –∏–∑—É—á–∞—Ç—å"]:
                    # schedule["words"].append({
                        # "word": word,
                        # "translation": self.vocabulary["–ë—É–¥—É –∏–∑—É—á–∞—Ç—å"][word]["–ø–µ—Ä–µ–≤–æ–¥"],
                        # "next_review": (current_time + datetime.timedelta(minutes=5*(i+1))).isoformat()
                    # })
            
            # # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ
            # with open(schedule_file, 'w', encoding='utf-8') as f:
                # json.dump(schedule, f, ensure_ascii=False, indent=2)
        
        # –†–∞–∑–¥–µ–ª–µ–Ω–∏–µ —Å–ª–æ–≤ –Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        urgent_words = []  # —Å–ª–æ–≤–∞ –¥–ª—è —Å—Ä–æ—á–Ω–æ–≥–æ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è
        future_words = []  # —Å–ª–æ–≤–∞ –¥–ª—è –±—É–¥—É—â–µ–≥–æ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è
        
        for word in schedule["words"]:
            next_review = datetime.datetime.fromisoformat(word["next_review"])
            time_diff = next_review - current_time
            
            if time_diff.total_seconds() <= 0:
                urgent_words.append(word)
            else:
                hours = int(time_diff.total_seconds() // 3600)
                minutes = int((time_diff.total_seconds() % 3600) // 60)
                future_words.append({
                    "word": word,
                    "hours": hours,
                    "minutes": minutes
                })
        
        # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å—Ä–æ—á–Ω—ã—Ö —Å–ª–æ–≤
        if urgent_words:
            self.schedule_text.insert(tk.END, "üîî –ü–û–†–ê –ü–û–í–¢–û–†–ò–¢–¨:\n\n", "header_black")
            for word in urgent_words:
                self.schedule_text.insert(
                    tk.END,
                    f"‚Ä¢ {word['word']} - {word['translation']}\n",
                    "current"
                )
                if not self.root.focus_displayof():
                    self.show_notification(word)
            self.schedule_text.insert(tk.END, "\n")
        
        # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –±—É–¥—É—â–∏—Ö —Å–ª–æ–≤
        if future_words:
            self.schedule_text.insert(tk.END, "‚è∞ –ü–†–ï–î–°–¢–û–Ø–©–ò–ï –ü–û–í–¢–û–†–ï–ù–ò–Ø:\n\n", "header")
            future_words.sort(key=lambda x: (x["hours"], x["minutes"]))
            for word_info in future_words:
                time_str = f"{word_info['hours']}—á {word_info['minutes']}–º–∏–Ω"
                word = word_info["word"]
                self.schedule_text.insert(
                    tk.END,
                    f"‚Ä¢ –ß–µ—Ä–µ–∑ {time_str}: {word['word']} - {word['translation']}\n",
                    "future"
                )
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ç–µ–≥–æ–≤ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        self.schedule_text.tag_configure(
            "header",
            font=('Helvetica', 11, 'bold'),
            foreground=self.colors["primary"]
        )
        self.schedule_text.tag_configure(
            "header_black",
            font=('Helvetica', 11, 'bold'),
            foreground=self.colors["text"]
        )
        self.schedule_text.tag_configure(
            "current",
            font=('Helvetica', 10),
            foreground=self.colors["error"]
        )
        self.schedule_text.tag_configure(
            "future",
            font=('Helvetica', 10),
            foreground=self.colors["secondary_text"]
        )
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
        self.status_label.config(
            text=f"–ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: {current_time.strftime('%H:%M:%S')}"
        )
        
        self.schedule_text.config(state=tk.DISABLED)
        
    # def load_schedule(self):
        # """–ó–∞–≥—Ä—É–∑–∫–∞ –∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è"""
        # self.schedule_text.config(state=tk.NORMAL)
        # self.schedule_text.delete('1.0', tk.END)
        # current_time = datetime.datetime.now()
        
        # schedule_file = 'schedule.json'
        # try:
            # with open(schedule_file, 'r', encoding='utf-8') as f:
                # schedule = json.load(f)
        # except FileNotFoundError:
            # # –°–æ–∑–¥–∞–µ–º –Ω–∞—á–∞–ª—å–Ω–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ
            # schedule = {"words": []}
            # words_list = ["il progetto", "il colloquio", "l'esperienza", "la riunione"]
            
            # # –í—Å–µ —Å–ª–æ–≤–∞ –¥–æ–±–∞–≤–ª—è–µ–º –æ–¥–∏–Ω–∞–∫–æ–≤–æ
            # for word in words_list:
                # if word in self.vocabulary["–ë—É–¥—É –∏–∑—É—á–∞—Ç—å"]:
                    # schedule["words"].append({
                        # "word": word,
                        # "translation": self.vocabulary["–ë—É–¥—É –∏–∑—É—á–∞—Ç—å"][word]["–ø–µ—Ä–µ–≤–æ–¥"],
                        # "next_review": current_time.isoformat()  # –í—Å–µ —Å–ª–æ–≤–∞ –¥–æ—Å—Ç—É–ø–Ω—ã —Å—Ä–∞–∑—É
                    # })
            
            # with open(schedule_file, 'w', encoding='utf-8') as f:
                # json.dump(schedule, f, ensure_ascii=False, indent=2)
        
        # # –†–∞–∑–¥–µ–ª–µ–Ω–∏–µ —Å–ª–æ–≤ –Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        # urgent_words = []  # —Å–ª–æ–≤–∞ –¥–ª—è —Å—Ä–æ—á–Ω–æ–≥–æ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è
        # future_words = []  # —Å–ª–æ–≤–∞ –¥–ª—è –±—É–¥—É—â–µ–≥–æ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è
        
        # for word in schedule["words"]:
            # next_review = datetime.datetime.fromisoformat(word["next_review"])
            # time_diff = next_review - current_time
            
            # if time_diff.total_seconds() <= 0:
                # urgent_words.append(word)
            # else:
                # hours = int(time_diff.total_seconds() // 3600)
                # minutes = int((time_diff.total_seconds() % 3600) // 60)
                # future_words.append({
                    # "word": word,
                    # "hours": hours,
                    # "minutes": minutes
                # })
        
        # # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å—Ä–æ—á–Ω—ã—Ö —Å–ª–æ–≤
        # if urgent_words:
            # self.schedule_text.insert(tk.END, "üîî –ü–û–†–ê –ü–û–í–¢–û–†–ò–¢–¨:\n\n", "header_black")
            # for word in urgent_words:
                # self.schedule_text.insert(
                    # tk.END,
                    # f"‚Ä¢ {word['word']} - {word['translation']}\n",
                    # "current"
                # )
                # if not self.root.focus_displayof():
                    # self.show_notification(word)
            # self.schedule_text.insert(tk.END, "\n")
        
        # # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –±—É–¥—É—â–∏—Ö —Å–ª–æ–≤
        # if future_words:
            # self.schedule_text.insert(tk.END, "‚è∞ –ü–†–ï–î–°–¢–û–Ø–©–ò–ï –ü–û–í–¢–û–†–ï–ù–ò–Ø:\n\n", "header")
            # future_words.sort(key=lambda x: (x["hours"], x["minutes"]))
            # for word_info in future_words:
                # time_str = f"{word_info['hours']}—á {word_info['minutes']}–º–∏–Ω"
                # self.schedule_text.insert(
                    # tk.END,
                    # f"‚Ä¢ –ß–µ—Ä–µ–∑ {time_str}: {word_info['word']['word']} - {word_info['word']['translation']}\n",
                    # "future"
                # )
        
        # # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ç–µ–≥–æ–≤
        # self.schedule_text.tag_configure(
            # "header",
            # font=('Helvetica', 11, 'bold'),
            # foreground=self.colors["primary"]
        # )
        # self.schedule_text.tag_configure(
            # "header_black",
            # font=('Helvetica', 11, 'bold'),
            # foreground=self.colors["text"]
        # )
        # self.schedule_text.tag_configure(
            # "current",
            # font=('Helvetica', 10),
            # foreground=self.colors["error"]
        # )
        # self.schedule_text.tag_configure(
            # "future",
            # font=('Helvetica', 10),
            # foreground=self.colors["secondary_text"]
        # )
        
        # # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
        # self.status_label.config(
            # text=f"–ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: {current_time.strftime('%H:%M:%S')}"
        # )
        
        # self.schedule_text.config(state=tk.DISABLED)
        
    # def load_schedule(self):
        # """–ó–∞–≥—Ä—É–∑–∫–∞ –∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è"""
        # self.schedule_text.config(state=tk.NORMAL)
        # self.schedule_text.delete('1.0', tk.END)
        # current_time = datetime.datetime.now()
        
        # schedule_file = 'schedule.json'
        # try:
            # with open(schedule_file, 'r', encoding='utf-8') as f:
                # schedule = json.load(f)
        # except FileNotFoundError:
            # # –°–æ–∑–¥–∞–µ–º –Ω–∞—á–∞–ª—å–Ω–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ
            # schedule = {"words": []}
            
            # # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —Å–ª–æ–≤–æ il progetto –¥–ª—è —Å—Ä–æ—á–Ω–æ–≥–æ –∏–∑—É—á–µ–Ω–∏—è
            # schedule["words"].append({
                # "word": "il progetto",
                # "translation": self.vocabulary["–ë—É–¥—É –∏–∑—É—á–∞—Ç—å"]["il progetto"]["–ø–µ—Ä–µ–≤–æ–¥"],
                # "next_review": current_time.isoformat()  # –¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –¥–ª—è —Å—Ä–æ—á–Ω–æ–≥–æ –∏–∑—É—á–µ–Ω–∏—è
            # })
            
            # # –î–æ–±–∞–≤–ª—è–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã–µ —Å–ª–æ–≤–∞ –¥–ª—è –±—É–¥—É—â–µ–≥–æ –∏–∑—É—á–µ–Ω–∏—è
            # future_words = ["il colloquio", "l'esperienza", "la riunione"]
            # for word in future_words:
                # if word in self.vocabulary["–ë—É–¥—É –∏–∑—É—á–∞—Ç—å"]:
                    # schedule["words"].append({
                        # "word": word,
                        # "translation": self.vocabulary["–ë—É–¥—É –∏–∑—É—á–∞—Ç—å"][word]["–ø–µ—Ä–µ–≤–æ–¥"],
                        # "next_review": (current_time + datetime.timedelta(hours=4)).isoformat()
                    # })
            
            # with open(schedule_file, 'w', encoding='utf-8') as f:
                # json.dump(schedule, f, ensure_ascii=False, indent=2)
        
        # # –†–∞–∑–¥–µ–ª–µ–Ω–∏–µ —Å–ª–æ–≤ –Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        # urgent_words = []  # —Å–ª–æ–≤–∞ –¥–ª—è —Å—Ä–æ—á–Ω–æ–≥–æ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è
        # future_words = []  # —Å–ª–æ–≤–∞ –¥–ª—è –±—É–¥—É—â–µ–≥–æ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è
        
        # for word in schedule["words"]:
            # next_review = datetime.datetime.fromisoformat(word["next_review"])
            # time_diff = next_review - current_time
            
            # # –ï—Å–ª–∏ –≤—Ä–µ–º—è –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è —É–∂–µ –Ω–∞—Å—Ç—É–ø–∏–ª–æ –∏–ª–∏ —ç—Ç–æ —Å–ª–æ–≤–æ il progetto
            # if time_diff.total_seconds() <= 0 or word["word"] == "il progetto":
                # urgent_words.append(word)
            # else:
                # hours = int(time_diff.total_seconds() // 3600)
                # minutes = int((time_diff.total_seconds() % 3600) // 60)
                # future_words.append({
                    # "word": word,
                    # "hours": hours,
                    # "minutes": minutes
                # })
        
        # # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å—Ä–æ—á–Ω—ã—Ö —Å–ª–æ–≤
        # if urgent_words:
            # self.schedule_text.insert(tk.END, "üîî –ü–û–†–ê –ü–û–í–¢–û–†–ò–¢–¨:\n\n", "header_black")
            # for word in urgent_words:
                # self.schedule_text.insert(
                    # tk.END,
                    # f"‚Ä¢ {word['word']} - {word['translation']}\n",
                    # "current"
                # )
                # if not self.root.focus_displayof():
                    # self.show_notification(word)
            # self.schedule_text.insert(tk.END, "\n")
        
        # # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –±—É–¥—É—â–∏—Ö —Å–ª–æ–≤
        # if future_words:
            # self.schedule_text.insert(tk.END, "‚è∞ –ü–†–ï–î–°–¢–û–Ø–©–ò–ï –ü–û–í–¢–û–†–ï–ù–ò–Ø:\n\n", "header")
            # future_words.sort(key=lambda x: (x["hours"], x["minutes"]))
            # for word_info in future_words:
                # time_str = f"{word_info['hours']}—á {word_info['minutes']}–º–∏–Ω"
                # word = word_info["word"]
                # self.schedule_text.insert(
                    # tk.END,
                    # f"‚Ä¢ –ß–µ—Ä–µ–∑ {time_str}: {word['word']} - {word['translation']}\n",
                    # "future"
                # )
        
        # # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ç–µ–≥–æ–≤ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        # self.schedule_text.tag_configure(
            # "header",
            # font=('Helvetica', 11, 'bold'),
            # foreground=self.colors["primary"]
        # )
        # self.schedule_text.tag_configure(
            # "header_black",
            # font=('Helvetica', 11, 'bold'),
            # foreground=self.colors["text"]
        # )
        # self.schedule_text.tag_configure(
            # "current",
            # font=('Helvetica', 10),
            # foreground=self.colors["error"]
        # )
        # self.schedule_text.tag_configure(
            # "future",
            # font=('Helvetica', 10),
            # foreground=self.colors["secondary_text"]
        # )
        
        # # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
        # self.status_label.config(
            # text=f"–ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: {current_time.strftime('%H:%M:%S')}"
        # )
        
        # self.schedule_text.config(state=tk.DISABLED)

    def show_notification(self, word):
        """–ü–æ–∫–∞–∑ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è Windows"""
        try:
            notification.notify(
                title='–í—Ä–µ–º—è –∏–∑—É—á–µ–Ω–∏—è –∏—Ç–∞–ª—å—è–Ω—Å–∫–æ–≥–æ!',
                message=f'–ü–æ—Ä–∞ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å —Å–ª–æ–≤–æ: {word["word"]} ({word["translation"]})',
                app_icon=None,
                timeout=10
            )
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {e}")

    def start_auto_update(self):
        """–ó–∞–ø—É—Å–∫ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è"""
        def auto_update():
            while True:
                try:
                    if not any(isinstance(child, tk.Toplevel) for child in self.root.winfo_children()):
                        self.root.after(0, self.load_schedule)
                    time.sleep(60)  # –ø—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É
                except Exception as e:
                    print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏: {e}")
                    time.sleep(60)
        
        update_thread = threading.Thread(target=auto_update, daemon=True)
        update_thread.start()
    
    def normalize_italian_text(self, text):
        """–ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –∏—Ç–∞–ª—å—è–Ω—Å–∫–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è"""
        # –ü—Ä–∏–≤–æ–¥–∏–º –∫ –Ω–∏–∂–Ω–µ–º—É —Ä–µ–≥–∏—Å—Ç—Ä—É
        text = text.lower()
        
        # –°–ª–æ–≤–∞—Ä—å –∑–∞–º–µ–Ω —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤
        replacements = {
            '√†': 'a',
            '√®': 'e',
            '√©': 'e',
            '√¨': 'i',
            '√≠': 'i',
            '√≤': 'o',
            '√≥': 'o',
            '√π': 'u',
            '√∫': 'u',
            "'": "'",
            '`': "'",
            '¬¥': "'",
            '‚Äì': '-',  # –¥–ª–∏–Ω–Ω–æ–µ —Ç–∏—Ä–µ
            '‚Äî': '-',  # –¥–ª–∏–Ω–Ω–æ–µ —Ç–∏—Ä–µ
            '-': ' '   # –æ–±—ã—á–Ω–æ–µ —Ç–∏—Ä–µ –∑–∞–º–µ–Ω—è–µ–º –Ω–∞ –ø—Ä–æ–±–µ–ª
        }
        
        # –ü—Ä–∏–º–µ–Ω—è–µ–º –∑–∞–º–µ–Ω—ã
        for special, normal in replacements.items():
            text = text.replace(special, normal)
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–ª—É—á–∞–∏ —Å –∞–ø–æ—Å—Ç—Ä–æ—Ñ–æ–º
        text = text.replace("l'", "lo ").replace("un'", "una ")
        text = text.replace("dell'", "dello ").replace("all'", "allo ")
        text = text.replace("dall'", "dallo ").replace("sull'", "sullo ")
        
        # –£–¥–∞–ª—è–µ–º –¥–≤–æ–π–Ω—ã–µ –ø—Ä–æ–±–µ–ª—ã –∏ –ø—Ä–æ–±–µ–ª—ã –ø–æ –∫—Ä–∞—è–º
        text = ' '.join(text.split())
        
        # –£–¥–∞–ª—è–µ–º –∑–Ω–∞–∫–∏ –ø—Ä–µ–ø–∏–Ω–∞–Ω–∏—è
        punctuation = '.,;:!?"\'¬´¬ª‚Äû"'
        for p in punctuation:
            text = text.replace(p, '')
            
        return text
        
    # def normalize_italian_text(self, text):
        # """–ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –∏—Ç–∞–ª—å—è–Ω—Å–∫–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è"""
        # # –ü—Ä–∏–≤–æ–¥–∏–º –∫ –Ω–∏–∂–Ω–µ–º—É —Ä–µ–≥–∏—Å—Ç—Ä—É
        # text = text.lower()
        
        # # –°–ª–æ–≤–∞—Ä—å –∑–∞–º–µ–Ω —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤
        # replacements = {
            # '√†': 'a',
            # '√®': 'e',
            # '√©': 'e',
            # '√¨': 'i',
            # '√≠': 'i',
            # '√≤': 'o',
            # '√≥': 'o',
            # '√π': 'u',
            # '√∫': 'u',
            # "'": "'",
            # '`': "'",
            # '¬¥': "'"
        # }
        
        # # –ü—Ä–∏–º–µ–Ω—è–µ–º –∑–∞–º–µ–Ω—ã
        # for special, normal in replacements.items():
            # text = text.replace(special, normal)
        
        # # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–ª—É—á–∞–∏ —Å –∞–ø–æ—Å—Ç—Ä–æ—Ñ–æ–º
        # text = text.replace("l'", "lo ").replace("un'", "una ")
        # text = text.replace("dell'", "dello ").replace("all'", "allo ")
        # text = text.replace("dall'", "dallo ").replace("sull'", "sullo ")
        
        # # –£–¥–∞–ª—è–µ–º –¥–≤–æ–π–Ω—ã–µ –ø—Ä–æ–±–µ–ª—ã –∏ –ø—Ä–æ–±–µ–ª—ã –ø–æ –∫—Ä–∞—è–º
        # text = ' '.join(text.split())
        
        # # –£–¥–∞–ª—è–µ–º –∑–Ω–∞–∫–∏ –ø—Ä–µ–ø–∏–Ω–∞–Ω–∏—è
        # punctuation = '.,;:!?"\'¬´¬ª‚Äû"'
        # for p in punctuation:
            # text = text.replace(p, '')
            
        # return text

    def are_texts_equal(self, text1, text2):
        """–°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–æ–≤ —Å —É—á–µ—Ç–æ–º –≤–æ–∑–º–æ–∂–Ω—ã—Ö –≤–∞—Ä–∏–∞—Ü–∏–π"""
        # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –æ–±–∞ —Ç–µ–∫—Å—Ç–∞
        norm1 = self.normalize_italian_text(text1)
        norm2 = self.normalize_italian_text(text2)
        
        # –ü—Ä—è–º–æ–µ —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ –ø–æ—Å–ª–µ –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–∏
        if norm1 == norm2:
            return True
        
        # –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –±–µ–∑ –ø—Ä–æ–±–µ–ª–æ–≤
        if norm1.replace(' ', '') == norm2.replace(' ', ''):
            return True
        
        # –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ —Å–ª–æ–≤–∞ –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
        words1 = norm1.split()
        words2 = norm2.split()
        
        # –ï—Å–ª–∏ —Ä–∞–∑–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ª–æ–≤ - —Å—Ä–∞–∑—É False
        if len(words1) != len(words2):
            return False
        
        # –°–ª–æ–≤–∞—Ä—å –≤–æ–∑–º–æ–∂–Ω—ã—Ö –∑–∞–º–µ–Ω –∞—Ä—Ç–∏–∫–ª–µ–π
        article_variants = {
            'il': ['lo', 'l'],
            'lo': ['il', 'l'],
            'la': ['l'],
            'i': ['gli'],
            'gli': ['i'],
            'un': ['uno'],
            'uno': ['un'],
            'una': ['un'],
        }
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥–æ–µ —Å–ª–æ–≤–æ
        for i in range(len(words1)):
            if words1[i] != words2[i]:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å–ª–æ–≤–æ –∞—Ä—Ç–∏–∫–ª–µ–º
                if words1[i] in article_variants and words2[i] in article_variants[words1[i]]:
                    continue
                if words2[i] in article_variants and words1[i] in article_variants[words2[i]]:
                    continue
                return False
        
        return True

    def check_answer_with_variants(self, user_answer, correct_answer, alternatives):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ç–≤–µ—Ç–∞ —Å —É—á–µ—Ç–æ–º –≤—Å–µ—Ö –≤–æ–∑–º–æ–∂–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤"""
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π –æ—Ç–≤–µ—Ç
        if self.are_texts_equal(user_answer, correct_answer):
            return True
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã
        for alt in alternatives:
            if self.are_texts_equal(user_answer, alt):
                return True
        
        return False

    def create_review_window(self, words_to_review):
        """–°–æ–∑–¥–∞–Ω–∏–µ –æ–∫–Ω–∞ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è"""
        review_window = tk.Toplevel(self.root)
        review_window.title("–ü–æ–≤—Ç–æ—Ä–µ–Ω–∏–µ —Å–ª–æ–≤")
        review_window.geometry("800x600")
        review_window.transient(self.root)
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ñ–æ–Ω–∞
        review_window.configure(bg=self.colors["background"])
        
        # –¶–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–∫–Ω–∞
        review_window.update_idletasks()
        width = review_window.winfo_width()
        height = review_window.winfo_height()
        x = (review_window.winfo_screenwidth() // 2) - (width // 2)
        y = (review_window.winfo_screenheight() // 2) - (height // 2)
        review_window.geometry(f'{width}x{height}+{x}+{y}')
        
        # –û—Å–Ω–æ–≤–Ω–æ–π —Ñ—Ä–µ–π–º
        main_frame = ttk.Frame(review_window, padding="20")
        main_frame.grid(row=0, column=0, sticky=(tk.W, tk.E, tk.N, tk.S))
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è
        review_window.columnconfigure(0, weight=1)
        review_window.rowconfigure(0, weight=1)
        main_frame.columnconfigure(0, weight=1)
        main_frame.rowconfigure(2, weight=1)
        
        return review_window, main_frame
     
    def show_exercise(self, current_word_index, words_to_review, exercise_frame, progress_label, stats_label=None):
        """–ü–æ–∫–∞–∑ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ —Å–ª–æ–≤–∞"""
        # –û—á–∏—â–∞–µ–º —Ñ—Ä–µ–π–º
        for widget in exercise_frame.winfo_children():
            widget.destroy()

        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ —Å–ª–æ–≤–æ
        word_info = words_to_review[current_word_index["value"]]
        word = word_info["word"]
        data = word_info["data"]
        example = random.choice(data["–ø—Ä–∏–º–µ—Ä—ã"])
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–µ—Ä–µ–≤–æ–¥–∞
        if self.translation_direction.get() == "ru_to_it":
            question = example["—Ä—É—Å—Å–∫–∏–π"]
            correct_answer = example["–∏—Ç–∞–ª—å—è–Ω—Å–∫–∏–π"]
            alternatives = example.get("–∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤—ã_–∏—Ç", [])
        else:
            question = example["–∏—Ç–∞–ª—å—è–Ω—Å–∫–∏–π"]
            correct_answer = example["—Ä—É—Å—Å–∫–∏–π"]
            alternatives = example.get("–∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤—ã_—Ä—É—Å", [])

        # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
        if progress_label:
            progress_label.config(
                text=f"–°–ª–æ–≤–æ {current_word_index['value'] + 1} –∏–∑ {len(words_to_review)}"
            )

        # –°–æ–∑–¥–∞–µ–º –≤–∏–¥–∂–µ—Ç—ã
        exercise_container = ttk.Frame(exercise_frame, padding="20")
        exercise_container.pack(fill=tk.BOTH, expand=True)
        
        # –°–ª–æ–≤–æ –∏ –µ–≥–æ –ø–µ—Ä–µ–≤–æ–¥
        word_frame = ttk.Frame(exercise_container)
        word_frame.pack(fill=tk.X, pady=(0, 20))
        
        word_label = ttk.Label(
            word_frame,
            text=word,
            font=('Helvetica', 16, 'bold'),
            foreground=self.colors["primary"]
        )
        word_label.pack(side=tk.LEFT, padx=5)
        
        translation_label = ttk.Label(
            word_frame,
            text=f"- {data['–ø–µ—Ä–µ–≤–æ–¥']}",
            font=('Helvetica', 14)
        )
        translation_label.pack(side=tk.LEFT)

        # –ó–∞–¥–∞–Ω–∏–µ
        task_frame = ttk.LabelFrame(
            exercise_container,
            text="–ó–∞–¥–∞–Ω–∏–µ",
            padding="10"
        )
        task_frame.pack(fill=tk.X, pady=(0, 20))
        
        ttk.Label(
            task_frame,
            text="–ü–µ—Ä–µ–≤–µ–¥–∏—Ç–µ:",
            font=('Helvetica', 11),
            foreground=self.colors["primary"]  # –°–¥–µ–ª–∞–ª–∏ —Å–∏–Ω–∏–º
        ).pack()
        
        ttk.Label(
            task_frame,
            text=question,
            font=('Helvetica', 12, 'bold'),
            wraplength=600
        ).pack(pady=(5, 0))

        # –ü–æ–ª–µ –≤–≤–æ–¥–∞
        entry_frame = ttk.Frame(exercise_container)
        entry_frame.pack(fill=tk.X, pady=(0, 10))
        
        answer_var = tk.StringVar()
        answer_entry = ttk.Entry(
            entry_frame,
            textvariable=answer_var,
            font=('Helvetica', 12),
            width=50
        )
        answer_entry.pack(pady=(0, 10))
        answer_entry.focus()

        # –û–±–ª–∞—Å—Ç—å –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏
        feedback_frame = ttk.Frame(exercise_container)
        feedback_frame.pack(fill=tk.X, pady=(0, 20))
        
        feedback_text = tk.Text(
            feedback_frame,
            height=4,
            width=50,
            wrap=tk.WORD,
            font=('Helvetica', 11),
            borderwidth=1,
            relief="solid",
            padx=10,
            pady=5
        )
        feedback_text.pack(fill=tk.X)
        feedback_text.config(state=tk.DISABLED)

        def check_answer(event=None):
            """–ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ç–≤–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
            user_answer = answer_var.get().strip()
            
            feedback_text.config(state=tk.NORMAL)
            feedback_text.delete(1.0, tk.END)
            
            if self.check_answer_with_variants(user_answer, correct_answer, alternatives):
                # –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç
                feedback_text.insert(tk.END, "‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ!\n", "correct")
                feedback_text.insert(tk.END, f"\n–í–∞—à –æ—Ç–≤–µ—Ç: {user_answer}", "user_answer")
                
                # –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫—É "–î–∞–ª–µ–µ"
                next_button.config(state=tk.NORMAL)
                
                # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –ø—Ä–∏–≤—è–∑–∫–∏ Enter
                answer_entry.unbind('<Return>')
                
                # –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è
                def go_to_next(event=None):
                    if next_button['state'] == 'normal':  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∞–∫—Ç–∏–≤–Ω–∞ –ª–∏ –∫–Ω–æ–ø–∫–∞
                        self.next_exercise(
                            current_word_index,
                            words_to_review,
                            exercise_frame,
                            progress_label,
                            stats_label
                        )
                
                # –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ–º Enter –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—é —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞
                exercise_frame.bind('<Return>', go_to_next)
                
                # –î–µ–∞–∫—Ç–∏–≤–∏—Ä—É–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã
                answer_entry.config(state=tk.DISABLED)
                check_button.config(state=tk.DISABLED)
                hint_button.config(state=tk.DISABLED)
                
                # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–æ–∫—É—Å –Ω–∞ –∫–Ω–æ–ø–∫—É "–î–∞–ª–µ–µ"
                next_button.focus_set()
            else:
                # –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç
                feedback_text.insert(tk.END, "‚ùå –û—à–∏–±–∫–∞ –≤ –æ—Ç–≤–µ—Ç–µ:\n\n", "error")
                
                # –†–∞–∑–±–∏–≤–∞–µ–º –æ—Ç–≤–µ—Ç—ã –Ω–∞ —Å–ª–æ–≤–∞
                user_words = user_answer.split()
                correct_words = correct_answer.split()
                
                # –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º —Å–ª–æ–≤–æ –∑–∞ —Å–ª–æ–≤–æ–º
                feedback_text.insert(tk.END, "–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ —Å–ª–æ–≤–∞–º:\n", "label")
                for i, user_word in enumerate(user_words):
                    if i < len(correct_words):
                        # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º —Å–ª–æ–≤–∞ –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
                        norm_user = self.normalize_italian_text(user_word)
                        norm_correct = self.normalize_italian_text(correct_words[i])
                        
                        if norm_user == norm_correct:
                            feedback_text.insert(tk.END, f"{user_word} ‚úì  ", "correct_word")
                        else:
                            feedback_text.insert(tk.END, f"{user_word} ‚ùå ", "wrong_word")
                            feedback_text.insert(tk.END, f"(–æ–∂–∏–¥–∞–µ—Ç—Å—è: {correct_words[i]})\n", "hint")
                    else:
                        feedback_text.insert(tk.END, f"{user_word} ‚ùå (–ª–∏—à–Ω–µ–µ —Å–ª–æ–≤–æ)\n", "wrong_word")
                
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã–µ —Å–ª–æ–≤–∞
                if len(correct_words) > len(user_words):
                    feedback_text.insert(tk.END, "\n–ü—Ä–æ–ø—É—â–µ–Ω—ã —Å–ª–æ–≤–∞: ", "label")
                    for i in range(len(user_words), len(correct_words)):
                        feedback_text.insert(tk.END, f"{correct_words[i]} ", "missing_word")
                
                feedback_text.insert(tk.END, "\n\n–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç: ", "label")
                feedback_text.insert(tk.END, correct_answer, "correct_answer")

            # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ç–µ–≥–æ–≤ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
            feedback_text.tag_config("correct", foreground=self.colors["success"], font=('Helvetica', 11, 'bold'))
            feedback_text.tag_config("error", foreground=self.colors["error"], font=('Helvetica', 11, 'bold'))
            feedback_text.tag_config("label", foreground=self.colors["text"])
            feedback_text.tag_config("user_answer", foreground=self.colors["primary"])
            feedback_text.tag_config("correct_word", foreground=self.colors["success"])
            feedback_text.tag_config("wrong_word", foreground=self.colors["error"])
            feedback_text.tag_config("missing_word", foreground=self.colors["warning"])
            feedback_text.tag_config("hint", foreground=self.colors["secondary_text"])
            feedback_text.tag_config("correct_answer", foreground=self.colors["success"])
            
            feedback_text.config(state=tk.DISABLED)

        def show_hint():
            """–ü–æ–∫–∞–∑ –ø–æ–¥—Å–∫–∞–∑–∫–∏"""
            words = correct_answer.split()
            hint = ' '.join(word[0] + '_' * (len(word)-1) for word in words)
            
            feedback_text.config(state=tk.NORMAL)
            feedback_text.delete(1.0, tk.END)
            feedback_text.insert(tk.END, "üí° –ü–æ–¥—Å–∫–∞–∑–∫–∞:\n", "hint_title")
            feedback_text.insert(tk.END, hint, "hint_text")
            
            feedback_text.tag_config("hint_title", foreground=self.colors["hint"], font=('Helvetica', 11, 'bold'))
            feedback_text.tag_config("hint_text", foreground=self.colors["secondary_text"])
            
            feedback_text.config(state=tk.DISABLED)

        # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        button_frame = ttk.Frame(exercise_container)
        button_frame.pack(fill=tk.X, pady=(0, 10))

        check_button = ttk.Button(
            button_frame,
            text="‚úì –ü—Ä–æ–≤–µ—Ä–∏—Ç—å",
            command=check_answer,
            width=15,
            style="Check.TButton"
        )
        check_button.pack(side=tk.LEFT, padx=5)
        
        hint_button = ttk.Button(
            button_frame,
            text="üí° –ü–æ–¥—Å–∫–∞–∑–∫–∞",
            command=show_hint,
            width=15,
            style="Hint.TButton"
        )
        hint_button.pack(side=tk.LEFT, padx=5)
        
        next_button = ttk.Button(
            button_frame,
            text="‚û°Ô∏è –î–∞–ª–µ–µ",
            command=lambda: self.next_exercise(
                current_word_index,
                words_to_review,
                exercise_frame,
                progress_label,
                stats_label
            ),
            state=tk.DISABLED,
            width=15,
            style="Main.TButton"
        )
        next_button.pack(side=tk.LEFT, padx=5)

        # –ò—Å—Ö–æ–¥–Ω–∞—è –ø—Ä–∏–≤—è–∑–∫–∞ Enter –∫ –ø—Ä–æ–≤–µ—Ä–∫–µ –æ—Ç–≤–µ—Ç–∞
        answer_entry.bind('<Return>', check_answer)

        # –ì–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ–º, —á—Ç–æ –∫–Ω–æ–ø–∫–∏ –±—É–¥—É—Ç –≤–∏–¥–∏–º—ã–º–∏
        button_frame.update_idletasks()
        
    # def show_exercise(self, current_word_index, words_to_review, exercise_frame, progress_label, stats_label=None):
        # """–ü–æ–∫–∞–∑ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ —Å–ª–æ–≤–∞"""
        # # –û—á–∏—â–∞–µ–º —Ñ—Ä–µ–π–º
        # for widget in exercise_frame.winfo_children():
            # widget.destroy()

        # # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ —Å–ª–æ–≤–æ
        # word_info = words_to_review[current_word_index["value"]]
        # word = word_info["word"]
        # data = word_info["data"]
        # example = random.choice(data["–ø—Ä–∏–º–µ—Ä—ã"])
        
        # # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–µ—Ä–µ–≤–æ–¥–∞
        # if self.translation_direction.get() == "ru_to_it":
            # question = example["—Ä—É—Å—Å–∫–∏–π"]
            # correct_answer = example["–∏—Ç–∞–ª—å—è–Ω—Å–∫–∏–π"]
            # alternatives = example.get("–∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤—ã_–∏—Ç", [])
        # else:
            # question = example["–∏—Ç–∞–ª—å—è–Ω—Å–∫–∏–π"]
            # correct_answer = example["—Ä—É—Å—Å–∫–∏–π"]
            # alternatives = example.get("–∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤—ã_—Ä—É—Å", [])

        # # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
        # if progress_label:
            # progress_label.config(
                # text=f"–°–ª–æ–≤–æ {current_word_index['value'] + 1} –∏–∑ {len(words_to_review)}"
            # )

        # # –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è
        # exercise_container = ttk.Frame(exercise_frame, padding="20")
        # exercise_container.pack(fill=tk.BOTH, expand=True)

        # # –°–ª–æ–≤–æ –∏ –ø–µ—Ä–µ–≤–æ–¥
        # word_frame = ttk.Frame(exercise_container)
        # word_frame.pack(fill=tk.X, pady=(0, 20))
        
        # word_label = ttk.Label(
            # word_frame,
            # text=word,
            # font=('Helvetica', 16, 'bold'),
            # foreground=self.colors["primary"]
        # )
        # word_label.pack(side=tk.LEFT, padx=5)
        
        # translation_label = ttk.Label(
            # word_frame,
            # text=f"- {data['–ø–µ—Ä–µ–≤–æ–¥']}",
            # font=('Helvetica', 14)
        # )
        # translation_label.pack(side=tk.LEFT)

        # # # –ó–∞–¥–∞–Ω–∏–µ
        # # task_frame = ttk.LabelFrame(
            # # exercise_container,
            # # text="–ó–∞–¥–∞–Ω–∏–µ",
            # # padding="10"
        # # )
        # # task_frame.pack(fill=tk.X, pady=(0, 20))
        
        # # ttk.Label(
            # # task_frame,
            # # text="–ü–µ—Ä–µ–≤–µ–¥–∏—Ç–µ:",
            # # font=('Helvetica', 11)
        # # ).pack()
        
        # # ttk.Label(
            # # task_frame,
            # # text=question,
            # # font=('Helvetica', 12, 'bold'),
            # # wraplength=600
        # # ).pack(pady=(5, 0))
        
        # # –ó–∞–¥–∞–Ω–∏–µ
        # task_frame = ttk.LabelFrame(
            # exercise_container,
            # text="–ó–∞–¥–∞–Ω–∏–µ",
            # padding="10"
        # )
        # task_frame.pack(fill=tk.X, pady=(0, 20))
        
        # ttk.Label(
            # task_frame,
            # text="–ü–µ—Ä–µ–≤–µ–¥–∏—Ç–µ:",
            # font=('Helvetica', 11, 'bold'),  # –î–æ–±–∞–≤–∏–ª bold
            # foreground=self.colors["primary"]  # –¢–µ–ø–µ—Ä—å —Å–∏–Ω–∏–π —Ü–≤–µ—Ç
        # ).pack()
        
        # ttk.Label(
            # task_frame,
            # text=question,
            # font=('Helvetica', 12, 'bold'),
            # wraplength=600
        # ).pack(pady=(5, 0))
        
        # # –ü–æ–ª–µ –≤–≤–æ–¥–∞
        # entry_frame = ttk.Frame(exercise_container)
        # entry_frame.pack(fill=tk.X, pady=(0, 10))
        
        # answer_var = tk.StringVar()
        # answer_entry = ttk.Entry(
            # entry_frame,
            # textvariable=answer_var,
            # font=('Helvetica', 12),
            # width=50
        # )
        # answer_entry.pack(pady=(0, 10))
        # answer_entry.focus()

        # # –û–±–ª–∞—Å—Ç—å –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏
        # feedback_frame = ttk.Frame(exercise_container)
        # feedback_frame.pack(fill=tk.X, pady=(0, 20))
        
        # feedback_text = tk.Text(
            # feedback_frame,
            # height=4,
            # width=50,
            # wrap=tk.WORD,
            # font=('Helvetica', 11),
            # borderwidth=1,
            # relief="solid",
            # padx=10,
            # pady=5
        # )
        # feedback_text.pack(fill=tk.X)
        # feedback_text.config(state=tk.DISABLED)

        def check_answer(event=None):
            """–ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ç–≤–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
            user_answer = answer_var.get().strip()
            
            feedback_text.config(state=tk.NORMAL)
            feedback_text.delete(1.0, tk.END)
            
            if self.check_answer_with_variants(user_answer, correct_answer, alternatives):
                # –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç
                feedback_text.insert(tk.END, "‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ!\n", "correct")
                feedback_text.insert(tk.END, f"\n–í–∞—à –æ—Ç–≤–µ—Ç: {user_answer}", "user_answer")
                
                # –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫—É "–î–∞–ª–µ–µ"
                next_button.config(state=tk.NORMAL)
                
                # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –ø—Ä–∏–≤—è–∑–∫–∏ Enter
                answer_entry.unbind('<Return>')
                
                # –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è
                def go_to_next(event=None):
                    if next_button['state'] == 'normal':  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∞–∫—Ç–∏–≤–Ω–∞ –ª–∏ –∫–Ω–æ–ø–∫–∞
                        self.next_exercise(
                            current_word_index,
                            words_to_review,
                            exercise_frame,
                            progress_label,
                            stats_label
                        )
                
                # –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ–º Enter –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—é —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞
                exercise_frame.bind('<Return>', go_to_next)
                
                # –î–µ–∞–∫—Ç–∏–≤–∏—Ä—É–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã
                answer_entry.config(state=tk.DISABLED)
                check_button.config(state=tk.DISABLED)
                hint_button.config(state=tk.DISABLED)
                
                # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–æ–∫—É—Å –Ω–∞ –∫–Ω–æ–ø–∫—É "–î–∞–ª–µ–µ"
                next_button.focus_set()
            else:
                # –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç
                feedback_text.insert(tk.END, "‚ùå –û—à–∏–±–∫–∞ –≤ –æ—Ç–≤–µ—Ç–µ:\n\n", "error")
                
                # –†–∞–∑–±–∏–≤–∞–µ–º –æ—Ç–≤–µ—Ç—ã –Ω–∞ —Å–ª–æ–≤–∞
                user_words = user_answer.split()
                correct_words = correct_answer.split()
                
                # –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º —Å–ª–æ–≤–æ –∑–∞ —Å–ª–æ–≤–æ–º
                feedback_text.insert(tk.END, "–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ —Å–ª–æ–≤–∞–º:\n", "label")
                for i, user_word in enumerate(user_words):
                    if i < len(correct_words):
                        # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º —Å–ª–æ–≤–∞ –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
                        norm_user = self.normalize_italian_text(user_word)
                        norm_correct = self.normalize_italian_text(correct_words[i])
                        
                        if norm_user == norm_correct:
                            feedback_text.insert(tk.END, f"{user_word} ‚úì  ", "correct_word")
                        else:
                            feedback_text.insert(tk.END, f"{user_word} ‚ùå ", "wrong_word")
                            feedback_text.insert(tk.END, f"(–æ–∂–∏–¥–∞–µ—Ç—Å—è: {correct_words[i]})\n", "hint")
                    else:
                        feedback_text.insert(tk.END, f"{user_word} ‚ùå (–ª–∏—à–Ω–µ–µ —Å–ª–æ–≤–æ)\n", "wrong_word")
                
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã–µ —Å–ª–æ–≤–∞
                if len(correct_words) > len(user_words):
                    feedback_text.insert(tk.END, "\n–ü—Ä–æ–ø—É—â–µ–Ω—ã —Å–ª–æ–≤–∞: ", "label")
                    for i in range(len(user_words), len(correct_words)):
                        feedback_text.insert(tk.END, f"{correct_words[i]} ", "missing_word")
                
                feedback_text.insert(tk.END, "\n\n–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç: ", "label")
                feedback_text.insert(tk.END, correct_answer, "correct_answer")

            # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ç–µ–≥–æ–≤ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
            feedback_text.tag_config("correct", foreground=self.colors["success"], font=('Helvetica', 11, 'bold'))
            feedback_text.tag_config("error", foreground=self.colors["error"], font=('Helvetica', 11, 'bold'))
            feedback_text.tag_config("label", foreground=self.colors["text"])
            feedback_text.tag_config("user_answer", foreground=self.colors["primary"])
            feedback_text.tag_config("correct_word", foreground=self.colors["success"])
            feedback_text.tag_config("wrong_word", foreground=self.colors["error"])
            feedback_text.tag_config("missing_word", foreground=self.colors["warning"])
            feedback_text.tag_config("hint", foreground=self.colors["secondary_text"])
            feedback_text.tag_config("correct_answer", foreground=self.colors["success"])
            
            feedback_text.config(state=tk.DISABLED)
        # def check_answer(event=None):
            # """–ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ç–≤–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
            # user_answer = answer_var.get().strip()
            
            # feedback_text.config(state=tk.NORMAL)
            # feedback_text.delete(1.0, tk.END)
            
            # if self.check_answer_with_variants(user_answer, correct_answer, alternatives):
                # # –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç
                # feedback_text.insert(tk.END, "‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ!\n", "correct")
                # feedback_text.insert(tk.END, f"\n–í–∞—à –æ—Ç–≤–µ—Ç: {user_answer}", "user_answer")
                
                # # –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫—É "–î–∞–ª–µ–µ"
                # next_button.config(state=tk.NORMAL)
                
                # # –û—Ç–∫–ª—é—á–∞–µ–º –≤—Å–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –ø—Ä–∏–≤—è–∑–∫–∏ Enter
                # exercise_container.unbind_all('<Return>')
                # answer_entry.unbind_all('<Return>')
                
                # # –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ Enter
                # def next_on_enter(event):
                    # self.next_exercise(
                        # current_word_index,
                        # words_to_review,
                        # exercise_frame,
                        # progress_label,
                        # stats_label
                    # )
                
                # # –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ–º Enter –∫–æ –≤—Å–µ–º –≤–æ–∑–º–æ–∂–Ω—ã–º –≤–∏–¥–∂–µ—Ç–∞–º
                # exercise_container.bind_all('<Return>', next_on_enter)
                
                # # –î–µ–∞–∫—Ç–∏–≤–∏—Ä—É–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã
                # answer_entry.config(state=tk.DISABLED)
                # check_button.config(state=tk.DISABLED)
                # hint_button.config(state=tk.DISABLED)
                
                # # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–æ–∫—É—Å –Ω–∞ –∫–Ω–æ–ø–∫—É "–î–∞–ª–µ–µ"
                # next_button.focus_set()
            # else:
                # # –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç
                # feedback_text.insert(tk.END, "‚ùå –û—à–∏–±–∫–∞ –≤ –æ—Ç–≤–µ—Ç–µ:\n\n", "error")
                
                # # –†–∞–∑–±–∏–≤–∞–µ–º –æ—Ç–≤–µ—Ç—ã –Ω–∞ —Å–ª–æ–≤–∞
                # user_words = user_answer.split()
                # correct_words = correct_answer.split()
                
                # # –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º —Å–ª–æ–≤–æ –∑–∞ —Å–ª–æ–≤–æ–º
                # feedback_text.insert(tk.END, "–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ —Å–ª–æ–≤–∞–º:\n", "label")
                # for i, user_word in enumerate(user_words):
                    # if i < len(correct_words):
                        # # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º —Å–ª–æ–≤–∞ –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
                        # norm_user = self.normalize_italian_text(user_word)
                        # norm_correct = self.normalize_italian_text(correct_words[i])
                        
                        # if norm_user == norm_correct:
                            # feedback_text.insert(tk.END, f"{user_word} ‚úì  ", "correct_word")
                        # else:
                            # feedback_text.insert(tk.END, f"{user_word} ‚ùå ", "wrong_word")
                            # feedback_text.insert(tk.END, f"(–æ–∂–∏–¥–∞–µ—Ç—Å—è: {correct_words[i]})\n", "hint")
                    # else:
                        # feedback_text.insert(tk.END, f"{user_word} ‚ùå (–ª–∏—à–Ω–µ–µ —Å–ª–æ–≤–æ)\n", "wrong_word")
                
                # # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã–µ —Å–ª–æ–≤–∞
                # if len(correct_words) > len(user_words):
                    # feedback_text.insert(tk.END, "\n–ü—Ä–æ–ø—É—â–µ–Ω—ã —Å–ª–æ–≤–∞: ", "label")
                    # for i in range(len(user_words), len(correct_words)):
                        # feedback_text.insert(tk.END, f"{correct_words[i]} ", "missing_word")
                
                # feedback_text.insert(tk.END, "\n\n–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç: ", "label")
                # feedback_text.insert(tk.END, correct_answer, "correct_answer")

            # # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ç–µ–≥–æ–≤ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
            # feedback_text.tag_config("correct", foreground=self.colors["success"], font=('Helvetica', 11, 'bold'))
            # feedback_text.tag_config("error", foreground=self.colors["error"], font=('Helvetica', 11, 'bold'))
            # feedback_text.tag_config("label", foreground=self.colors["text"])
            # feedback_text.tag_config("user_answer", foreground=self.colors["primary"])
            # feedback_text.tag_config("correct_word", foreground=self.colors["success"])
            # feedback_text.tag_config("wrong_word", foreground=self.colors["error"])
            # feedback_text.tag_config("missing_word", foreground=self.colors["warning"])
            # feedback_text.tag_config("hint", foreground=self.colors["secondary_text"])
            # feedback_text.tag_config("correct_answer", foreground=self.colors["success"])
            
            # feedback_text.config(state=tk.DISABLED)
        # # def check_answer(event=None):
            # """–ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ç–≤–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
            # user_answer = answer_var.get().strip()
            
            # feedback_text.config(state=tk.NORMAL)
            # feedback_text.delete(1.0, tk.END)
            
            # if self.check_answer_with_variants(user_answer, correct_answer, alternatives):
                # # –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç
                # feedback_text.insert(tk.END, "‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ!\n", "correct")
                # feedback_text.insert(tk.END, f"\n–í–∞—à –æ—Ç–≤–µ—Ç: {user_answer}", "user_answer")
                
                # # –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫—É "–î–∞–ª–µ–µ"
                # next_button.config(state=tk.NORMAL)
                
                # # –û—Ç–∫–ª—é—á–∞–µ–º Enter –¥–ª—è –ø–æ–ª—è –≤–≤–æ–¥–∞ –∏ –≤–∫–ª—é—á–∞–µ–º –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–î–∞–ª–µ–µ"
                # answer_entry.unbind('<Return>')
                # exercise_frame.focus_set()
                # exercise_frame.bind('<Return>', lambda e: next_button.invoke())
                
                # # –î–µ–∞–∫—Ç–∏–≤–∏—Ä—É–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã
                # answer_entry.config(state=tk.DISABLED)
                # check_button.config(state=tk.DISABLED)
                # hint_button.config(state=tk.DISABLED)
                
                # # –§–æ–∫—É—Å –Ω–∞ –∫–Ω–æ–ø–∫—É "–î–∞–ª–µ–µ"
                # next_button.focus_set()
            # else:
                # # –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç
                # feedback_text.insert(tk.END, "‚ùå –û—à–∏–±–∫–∞ –≤ –æ—Ç–≤–µ—Ç–µ:\n\n", "error")
                
                # # –†–∞–∑–±–∏–≤–∞–µ–º –æ—Ç–≤–µ—Ç—ã –Ω–∞ —Å–ª–æ–≤–∞
                # user_words = user_answer.split()
                # correct_words = correct_answer.split()
                
                # # –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º —Å–ª–æ–≤–æ –∑–∞ —Å–ª–æ–≤–æ–º
                # feedback_text.insert(tk.END, "–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ —Å–ª–æ–≤–∞–º:\n", "label")
                # for i, user_word in enumerate(user_words):
                    # if i < len(correct_words):
                        # # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º —Å–ª–æ–≤–∞ –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
                        # norm_user = self.normalize_italian_text(user_word)
                        # norm_correct = self.normalize_italian_text(correct_words[i])
                        
                        # if norm_user == norm_correct:
                            # feedback_text.insert(tk.END, f"{user_word} ‚úì  ", "correct_word")
                        # else:
                            # feedback_text.insert(tk.END, f"{user_word} ‚ùå ", "wrong_word")
                            # feedback_text.insert(tk.END, f"(–æ–∂–∏–¥–∞–µ—Ç—Å—è: {correct_words[i]})\n", "hint")
                    # else:
                        # feedback_text.insert(tk.END, f"{user_word} ‚ùå (–ª–∏—à–Ω–µ–µ —Å–ª–æ–≤–æ)\n", "wrong_word")
                
                # # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã–µ —Å–ª–æ–≤–∞
                # if len(correct_words) > len(user_words):
                    # feedback_text.insert(tk.END, "\n–ü—Ä–æ–ø—É—â–µ–Ω—ã —Å–ª–æ–≤–∞: ", "label")
                    # for i in range(len(user_words), len(correct_words)):
                        # feedback_text.insert(tk.END, f"{correct_words[i]} ", "missing_word")
                
                # feedback_text.insert(tk.END, "\n\n–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç: ", "label")
                # feedback_text.insert(tk.END, correct_answer, "correct_answer")

            # # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ç–µ–≥–æ–≤ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
            # feedback_text.tag_config("correct", foreground=self.colors["success"], font=('Helvetica', 11, 'bold'))
            # feedback_text.tag_config("error", foreground=self.colors["error"], font=('Helvetica', 11, 'bold'))
            # feedback_text.tag_config("label", foreground=self.colors["text"])
            # feedback_text.tag_config("user_answer", foreground=self.colors["primary"])
            # feedback_text.tag_config("correct_word", foreground=self.colors["success"])
            # feedback_text.tag_config("wrong_word", foreground=self.colors["error"])
            # feedback_text.tag_config("missing_word", foreground=self.colors["warning"])
            # feedback_text.tag_config("hint", foreground=self.colors["secondary_text"])
            # feedback_text.tag_config("correct_answer", foreground=self.colors["success"])
            
            # feedback_text.config(state=tk.DISABLED)
        # def check_answer(event=None):
            # """–ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ç–≤–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
            # user_answer = answer_var.get().strip()
            
            # feedback_text.config(state=tk.NORMAL)
            # feedback_text.delete(1.0, tk.END)
            
            # if self.check_answer_with_variants(user_answer, correct_answer, alternatives):
                # # –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç
                # feedback_text.insert(tk.END, "‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ!\n", "correct")
                # feedback_text.insert(tk.END, f"\n–í–∞—à –æ—Ç–≤–µ—Ç: {user_answer}", "user_answer")
                
                # # –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫—É "–î–∞–ª–µ–µ"
                # next_button.config(state=tk.NORMAL)
                
                # # –û—Ç–≤—è–∑—ã–≤–∞–µ–º Enter –æ—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ—Ç–≤–µ—Ç–∞
                # answer_entry.unbind('<Return>')
                
                # # –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ–º Enter –∫ –∫–Ω–æ–ø–∫–µ "–î–∞–ª–µ–µ"
                # def handle_enter(event):
                    # if next_button['state'] == 'normal':
                        # self.next_exercise(
                            # current_word_index,
                            # words_to_review,
                            # exercise_frame,
                            # progress_label,
                            # stats_label
                        # )
                
                # exercise_frame.focus_set()
                # exercise_frame.bind('<Return>', handle_enter)
                
                # # –î–µ–∞–∫—Ç–∏–≤–∏—Ä—É–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã
                # answer_entry.config(state=tk.DISABLED)
                # check_button.config(state=tk.DISABLED)
                # hint_button.config(state=tk.DISABLED)
                
                # # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–æ–∫—É—Å –Ω–∞ –∫–Ω–æ–ø–∫—É "–î–∞–ª–µ–µ"
                # next_button.focus_set()
            # # else:
                # # # ... –æ—Å—Ç–∞–ª—å–Ω–æ–π –∫–æ–¥ –¥–ª—è –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞ ...

        # # # –ü—Ä–∏–≤—è–∑–∫–∞ Enter –∫ –ø—Ä–æ–≤–µ—Ä–∫–µ –æ—Ç–≤–µ—Ç–∞ –∏–∑–Ω–∞—á–∞–ª—å–Ω–æ
        # # answer_entry.bind('<Return>', check_answer)
        
        # # def check_answer(event=None):
            # # """–ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ç–≤–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
            # # user_answer = answer_var.get().strip()
            
            # # feedback_text.config(state=tk.NORMAL)
            # # feedback_text.delete(1.0, tk.END)
            
            # # if self.check_answer_with_variants(user_answer, correct_answer, alternatives):
                # # # –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç
                # # feedback_text.insert(tk.END, "‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ!\n", "correct")
                # # feedback_text.insert(tk.END, f"\n–í–∞—à –æ—Ç–≤–µ—Ç: {user_answer}", "user_answer")
                
                # # # –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫—É "–î–∞–ª–µ–µ" –∏ –ø–µ—Ä–µ–∫–ª—é—á–∞–µ–º –Ω–∞ –Ω–µ—ë —Ñ–æ–∫—É—Å
                # # next_button.config(state=tk.NORMAL)
                # # next_button.focus_set()
                
                # # # –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ–º Enter –∫ –∫–Ω–æ–ø–∫–µ "–î–∞–ª–µ–µ"
                # # exercise_frame.bind('<Return>', lambda e: next_button.invoke())
                
                # # answer_entry.config(state=tk.DISABLED)
                # # check_button.config(state=tk.DISABLED)
                # # hint_button.config(state=tk.DISABLED)
        # # def check_answer(event=None):
            # # """–ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ç–≤–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
            # # user_answer = answer_var.get().strip()
            
            # # feedback_text.config(state=tk.NORMAL)
            # # feedback_text.delete(1.0, tk.END)
            
            # # if self.check_answer_with_variants(user_answer, correct_answer, alternatives):
                # # # –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç
                # # feedback_text.insert(tk.END, "‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ!\n", "correct")
                # # feedback_text.insert(tk.END, f"\n–í–∞—à –æ—Ç–≤–µ—Ç: {user_answer}", "user_answer")
                
                # # # –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫—É "–î–∞–ª–µ–µ"
                # # next_button.config(state=tk.NORMAL)
                # # next_button.focus_set()
                
                # # # –î–µ–∞–∫—Ç–∏–≤–∏—Ä—É–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã
                # # answer_entry.config(state=tk.DISABLED)
                # # check_button.config(state=tk.DISABLED)
                # # hint_button.config(state=tk.DISABLED)
            # else:
                # # –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç
                # feedback_text.insert(tk.END, "‚ùå –û—à–∏–±–∫–∞ –≤ –æ—Ç–≤–µ—Ç–µ:\n\n", "error")
                
                # # –†–∞–∑–±–∏–≤–∞–µ–º –æ—Ç–≤–µ—Ç—ã –Ω–∞ —Å–ª–æ–≤–∞
                # user_words = user_answer.split()
                # correct_words = correct_answer.split()
                
                # # –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º —Å–ª–æ–≤–æ –∑–∞ —Å–ª–æ–≤–æ–º
                # feedback_text.insert(tk.END, "–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ —Å–ª–æ–≤–∞–º:\n", "label")
                # for i, user_word in enumerate(user_words):
                    # if i < len(correct_words):
                        # # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º —Å–ª–æ–≤–∞ –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
                        # norm_user = self.normalize_italian_text(user_word)
                        # norm_correct = self.normalize_italian_text(correct_words[i])
                        
                        # if norm_user == norm_correct:
                            # feedback_text.insert(tk.END, f"{user_word} ‚úì  ", "correct_word")
                        # else:
                            # feedback_text.insert(tk.END, f"{user_word} ‚ùå ", "wrong_word")
                            # feedback_text.insert(tk.END, f"(–æ–∂–∏–¥–∞–µ—Ç—Å—è: {correct_words[i]})\n", "hint")
                    # else:
                        # feedback_text.insert(tk.END, f"{user_word} ‚ùå (–ª–∏—à–Ω–µ–µ —Å–ª–æ–≤–æ)\n", "wrong_word")
                
                # # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã–µ —Å–ª–æ–≤–∞
                # if len(correct_words) > len(user_words):
                    # feedback_text.insert(tk.END, "\n–ü—Ä–æ–ø—É—â–µ–Ω—ã —Å–ª–æ–≤–∞: ", "label")
                    # for i in range(len(user_words), len(correct_words)):
                        # feedback_text.insert(tk.END, f"{correct_words[i]} ", "missing_word")
                
                # feedback_text.insert(tk.END, "\n\n–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç: ", "label")
                # feedback_text.insert(tk.END, correct_answer, "correct_answer")

            # # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ç–µ–≥–æ–≤ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
            # feedback_text.tag_config("correct", foreground=self.colors["success"], font=('Helvetica', 11, 'bold'))
            # feedback_text.tag_config("error", foreground=self.colors["error"], font=('Helvetica', 11, 'bold'))
            # feedback_text.tag_config("label", foreground=self.colors["text"])
            # feedback_text.tag_config("user_answer", foreground=self.colors["primary"])
            # feedback_text.tag_config("correct_word", foreground=self.colors["success"])
            # feedback_text.tag_config("wrong_word", foreground=self.colors["error"])
            # feedback_text.tag_config("missing_word", foreground=self.colors["warning"])
            # feedback_text.tag_config("hint", foreground=self.colors["secondary_text"])
            # feedback_text.tag_config("correct_answer", foreground=self.colors["success"])
            
            # feedback_text.config(state=tk.DISABLED)

        def show_hint():
            """–ü–æ–∫–∞–∑ –ø–æ–¥—Å–∫–∞–∑–∫–∏"""
            words = correct_answer.split()
            hint = ' '.join(word[0] + '_' * (len(word)-1) for word in words)
            
            feedback_text.config(state=tk.NORMAL)
            feedback_text.delete(1.0, tk.END)
            feedback_text.insert(tk.END, "üí° –ü–æ–¥—Å–∫–∞–∑–∫–∞:\n", "hint_title")
            feedback_text.insert(tk.END, hint, "hint_text")
            
            feedback_text.tag_config("hint_title", foreground=self.colors["hint"])
            feedback_text.tag_config("hint_text", foreground=self.colors["secondary_text"])
            
            feedback_text.config(state=tk.DISABLED)

        # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        button_frame = ttk.Frame(exercise_container)
        button_frame.pack(fill=tk.X, pady=(0, 10))

        check_button = ttk.Button(
            button_frame,
            text="‚úì –ü—Ä–æ–≤–µ—Ä–∏—Ç—å",
            command=check_answer,
            width=15,
            style="Check.TButton"
        )
        check_button.pack(side=tk.LEFT, padx=5)
        
        hint_button = ttk.Button(
            button_frame,
            text="üí° –ü–æ–¥—Å–∫–∞–∑–∫–∞",
            command=show_hint,
            width=15,
            style="Hint.TButton"
        )
        hint_button.pack(side=tk.LEFT, padx=5)
        
        next_button = ttk.Button(
            button_frame,
            text="‚û°Ô∏è –î–∞–ª–µ–µ",
            command=lambda: self.next_exercise(
                current_word_index,
                words_to_review,
                exercise_frame,
                progress_label,
                stats_label
            ),
            state=tk.DISABLED,
            width=15,
            style="Main.TButton"
        )
        next_button.pack(side=tk.LEFT, padx=5)

        # –ü—Ä–∏–≤—è–∑–∫–∞ Enter –∫ –ø—Ä–æ–≤–µ—Ä–∫–µ –æ—Ç–≤–µ—Ç–∞
        answer_entry.bind('<Return>', check_answer)
        
        # –ì–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ–º, —á—Ç–æ –∫–Ω–æ–ø–∫–∏ –±—É–¥—É—Ç –≤–∏–¥–∏–º—ã–º–∏
        button_frame.update_idletasks()
        
    def start_review(self):
        """–û—Ç–∫—Ä—ã—Ç–∏–µ –æ–∫–Ω–∞ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è"""
        current_time = datetime.datetime.now()
        
        try:
            with open('schedule.json', 'r', encoding='utf-8') as f:
                schedule = json.load(f)
        except FileNotFoundError:
            messagebox.showerror(
                "–û—à–∏–±–∫–∞",
                "–§–∞–π–ª —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω.\n–û–±–Ω–æ–≤–∏—Ç–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ."
            )
            return
        except json.JSONDecodeError:
            messagebox.showerror(
                "–û—à–∏–±–∫–∞",
                "–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è.\n–§–∞–π–ª –º–æ–∂–µ—Ç –±—ã—Ç—å –ø–æ–≤—Ä–µ–∂–¥—ë–Ω."
            )
            return

        # –ù–∞—Ö–æ–¥–∏–º —Å–ª–æ–≤–∞ –¥–ª—è –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è
        words_to_review = []
        future_words = []
        
        for word_data in schedule["words"]:
            try:
                next_review = datetime.datetime.fromisoformat(word_data["next_review"])
                word = word_data["word"]
                
                # –û—Ç–¥–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª—è il progetto - –≤—Å–µ–≥–¥–∞ –≤ —Å—Ä–æ—á–Ω—ã—Ö
                if word == "il progetto":
                    if word in self.vocabulary["–ë—É–¥—É –∏–∑—É—á–∞—Ç—å"]:
                        words_to_review.append({
                            "word": word,
                            "data": self.vocabulary["–ë—É–¥—É –∏–∑—É—á–∞—Ç—å"][word],
                            "schedule_data": word_data
                        })
                    continue

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã–µ —Å–ª–æ–≤–∞
                if word in self.vocabulary["–ë—É–¥—É –∏–∑—É—á–∞—Ç—å"]:
                    if next_review <= current_time:
                        words_to_review.append({
                            "word": word,
                            "data": self.vocabulary["–ë—É–¥—É –∏–∑—É—á–∞—Ç—å"][word],
                            "schedule_data": word_data
                        })
                    else:
                        future_words.append({
                            "word": word,
                            "data": self.vocabulary["–ë—É–¥—É –∏–∑—É—á–∞—Ç—å"][word],
                            "schedule_data": word_data
                        })
            except (ValueError, KeyError) as e:
                print(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–ª–æ–≤–∞ {word_data.get('word', 'unknown')}: {e}")
                continue

        # –ï—Å–ª–∏ –Ω–µ—Ç —Å—Ä–æ—á–Ω—ã—Ö —Å–ª–æ–≤, –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –±—É–¥—É—â–∏–µ
        if not words_to_review:
            if future_words:
                if messagebox.askyesno(
                    "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è",
                    "–°–µ–π—á–∞—Å –Ω–µ—Ç —Å–ª–æ–≤ –¥–ª—è —Å—Ä–æ—á–Ω–æ–≥–æ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è.\n–•–æ—Ç–∏—Ç–µ –Ω–∞—á–∞—Ç—å –∏–∑—É—á–µ–Ω–∏–µ –ø—Ä–µ–¥—Å—Ç–æ—è—â–∏—Ö —Å–ª–æ–≤?"
                ):
                    words_to_review = future_words
                else:
                    return
            else:
                messagebox.showinfo(
                    "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è",
                    "–ù–µ—Ç —Å–ª–æ–≤ –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è.\n–î–æ–±–∞–≤—å—Ç–µ –Ω–æ–≤—ã–µ —Å–ª–æ–≤–∞ –≤ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ."
                )
                return

        # –°–æ–∑–¥–∞–Ω–∏–µ –æ–∫–Ω–∞ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è
        review_window, main_frame = self.create_review_window(words_to_review)
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        header_frame = ttk.Frame(main_frame)
        header_frame.grid(row=0, column=0, columnspan=2, pady=(0, 20))
        
        ttk.Label(
            header_frame,
            text="–ü–æ–≤—Ç–æ—Ä–µ–Ω–∏–µ —Å–ª–æ–≤",
            style="Header.TLabel"
        ).pack()
        
        # –ü–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª—å –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–µ—Ä–µ–≤–æ–¥–∞
        direction_frame = ttk.LabelFrame(
            main_frame,
            text="–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–µ—Ä–µ–≤–æ–¥–∞",
            padding="10"
        )
        direction_frame.grid(row=1, column=0, columnspan=2, pady=(0, 20), sticky=(tk.W, tk.E))
        
        self.translation_direction = tk.StringVar(value="ru_to_it")
        
        ttk.Radiobutton(
            direction_frame,
            text="–†—É—Å—Å–∫–∏–π ‚Üí –ò—Ç–∞–ª—å—è–Ω—Å–∫–∏–π",
            variable=self.translation_direction,
            value="ru_to_it",
            command=lambda: self.show_exercise(
                current_word_index,
                words_to_review,
                exercise_frame,
                progress_label,
                stats_label
            )
        ).pack(side=tk.LEFT, padx=20)
        
        ttk.Radiobutton(
            direction_frame,
            text="–ò—Ç–∞–ª—å—è–Ω—Å–∫–∏–π ‚Üí –†—É—Å—Å–∫–∏–π",
            variable=self.translation_direction,
            value="it_to_ru",
            command=lambda: self.show_exercise(
                current_word_index,
                words_to_review,
                exercise_frame,
                progress_label,
                stats_label
            )
        ).pack(side=tk.LEFT, padx=20)

        # –§—Ä–µ–π–º –¥–ª—è —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π
        exercise_frame = ttk.Frame(main_frame)
        exercise_frame.grid(
            row=2,
            column=0,
            columnspan=2,
            sticky=(tk.W, tk.E, tk.N, tk.S),
            pady=(0, 20)
        )
        exercise_frame.columnconfigure(0, weight=1)
        
        # –¢–µ–∫—É—â–∏–π –∏–Ω–¥–µ–∫—Å —Å–ª–æ–≤–∞
        current_word_index = {"value": 0}
        
        # –ü—Ä–æ–≥—Ä–µ—Å—Å
        progress_frame = ttk.Frame(main_frame)
        progress_frame.grid(row=3, column=0, columnspan=2, sticky=(tk.W, tk.E))
        
        progress_label = ttk.Label(
            progress_frame,
            text=f"–°–ª–æ–≤–æ {current_word_index['value'] + 1} –∏–∑ {len(words_to_review)}",
            style="Main.TLabel"
        )
        progress_label.pack(side=tk.LEFT)
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        stats_label = ttk.Label(
            progress_frame,
            text="",
            style="Main.TLabel"
        )
        stats_label.pack(side=tk.RIGHT)
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤–æ–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ
        self.show_exercise(
            current_word_index,
            words_to_review,
            exercise_frame,
            progress_label,
            stats_label
        )
    
    def next_exercise(self, current_word_index, words_to_review, exercise_frame, progress_label, stats_label=None):
        """–ü–µ—Ä–µ—Ö–æ–¥ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—é"""
        try:
            with open('schedule.json', 'r', encoding='utf-8') as f:
                schedule = json.load(f)
            
            current_word = words_to_review[current_word_index["value"]]
            
            # –ù–∞—Ö–æ–¥–∏–º —Å–ª–æ–≤–æ –≤ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏ –∏ –æ–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è
            for word_data in schedule["words"]:
                if word_data["word"] == current_word["word"]:
                    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Ä–µ–º—è —Å–ª–µ–¥—É—é—â–µ–≥–æ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è —á–µ—Ä–µ–∑ 4 —á–∞—Å–∞ –¥–ª—è –≤—Å–µ—Ö —Å–ª–æ–≤
                    next_review = (datetime.datetime.now() + 
                                 datetime.timedelta(hours=4)).isoformat()
                    word_data["next_review"] = next_review
                    break
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ
            with open('schedule.json', 'w', encoding='utf-8') as f:
                json.dump(schedule, f, ensure_ascii=False, indent=2)
        
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è: {e}")

        # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∏–Ω–¥–µ–∫—Å —Ç–µ–∫—É—â–µ–≥–æ —Å–ª–æ–≤–∞
        current_word_index["value"] += 1
        
        if current_word_index["value"] >= len(words_to_review):
            # –ó–∞–≤–µ—Ä—à–∞–µ–º —Å–µ—Å—Å–∏—é
            messagebox.showinfo(
                "–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º!",
                "–í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–∏–ª–∏ –≤—Å–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è –¥–ª—è –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è! üéâ"
            )
            # –ó–∞–∫—Ä—ã–≤–∞–µ–º –æ–∫–Ω–æ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è
            exercise_frame.master.master.destroy()
            # –û–±–Ω–æ–≤–ª—è–µ–º –≥–ª–∞–≤–Ω–æ–µ –æ–∫–Ω–æ
            self.load_schedule()
        else:
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ª–µ–¥—É—é—â–µ–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ
            self.show_exercise(
                current_word_index,
                words_to_review,
                exercise_frame,
                progress_label,
                stats_label
            )
            
    # def next_exercise(self, current_word_index, words_to_review, exercise_frame, progress_label, stats_label=None):
        # """–ü–µ—Ä–µ—Ö–æ–¥ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—é"""
        # try:
            # with open('schedule.json', 'r', encoding='utf-8') as f:
                # schedule = json.load(f)
            
            # current_word = words_to_review[current_word_index["value"]]
            
            # # –ù–∞—Ö–æ–¥–∏–º —Å–ª–æ–≤–æ –≤ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏ –∏ –æ–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è
            # for word_data in schedule["words"]:
                # if word_data["word"] == current_word["word"]:
                    # # –î–ª—è il progetto –æ—Å—Ç–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è
                    # if word_data["word"] == "il progetto":
                        # next_review = datetime.datetime.now().isoformat()
                    # else:
                        # next_review = (datetime.datetime.now() + 
                                     # datetime.timedelta(hours=4)).isoformat()
                    # word_data["next_review"] = next_review
                    # break
            
            # # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ
            # with open('schedule.json', 'w', encoding='utf-8') as f:
                # json.dump(schedule, f, ensure_ascii=False, indent=2)
        
        # except Exception as e:
            # print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è: {e}")

        # # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∏–Ω–¥–µ–∫—Å —Ç–µ–∫—É—â–µ–≥–æ —Å–ª–æ–≤–∞
        # current_word_index["value"] += 1
        
        # if current_word_index["value"] >= len(words_to_review):
            # # –ó–∞–≤–µ—Ä—à–∞–µ–º —Å–µ—Å—Å–∏—é
            # messagebox.showinfo(
                # "–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º!",
                # "–í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–∏–ª–∏ –≤—Å–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è –¥–ª—è –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è! üéâ"
            # )
            # # –ó–∞–∫—Ä—ã–≤–∞–µ–º –æ–∫–Ω–æ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è
            # exercise_frame.master.master.destroy()
            # # –û–±–Ω–æ–≤–ª—è–µ–º –≥–ª–∞–≤–Ω–æ–µ –æ–∫–Ω–æ
            # self.load_schedule()
        # else:
            # # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ª–µ–¥—É—é—â–µ–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ
            # self.show_exercise(
                # current_word_index,
                # words_to_review,
                # exercise_frame,
                # progress_label,
                # stats_label
            # )

    def run(self):
        """–ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
        def on_closing():
            """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è –æ–∫–Ω–∞"""
            if messagebox.askokcancel("–í—ã—Ö–æ–¥", "–í—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Ö–æ—Ç–∏—Ç–µ –≤—ã–π—Ç–∏?"):
                try:
                    self.root.quit()
                    self.root.destroy()
                except:
                    pass

        # –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫ —Å–æ–±—ã—Ç–∏—é –∑–∞–∫—Ä—ã—Ç–∏—è –æ–∫–Ω–∞
        self.root.protocol("WM_DELETE_WINDOW", on_closing)
        
        # –¶–µ–Ω—Ç—Ä–∏—Ä—É–µ–º –≥–ª–∞–≤–Ω–æ–µ –æ–∫–Ω–æ
        self.root.update_idletasks()
        width = self.root.winfo_width()
        height = self.root.winfo_height()
        x = (self.root.winfo_screenwidth() // 2) - (width // 2)
        y = (self.root.winfo_screenheight() // 2) - (height // 2)
        self.root.geometry(f'{width}x{height}+{x}+{y}')
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –≥–ª–∞–≤–Ω—ã–π —Ü–∏–∫–ª –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        self.root.mainloop()


if __name__ == "__main__":
    app = ItalianLearningApp()
    app.run()