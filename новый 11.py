import telebot
from telebot import types
import json
import datetime
import time
import random
import os
import logging
import sys
from typing import Dict, Optional, List
from vocabulary import VOCABULARY

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')

console_handler = logging.StreamHandler(sys.stdout)
console_handler.setFormatter(formatter)

file_handler = logging.FileHandler('bot_log.txt', encoding='utf-8')
file_handler.setFormatter(formatter)

logger = logging.getLogger('ItalianBot')
logger.setLevel(logging.DEBUG)
logger.addHandler(console_handler)
logger.addHandler(file_handler)

telebot_logger = logging.getLogger('TeleBot')
telebot_logger.setLevel(logging.WARNING)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
TOKEN = "7312843542:AAHVDxaHYSveOpitmkWagTFoMVNzYF4_tMU"
bot = telebot.TeleBot(TOKEN)

# –ì–ª–æ–±–∞–ª—å–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ —Å–æ—Å—Ç–æ—è–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_states = {}

class WordStatus:
    NEW = "new"           # –ù–æ–≤–æ–µ —Å–ª–æ–≤–æ
    LEARNING = "learning" # –í –ø—Ä–æ—Ü–µ—Å—Å–µ –∏–∑—É—á–µ–Ω–∏—è (1-2 –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–∞)
    LEARNED = "learned"   # –ò–∑—É—á–µ–Ω–æ (3+ –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤)

def get_main_keyboard():
    """–°–æ–∑–¥–∞–Ω–∏–µ –æ—Å–Ω–æ–≤–Ω–æ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã"""
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.row(types.KeyboardButton("üéØ –ù–∞—á–∞—Ç—å –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–µ"))
    markup.row(
        types.KeyboardButton("üîÑ –°–º–µ–Ω–∏—Ç—å –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–µ—Ä–µ–≤–æ–¥–∞"),
        types.KeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
    )
    markup.row(types.KeyboardButton("‚ÑπÔ∏è –ü–æ–º–æ—â—å"))
    return markup

def get_exercise_keyboard():
    """–°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è"""
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.row(types.KeyboardButton("üí° –ü–æ–¥—Å–∫–∞–∑–∫–∞"))
    markup.row(
        types.KeyboardButton("üîÑ –°–º–µ–Ω–∏—Ç—å –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ"),
        types.KeyboardButton("‚è© –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å")
    )
    markup.row(types.KeyboardButton("üèÅ –ó–∞–≤–µ—Ä—à–∏—Ç—å –∑–∞–Ω—è—Ç–∏–µ"))
    return markup

def get_next_keyboard():
    """–°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —Å–ª–æ–≤—É"""
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.row(types.KeyboardButton("‚û°Ô∏è –î–∞–ª–µ–µ"))
    markup.row(types.KeyboardButton("üèÅ –ó–∞–≤–µ—Ä—à–∏—Ç—å –∑–∞–Ω—è—Ç–∏–µ"))
    return markup

def get_retry_keyboard():
    """–°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–∏"""
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.row(types.KeyboardButton("üîÑ –ü–æ–≤—Ç–æ—Ä–∏—Ç—å"))
    markup.row(
        types.KeyboardButton("üí° –ü–æ–¥—Å–∫–∞–∑–∫–∞"),
        types.KeyboardButton("‚û°Ô∏è –î–∞–ª–µ–µ")
    )
    markup.row(types.KeyboardButton("üèÅ –ó–∞–≤–µ—Ä—à–∏—Ç—å –∑–∞–Ω—è—Ç–∏–µ"))
    return markup

def normalize_text(text: str) -> str:
    """–ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è —Ç–µ–∫—Å—Ç–∞ –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è"""
    text = text.strip()
    replacements = {
        '√®': 'e', '√à': 'e', 'E': 'e', '√©': 'e', '√â': 'e',
        '√†': 'a', '√Ä': 'a',
        '√¨': 'i', '√å': 'i',
        '√≤': 'o', '√í': 'o',
        '√π': 'u', '√ô': 'u'
    }
    
    result = text
    for old, new in replacements.items():
        result = result.replace(old, new)
    
    return result.strip()

def check_answer(user_answer: str, example: dict, translation_direction: str) -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç–∏ –æ—Ç–≤–µ—Ç–∞"""
    user_answer = user_answer.strip()
    
    if translation_direction == "ru_to_it":
        correct_answer = example["–∏—Ç–∞–ª—å—è–Ω—Å–∫–∏–π"]
        alternatives = example.get("–∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤—ã_–∏—Ç", [])
    else:
        correct_answer = example["—Ä—É—Å—Å–∫–∏–π"]
        alternatives = example.get("–∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤—ã_—Ä—É—Å", [])
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ
    if user_answer == correct_answer:
        return True
        
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤—ã
    if user_answer in alternatives:
        return True
        
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–µ–π
    normalized_user = normalize_text(user_answer)
    if normalized_user == normalize_text(correct_answer):
        return True
        
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤—ã —Å –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–µ–π
    for alt in alternatives:
        if normalized_user == normalize_text(alt):
            return True
            
    return False
	# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –¥–∞–Ω–Ω—ã–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

def load_user_data(user_id: int) -> dict:
    """–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    logger.debug(f"Loading data for user {user_id}")
    if not os.path.exists('user_data'):
        os.makedirs('user_data')
        
    file_path = f'user_data/user_{user_id}.json'
    if os.path.exists(file_path):
        try:
            with open(file_path, 'r', encoding='utf-8') as f:
                data = json.load(f)
                logger.debug(f"Successfully loaded data for user {user_id}")
                return data
        except Exception as e:
            logger.error(f"Error loading user data: {e}")
            return init_user_data(user_id)
    
    return init_user_data(user_id)

def save_user_data(user_id: int, data: dict):
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    logger.debug(f"Saving data for user {user_id}")
    if not os.path.exists('user_data'):
        os.makedirs('user_data')
        
    file_path = f'user_data/user_{user_id}.json'
    try:
        with open(file_path, 'w', encoding='utf-8') as f:
            json.dump(data, f, ensure_ascii=False, indent=2)
        logger.debug(f"Successfully saved data for user {user_id}")
    except Exception as e:
        logger.error(f"Error saving user data: {e}")

def init_user_data(user_id: int) -> dict:
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    logger.info(f"Initializing new data for user {user_id}")
    
    current_time = datetime.datetime.now().isoformat()
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–ª–æ–≤
    all_words = list(VOCABULARY["–ë—É–¥—É –∏–∑—É—á–∞—Ç—å"].keys())
    random.shuffle(all_words)
    
    # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–µ 20 —Å–ª–æ–≤ –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è
    learning_words = []
    for word in all_words[:20]:
        learning_words.append({
            "word": word,
            "translation": VOCABULARY["–ë—É–¥—É –∏–∑—É—á–∞—Ç—å"][word]["–ø–µ—Ä–µ–≤–æ–¥"],
            "status": WordStatus.NEW,
            "correct_answers": 0,
            "next_review": current_time,
            "interval": 4
        })
    
    data = {
        "user_id": user_id,
        "active_words": learning_words,
        "learned_words": [],
        "remaining_words": all_words[20:],
        "current_session": [],
        "current_word_index": 0,
        "last_update": current_time
    }
    
    save_user_data(user_id, data)
    logger.info(f"Created initial data for user {user_id} with {len(learning_words)} words")
    return data

def reset_user_data(user_id: int) -> dict:
    """–°–±—Ä–æ—Å –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    logger.info(f"Resetting data for user {user_id}")
    
    # –£–¥–∞–ª—è–µ–º —Ç–µ–∫—É—â–∏–π —Ñ–∞–π–ª –¥–∞–Ω–Ω—ã—Ö
    file_path = f'user_data/user_{user_id}.json'
    if os.path.exists(file_path):
        try:
            os.remove(file_path)
            logger.debug(f"Removed old data file for user {user_id}")
        except Exception as e:
            logger.error(f"Error removing old data file: {e}")
    
    # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
    return init_user_data(user_id)

def calculate_next_interval(correct_answers: int) -> int:
    """–†–∞—Å—á–µ—Ç —Å–ª–µ–¥—É—é—â–µ–≥–æ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è"""
    if correct_answers >= 3:
        return 24  # 24 —á–∞—Å–∞ –¥–ª—è –∏–∑—É—á–µ–Ω–Ω—ã—Ö —Å–ª–æ–≤
    elif correct_answers == 2:
        return 8   # 8 —á–∞—Å–æ–≤
    elif correct_answers == 1:
        return 4   # 4 —á–∞—Å–∞
    else:
        return 1   # 1 —á–∞—Å –¥–ª—è –Ω–æ–≤—ã—Ö —Å–ª–æ–≤

def get_words_for_review(user_data: dict) -> List[dict]:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ª–æ–≤ –¥–ª—è –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è"""
    current_time = datetime.datetime.now()
    words_to_review = []
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Å—Ç–∞—Ä—ã—Ö —Å–ª–æ–≤ –≤ –¥–∞–Ω–Ω—ã—Ö
    for word in user_data["active_words"]:
        if word["word"] not in VOCABULARY["–ë—É–¥—É –∏–∑—É—á–∞—Ç—å"]:
            logger.warning(f"Found obsolete word {word['word']}, need to reset data")
            return []
    
    # –ï—Å–ª–∏ –≤—Å–µ —Å–ª–æ–≤–∞ –Ω–æ–≤—ã–µ - –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∏—Ö –≤—Å–µ
    if all(word.get("status", WordStatus.NEW) == WordStatus.NEW 
           for word in user_data["active_words"]):
        logger.debug("All words are new, returning all active words")
        return user_data["active_words"]
    
    # –ò–Ω–∞—á–µ –ø—Ä–æ–≤–µ—Ä—è–µ–º –≤—Ä–µ–º—è —Å–ª–µ–¥—É—é—â–µ–≥–æ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è
    for word in user_data["active_words"]:
        try:
            next_review = datetime.datetime.fromisoformat(word["next_review"])
            if next_review <= current_time:
                words_to_review.append(word)
        except Exception as e:
            logger.error(f"Error processing review time for word {word}: {e}")
            continue
            
    logger.debug(f"Found {len(words_to_review)} words for review")
    return words_to_review

def update_word_status(word: dict) -> str:
    """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ —Å–ª–æ–≤–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤"""
    correct_answers = word.get("correct_answers", 0)
    if correct_answers >= 3:
        return WordStatus.LEARNED
    elif correct_answers > 0:
        return WordStatus.LEARNING
    else:
        return WordStatus.NEW
		# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ –∏ —Å–æ–æ–±—â–µ–Ω–∏–π

@bot.message_handler(commands=['start'])
def send_welcome(message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start"""
    user_id = message.from_user.id
    logger.info(f"User {user_id} started the bot")
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_data = load_user_data(user_id)
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    user_states[user_id] = {
        "translation_direction": "ru_to_it",
        "awaiting_answer": False
    }
    
    active_count = len(user_data["active_words"])
    learned_count = len(user_data["learned_words"])
    
    welcome_text = (
        "*–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è –∏—Ç–∞–ª—å—è–Ω—Å–∫–æ–≥–æ —è–∑—ã–∫–∞.*\n\n"
        f"üìö –ê–∫—Ç–∏–≤–Ω—ã—Ö —Å–ª–æ–≤: {active_count}\n"
        f"‚úÖ –ò–∑—É—á–µ–Ω–æ —Å–ª–æ–≤: {learned_count}\n\n"
        "üîπ *'–ù–∞—á–∞—Ç—å –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–µ'* - –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è —Å–ª–æ–≤\n"
        "üîπ *'–°–º–µ–Ω–∏—Ç—å –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ'* - –≤—ã–±–æ—Ä –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–µ—Ä–µ–≤–æ–¥–∞\n"
        "üîπ *'–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞'* - –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞\n"
        "üîπ *'–ü–æ–º–æ—â—å'* - —Å–ø—Ä–∞–≤–∫–∞ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º\n\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /reset –¥–ª—è —Å–±—Ä–æ—Å–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞\n\n"
        "–ù–∞—á–Ω—ë–º? üòä"
    )
    
    bot.reply_to(
        message,
        welcome_text,
        parse_mode='Markdown',
        reply_markup=get_main_keyboard()
    )

@bot.message_handler(commands=['reset'])
def handle_reset(message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /reset"""
    user_id = message.from_user.id
    logger.info(f"User {user_id} requested data reset")
    
    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ
    reset_user_data(user_id)
    
    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    user_states[user_id] = {
        "translation_direction": "ru_to_it",
        "awaiting_answer": False
    }
    
    bot.reply_to(
        message,
        "üîÑ –î–∞–Ω–Ω—ã–µ —Å–±—Ä–æ—à–µ–Ω—ã. –ù–∞—á–∏–Ω–∞–µ–º –æ–±—É—á–µ–Ω–∏–µ —Å–Ω–∞—á–∞–ª–∞!",
        reply_markup=get_main_keyboard()
    )

@bot.message_handler(func=lambda message: message.text in ["üéØ –ù–∞—á–∞—Ç—å –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–µ", "/review"])
def start_review(message):
    """–ù–∞—á–∞–ª–æ —Å–µ—Å—Å–∏–∏ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è"""
    user_id = message.from_user.id
    logger.info(f"User {user_id} started review session")
    
    try:
        user_data = load_user_data(user_id)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Å–ª–æ–≤–∞ –∏–∑ —Å—Ç–∞—Ä–æ–≥–æ —Å–ª–æ–≤–∞—Ä—è
        for word in user_data["active_words"]:
            if word["word"] not in VOCABULARY["–ë—É–¥—É –∏–∑—É—á–∞—Ç—å"]:
                logger.info(f"Found old vocabulary, resetting user data")
                user_data = reset_user_data(user_id)
                bot.reply_to(
                    message,
                    "üìö –°–ª–æ–≤–∞—Ä—å –±—ã–ª –æ–±–Ω–æ–≤–ª–µ–Ω. –ù–∞—á–∏–Ω–∞–µ–º –æ–±—É—á–µ–Ω–∏–µ —Å –Ω–æ–≤—ã–º–∏ —Å–ª–æ–≤–∞–º–∏!",
                    reply_markup=get_main_keyboard()
                )
                break
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–ª–æ–≤–∞ –¥–ª—è –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è
        words_to_review = get_words_for_review(user_data)
        logger.debug(f"Got {len(words_to_review)} words for review")
        
        if not words_to_review:
            # –ù–∞—Ö–æ–¥–∏–º –≤—Ä–µ–º—è —Å–ª–µ–¥—É—é—â–µ–≥–æ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è
            next_review = None
            for word in user_data["active_words"]:
                try:
                    review_time = datetime.datetime.fromisoformat(word["next_review"])
                    if next_review is None or review_time < next_review:
                        next_review = review_time
                except:
                    continue
            
            if next_review:
                time_diff = next_review - datetime.datetime.now()
                hours = int(time_diff.total_seconds() // 3600)
                minutes = int((time_diff.total_seconds() % 3600) // 60)
                time_str = f"{hours}—á {minutes}–º–∏–Ω" if hours > 0 else f"{minutes}–º–∏–Ω"
                
                bot.reply_to(
                    message,
                    f"üïí –°–µ–π—á–∞—Å –Ω–µ—Ç —Å–ª–æ–≤ –¥–ª—è –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è!\n\n–°–ª–µ–¥—É—é—â–µ–µ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–µ —á–µ—Ä–µ–∑: *{time_str}*",
                    parse_mode='Markdown',
                    reply_markup=get_main_keyboard()
                )
            else:
                bot.reply_to(
                    message,
                    "üïí –°–µ–π—á–∞—Å –Ω–µ—Ç —Å–ª–æ–≤ –¥–ª—è –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è!",
                    reply_markup=get_main_keyboard()
                )
            return
        
        # –ù–∞—á–∏–Ω–∞–µ–º –Ω–æ–≤—É—é —Å–µ—Å—Å–∏—é
        random.shuffle(words_to_review)
        user_data["current_session"] = words_to_review
        user_data["current_word_index"] = 0
        save_user_data(user_id, user_data)
        
        show_current_exercise(message.chat.id, user_id)
        
    except Exception as e:
        logger.error(f"Error in start_review: {e}")
        # –ü—Ä–∏ –ª—é–±–æ–π –æ—à–∏–±–∫–µ —Å–±—Ä–∞—Å—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        reset_user_data(user_id)
        bot.reply_to(
            message,
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –î–∞–Ω–Ω—ã–µ —Å–±—Ä–æ—à–µ–Ω—ã, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ.",
            reply_markup=get_main_keyboard()
        )

def show_current_exercise(chat_id: int, user_id: int):
    """–ü–æ–∫–∞–∑ —Ç–µ–∫—É—â–µ–≥–æ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è"""
    logger.debug(f"Showing exercise for user {user_id}")
    
    user_data = load_user_data(user_id)
    if not user_data["current_session"]:
        logger.error(f"No current session for user {user_id}")
        return
        
    current_word = user_data["current_session"][user_data["current_word_index"]]
    word_data = VOCABULARY["–ë—É–¥—É –∏–∑—É—á–∞—Ç—å"][current_word["word"]]
    example = random.choice(word_data["–ø—Ä–∏–º–µ—Ä—ã"])
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–µ—Ä–µ–≤–æ–¥–∞
    state = user_states.get(user_id, {})
    translation_direction = state.get("translation_direction", "ru_to_it")
    
    if translation_direction == "ru_to_it":
        question = example["—Ä—É—Å—Å–∫–∏–π"]
        direction_text = "–∏—Ç–∞–ª—å—è–Ω—Å–∫–∏–π"
    else:
        question = example["–∏—Ç–∞–ª—å—è–Ω—Å–∫–∏–π"]
        direction_text = "—Ä—É—Å—Å–∫–∏–π"
    
    # –°–æ–∑–¥–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    progress_bar = "üü¢" * current_word.get("correct_answers", 0) + "‚ö™Ô∏è" * (3 - current_word.get("correct_answers", 0))
    message_text = (
        f"*{current_word['word']} - {current_word['translation']}*\n\n"
        f"–ü–µ—Ä–µ–≤–µ–¥–∏—Ç–µ –Ω–∞ {direction_text}:\n"
        f"*{question}*\n\n"
        "‚ùóÔ∏è –£—á–∏—Ç—ã–≤–∞–π—Ç–µ –∑–∞–≥–ª–∞–≤–Ω—ã–µ –±—É–∫–≤—ã –∏ –∑–Ω–∞–∫–∏ –ø—Ä–µ–ø–∏–Ω–∞–Ω–∏—è\n\n"
        f"–ü—Ä–æ–≥—Ä–µ—Å—Å –∏–∑—É—á–µ–Ω–∏—è: {progress_bar}\n"
        f"_–°–ª–æ–≤–æ {user_data['current_word_index'] + 1} –∏–∑ {len(user_data['current_session'])}_"
    )
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    user_states[user_id] = {
        "translation_direction": translation_direction,
        "awaiting_answer": True,
        "current_example": example
    }
    
    bot.send_message(
        chat_id,
        message_text,
        parse_mode='Markdown',
        reply_markup=get_exercise_keyboard()
    )
    
    logger.debug(f"Exercise shown for user {user_id}, word: {current_word['word']}")
	@bot.message_handler(func=lambda message: message.text == "‚û°Ô∏è –î–∞–ª–µ–µ")
def next_exercise(message):
    """–ü–µ—Ä–µ—Ö–æ–¥ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—é"""
    user_id = message.from_user.id
    logger.info(f"User {user_id} pressed Next button")
    
    user_data = load_user_data(user_id)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –µ—â—ë —Å–ª–æ–≤–∞ –≤ —Å–µ—Å—Å–∏–∏
    if not user_data["current_session"] or user_data["current_word_index"] >= len(user_data["current_session"]) - 1:
        # –ï—Å–ª–∏ —Ç–µ–∫—É—â–∞—è —Å–µ—Å—Å–∏—è –∑–∞–∫–æ–Ω—á–∏–ª–∞—Å—å, –ø—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ –µ—â—ë —Å–ª–æ–≤–∞ –¥–ª—è –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è
        words_to_review = get_words_for_review(user_data)
        if not words_to_review:
            bot.reply_to(
                message,
                "–°–µ—Å—Å–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–µ—Ç —Å–ª–æ–≤ –¥–ª—è –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è.",
                reply_markup=get_main_keyboard()
            )
            return
        # –ù–∞—á–∏–Ω–∞–µ–º –Ω–æ–≤—É—é —Å–µ—Å—Å–∏—é
        random.shuffle(words_to_review)
        user_data["current_session"] = words_to_review
        user_data["current_word_index"] = 0
    else:
        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —Å–ª–æ–≤—É
        user_data["current_word_index"] += 1
    
    save_user_data(user_id, user_data)
    show_current_exercise(message.chat.id, user_id)

@bot.message_handler(func=lambda message: message.text == "üîÑ –ü–æ–≤—Ç–æ—Ä–∏—Ç—å")
def retry_answer(message):
    """–ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞"""
    user_id = message.from_user.id
    logger.info(f"User {user_id} retrying answer")
    show_current_exercise(message.chat.id, user_id)

@bot.message_handler(func=lambda message: message.text == "üí° –ü–æ–¥—Å–∫–∞–∑–∫–∞")
def show_hint(message):
    """–ü–æ–∫–∞–∑ –ø–æ–¥—Å–∫–∞–∑–∫–∏"""
    user_id = message.from_user.id
    logger.info(f"User {user_id} requested hint")
    
    state = user_states.get(user_id, {})
    if not state.get("awaiting_answer"):
        bot.reply_to(message, "‚ùå –°–Ω–∞—á–∞–ª–∞ –Ω–∞—á–Ω–∏—Ç–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ")
        return
    
    example = state.get("current_example")
    if not example:
        bot.reply_to(message, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ù–∞—á–Ω–∏—Ç–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ –∑–∞–Ω–æ–≤–æ")
        return
    
    if state["translation_direction"] == "ru_to_it":
        answer = example["–∏—Ç–∞–ª—å—è–Ω—Å–∫–∏–π"]
    else:
        answer = example["—Ä—É—Å—Å–∫–∏–π"]
    
    # –°–æ–∑–¥–∞–µ–º –ø–æ–¥—Å–∫–∞–∑–∫—É (–ø–µ—Ä–≤—ã–µ –±—É–∫–≤—ã —Å–ª–æ–≤)
    words = answer.split()
    hint_words = []
    for word in words:
        if len(word) > 0:
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–≥–∏—Å—Ç—Ä –ø–µ—Ä–≤–æ–π –±—É–∫–≤—ã
            hint_words.append(word[0] + '_' * (len(word)-1))
    hint = ' '.join(hint_words)
    
    bot.reply_to(
        message,
        f"üí° –ü–æ–¥—Å–∫–∞–∑–∫–∞:\n{hint}\n\n‚ùóÔ∏è –£—á–∏—Ç—ã–≤–∞–π—Ç–µ –∑–∞–≥–ª–∞–≤–Ω—ã–µ –±—É–∫–≤—ã –∏ –∑–Ω–∞–∫–∏ –ø—Ä–µ–ø–∏–Ω–∞–Ω–∏—è!",
        reply_markup=get_exercise_keyboard()
    )
    logger.debug(f"Hint shown for user {user_id}")

@bot.message_handler(func=lambda message: message.text == "‚è© –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å")
def skip_word(message):
    """–ü—Ä–æ–ø—É—Å–∫ —Ç–µ–∫—É—â–µ–≥–æ —Å–ª–æ–≤–∞"""
    user_id = message.from_user.id
    logger.info(f"User {user_id} skipping word")
    
    user_data = load_user_data(user_id)
    if not user_data["current_session"] or user_data["current_word_index"] >= len(user_data["current_session"]):
        return
        
    current_word = user_data["current_session"][user_data["current_word_index"]]
    logger.debug(f"Skipping word '{current_word['word']}' for user {user_id}")
    
    # –ü—Ä–∏ –ø—Ä–æ–ø—É—Å–∫–µ –Ω–µ –º–µ–Ω—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å–ª–æ–≤–∞
    user_data["current_word_index"] += 1
    save_user_data(user_id, user_data)
    
    bot.reply_to(message, "‚è© –°–ª–æ–≤–æ –ø—Ä–æ–ø—É—â–µ–Ω–æ")
    show_current_exercise(message.chat.id, user_id)

@bot.message_handler(func=lambda message: message.text == "üèÅ –ó–∞–≤–µ—Ä—à–∏—Ç—å –∑–∞–Ω—è—Ç–∏–µ")
def end_session(message):
    """–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–π —Å–µ—Å—Å–∏–∏"""
    user_id = message.from_user.id
    logger.info(f"User {user_id} ending session")
    
    user_data = load_user_data(user_id)
    
    # –ù–∞—Ö–æ–¥–∏–º –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è —Å–ª–µ–¥—É—é—â–µ–≥–æ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è
    next_review = None
    for word in user_data["active_words"]:
        review_time = datetime.datetime.fromisoformat(word["next_review"])
        if next_review is None or review_time < next_review:
            next_review = review_time
    
    # –û—á–∏—â–∞–µ–º —Ç–µ–∫—É—â—É—é —Å–µ—Å—Å–∏—é
    user_data["current_session"] = []
    user_data["current_word_index"] = 0
    save_user_data(user_id, user_data)
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    summary_text = ["üèÅ *–ó–∞–Ω—è—Ç–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!*\n"]
    
    if next_review:
        time_diff = next_review - datetime.datetime.now()
        hours = int(time_diff.total_seconds() // 3600)
        minutes = int((time_diff.total_seconds() % 3600) // 60)
        
        if hours > 0:
            time_str = f"{hours}—á {minutes}–º–∏–Ω"
        else:
            time_str = f"{minutes}–º–∏–Ω"
            
        summary_text.append(f"‚è∞ –°–ª–µ–¥—É—é—â–µ–µ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–µ —á–µ—Ä–µ–∑: *{time_str}*\n")
        summary_text.append("–Ø –ø—Ä–∏—à–ª—é —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ, –∫–æ–≥–¥–∞ –ø—Ä–∏–¥–µ—Ç –≤—Ä–µ–º—è!")
    
    bot.reply_to(
        message,
        "\n".join(summary_text),
        parse_mode='Markdown',
        reply_markup=get_main_keyboard()
    )
    
    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_states[user_id] = {
        "translation_direction": user_states[user_id].get("translation_direction", "ru_to_it"),
        "awaiting_answer": False
    }
	