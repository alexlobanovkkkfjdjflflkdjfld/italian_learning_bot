import telebot
from telebot import types
import json
import datetime
import time
import random
import os
from typing import Dict, Optional
from vocabulary import VOCABULARY

import logging
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

# –û—Ç–∫–ª—é—á–∞–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –ª–æ–≥–∏ telebot
telebot_logger = logging.getLogger('TeleBot')
telebot_logger.setLevel(logging.ERROR)


# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
TOKEN = "7312843542:AAHVDxaHYSveOpitmkWagTFoMVNzYF4_tMU"
bot = telebot.TeleBot(TOKEN)

# –ì–ª–æ–±–∞–ª—å–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ —Å–æ—Å—Ç–æ—è–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_states = {}

def get_main_keyboard():
    """–°–æ–∑–¥–∞–Ω–∏–µ –æ—Å–Ω–æ–≤–Ω–æ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã"""
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.row(types.KeyboardButton("üéØ –ù–∞—á–∞—Ç—å –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–µ"))
    markup.row(
        types.KeyboardButton("üîÑ –°–º–µ–Ω–∏—Ç—å –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–µ—Ä–µ–≤–æ–¥–∞"),
        types.KeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
    )
    markup.row(types.KeyboardButton("‚ÑπÔ∏è –ü–æ–º–æ—â—å"))
    return markup

def get_exercise_keyboard():
    """–°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è"""
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.row(types.KeyboardButton("üí° –ü–æ–¥—Å–∫–∞–∑–∫–∞"))
    markup.row(
        types.KeyboardButton("üîÑ –°–º–µ–Ω–∏—Ç—å –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ"),
        types.KeyboardButton("‚è© –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å")
    )
    return markup

def select_initial_words(num_words: int = 20) -> list:
    """–í—ã–±–æ—Ä –Ω–∞—á–∞–ª—å–Ω—ã—Ö —Å–ª–æ–≤ –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è"""
    available_words = list(VOCABULARY["–ë—É–¥—É –∏–∑—É—á–∞—Ç—å"].keys())
    if len(available_words) < num_words:
        return available_words
    return random.sample(available_words, num_words)

def get_new_word(learned_words: list) -> Optional[str]:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Å–ª–æ–≤–∞ –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è"""
    available_words = [word for word in VOCABULARY["–ë—É–¥—É –∏–∑—É—á–∞—Ç—å"].keys()
                      if word not in learned_words]
    return random.choice(available_words) if available_words else None

def create_initial_schedule(user_id: int) -> dict:
    """–°–æ–∑–¥–∞–Ω–∏–µ –Ω–∞—á–∞–ª—å–Ω–æ–≥–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –¥–ª—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    current_time = datetime.datetime.now()
    initial_words = select_initial_words(20)  # –ù–∞—á–∏–Ω–∞–µ–º —Å 20 —Å–ª–æ–≤
    
    schedule = {
        "user_id": user_id,
        "words": [],
        "learned_words": [],  # –°–ø–∏—Å–æ–∫ –∏–∑—É—á–µ–Ω–Ω—ã—Ö —Å–ª–æ–≤
        "last_word_added": current_time.isoformat()  # –í—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å–ª–æ–≤–∞
    }
    
    for word in initial_words:
        schedule["words"].append({
            "word": word,
            "translation": VOCABULARY["–ë—É–¥—É –∏–∑—É—á–∞—Ç—å"][word]["–ø–µ—Ä–µ–≤–æ–¥"],
            "next_review": current_time.isoformat(),
            "current_interval": 4,
            "repetitions": 0,
            "correct_answers": 0  # –°—á–µ—Ç—á–∏–∫ –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤
        })
    
    save_schedule(schedule, user_id)
    return schedule

def save_schedule(schedule: dict, user_id: int):
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    if not os.path.exists('user_schedules'):
        os.makedirs('user_schedules')
    
    schedule_path = f'user_schedules/schedule_{user_id}.json'
    with open(schedule_path, 'w', encoding='utf-8') as f:
        json.dump(schedule, f, ensure_ascii=False, indent=2)

def load_user_schedule(user_id: int) -> Optional[dict]:
    """–ó–∞–≥—Ä—É–∑–∫–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    schedule_path = f'user_schedules/schedule_{user_id}.json'
    try:
        if os.path.exists(schedule_path):
            with open(schedule_path, 'r', encoding='utf-8') as f:
                return json.load(f)
        return create_initial_schedule(user_id)
    except Exception as e:
        print(f"Error loading schedule for user {user_id}: {e}")
        return None

def update_word_schedule(user_id: int, word: dict, was_correct: bool):
    """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –¥–ª—è —Å–ª–æ–≤–∞"""
    try:
        schedule = load_user_schedule(user_id)
        if not schedule:
            return

        # –ù–∞—Ö–æ–¥–∏–º —Å–ª–æ–≤–æ –≤ —Å–ø–∏—Å–∫–µ
        for w in schedule["words"]:
            if w["word"] == word["word"]:
                if was_correct:
                    w["correct_answers"] = w.get("correct_answers", 0) + 1
                    next_interval = calculate_next_interval(w, True)
                else:
                    next_interval = 1
                    w["correct_answers"] = 0
                
                w["current_interval"] = next_interval
                w["next_review"] = (datetime.datetime.now() + 
                                  datetime.timedelta(hours=next_interval)).isoformat()
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –¥–æ—Å—Ç–∏–≥–ª–æ –ª–∏ —Å–ª–æ–≤–æ 3 –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤
                if w["correct_answers"] >= 3:
                    schedule["learned_words"].append(w["word"])
                    schedule["words"].remove(w)
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤–æ–µ —Å–ª–æ–≤–æ
                    current_time = datetime.datetime.now()
                    last_added = datetime.datetime.fromisoformat(schedule["last_word_added"])
                    
                    if (current_time - last_added).total_seconds() >= 8 * 3600:  # 8 —á–∞—Å–æ–≤
                        new_word = get_new_word(schedule["learned_words"])
                        if new_word:
                            schedule["words"].append({
                                "word": new_word,
                                "translation": VOCABULARY["–ë—É–¥—É –∏–∑—É—á–∞—Ç—å"][new_word]["–ø–µ—Ä–µ–≤–æ–¥"],
                                "next_review": current_time.isoformat(),
                                "current_interval": 4,
                                "repetitions": 0,
                                "correct_answers": 0
                            })
                            schedule["last_word_added"] = current_time.isoformat()
                break
        
        save_schedule(schedule, user_id)
        
    except Exception as e:
        print(f"Error updating schedule for user {user_id}: {e}")

def calculate_next_interval(word: dict, was_correct: bool) -> int:
    """–†–∞—Å—á–µ—Ç —Å–ª–µ–¥—É—é—â–µ–≥–æ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è"""
    if not was_correct:
        return 1
    
    current_interval = word.get("current_interval", 4)
    intervals = [4, 8, 24, 72, 168, 336, 672]
    
    for interval in intervals:
        if current_interval < interval:
            return interval
            
    return current_interval * 2

@bot.message_handler(commands=['start'])
def send_welcome(message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start"""
    user_id = message.from_user.id
    
    if user_id not in user_states:
        user_states[user_id] = {
            "translation_direction": "ru_to_it",
            "awaiting_answer": False
        }
    
    # –°–æ–∑–¥–∞–µ–º –∏–ª–∏ –∑–∞–≥—Ä—É–∂–∞–µ–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    schedule = load_user_schedule(user_id)
    if not schedule:
        schedule = create_initial_schedule(user_id)
    
    active_words = len(schedule["words"])
    learned_words = len(schedule.get("learned_words", []))
    
    welcome_text = (
        "*–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è –∏—Ç–∞–ª—å—è–Ω—Å–∫–æ–≥–æ —è–∑—ã–∫–∞.*\n\n"
        f"üìö –£ –≤–∞—Å {active_words} —Å–ª–æ–≤ –≤ –∏–∑—É—á–µ–Ω–∏–∏\n"
        f"‚úÖ –ò–∑—É—á–µ–Ω–æ —Å–ª–æ–≤: {learned_words}\n\n"
        "üîπ *'–ù–∞—á–∞—Ç—å –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–µ'* - –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è —Å–ª–æ–≤\n"
        "üîπ *'–°–º–µ–Ω–∏—Ç—å –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ'* - –≤—ã–±–æ—Ä –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–µ—Ä–µ–≤–æ–¥–∞\n"
        "üîπ *'–ü–æ–¥—Å–∫–∞–∑–∫–∞'* - –µ—Å–ª–∏ –Ω—É–∂–Ω–∞ –ø–æ–º–æ—â—å\n"
        "üîπ *'–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞'* - –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞\n\n"
        "–ù–∞—á–Ω—ë–º? üòä"
    )
    
    bot.reply_to(
        message,
        welcome_text,
        parse_mode='Markdown',
        reply_markup=get_main_keyboard()
    )

# –û—Å—Ç–∞–ª—å–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –æ—Å—Ç–∞—é—Ç—Å—è —Ç–µ–º–∏ –∂–µ, —á—Ç–æ –∏ –≤ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–º –∫–æ–¥–µ
	# –î–æ–±–∞–≤—å—Ç–µ –ø–æ—Å–ª–µ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –∫–æ–¥–∞ —Å–ª–µ–¥—É—é—â–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏:

def show_current_exercise(chat_id: int, user_id: int):
    """–ü–æ–∫–∞–∑ —Ç–µ–∫—É—â–µ–≥–æ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è"""
    state = user_states[user_id]
    words = state["words_to_review"]
    current_index = state["current_word_index"]
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤—Å–µ—Ö —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π
    if current_index >= len(words):
        schedule = load_user_schedule(user_id)
        active_words = len(schedule["words"])
        learned_words = len(schedule.get("learned_words", []))
        
        completion_message = (
            "üéâ *–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º!*\n"
            "–í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–∏–ª–∏ –≤—Å–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è!\n\n"
            f"üìö –ê–∫—Ç–∏–≤–Ω—ã—Ö —Å–ª–æ–≤: {active_words}\n"
            f"‚úÖ –ò–∑—É—á–µ–Ω–æ —Å–ª–æ–≤: {learned_words}\n\n"
        )
        
        next_review_time = get_next_review_time(user_id)
        if next_review_time:
            time_str = format_time_until(next_review_time)
            completion_message += (
                f"‚è∞ –°–ª–µ–¥—É—é—â–µ–µ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–µ —á–µ—Ä–µ–∑: *{time_str}*\n"
                "–Ø –ø—Ä–∏—à–ª—é —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ, –∫–æ–≥–¥–∞ –ø—Ä–∏–¥–µ—Ç –≤—Ä–µ–º—è!"
            )
        
        bot.send_message(
            chat_id,
            completion_message,
            parse_mode='Markdown',
            reply_markup=get_main_keyboard()
        )
        
        user_states[user_id] = {
            "translation_direction": state["translation_direction"],
            "awaiting_answer": False
        }
        return

    # –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —Ç–µ–∫—É—â–µ–≥–æ —Å–ª–æ–≤–∞
    word = words[current_index]
    word_data = VOCABULARY["–ë—É–¥—É –∏–∑—É—á–∞—Ç—å"][word["word"]]
    example = random.choice(word_data["–ø—Ä–∏–º–µ—Ä—ã"])
    
    # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–µ—Ä–µ–≤–æ–¥–∞
    translation_direction = state["translation_direction"]
    if translation_direction == "ru_to_it":
        question = example["—Ä—É—Å—Å–∫–∏–π"]
        correct_answer = example["–∏—Ç–∞–ª—å—è–Ω—Å–∫–∏–π"]
        direction_text = "–∏—Ç–∞–ª—å—è–Ω—Å–∫–∏–π"
    else:
        question = example["–∏—Ç–∞–ª—å—è–Ω—Å–∫–∏–π"]
        correct_answer = example["—Ä—É—Å—Å–∫–∏–π"]
        direction_text = "—Ä—É—Å—Å–∫–∏–π"
    
    # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    progress = word.get("correct_answers", 0)
    progress_bar = "üü¢" * progress + "‚ö™Ô∏è" * (3 - progress)
    
    message_text = (
        f"*{word['word']} - {word['translation']}*\n\n"
        f"–ü–µ—Ä–µ–≤–µ–¥–∏—Ç–µ –Ω–∞ {direction_text}:\n"
        f"*{question}*\n\n"
        f"–ü—Ä–æ–≥—Ä–µ—Å—Å –∏–∑—É—á–µ–Ω–∏—è: {progress_bar}\n"
        f"_–°–ª–æ–≤–æ {current_index + 1} –∏–∑ {len(words)}_"
    )
    
    bot.send_message(
        chat_id,
        message_text,
        parse_mode='Markdown',
        reply_markup=get_exercise_keyboard()
    )
    
    state["awaiting_answer"] = True

def get_next_review_time(user_id: int) -> Optional[datetime.datetime]:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ —Å–ª–µ–¥—É—é—â–µ–≥–æ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è"""
    schedule = load_user_schedule(user_id)
    if not schedule or not schedule["words"]:
        return None
        
    current_time = datetime.datetime.now()
    next_times = []
    
    for word in schedule["words"]:
        review_time = datetime.datetime.fromisoformat(word["next_review"])
        if review_time > current_time:
            next_times.append(review_time)
            
    return min(next_times) if next_times else None

def format_time_until(target_time: datetime.datetime) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è"""
    time_diff = target_time - datetime.datetime.now()
    hours = int(time_diff.total_seconds() // 3600)
    minutes = int((time_diff.total_seconds() % 3600) // 60)
    
    if hours > 0:
        return f"{hours}—á {minutes}–º–∏–Ω"
    return f"{minutes}–º–∏–Ω"

@bot.message_handler(func=lambda message: message.text in ["üéØ –ù–∞—á–∞—Ç—å –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–µ", "/review"])
def start_review(message):
    """–ù–∞—á–∞–ª–æ —Å–µ—Å—Å–∏–∏ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è"""
    user_id = message.from_user.id
    
    if user_id not in user_states:
        user_states[user_id] = {
            "translation_direction": "ru_to_it",
            "awaiting_answer": False
        }
    
    schedule = load_user_schedule(user_id)
    if not schedule:
        bot.reply_to(message, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è.")
        return
        
    current_time = datetime.datetime.now()
    words_to_review = []
    
    for word in schedule["words"]:
        next_review = datetime.datetime.fromisoformat(word["next_review"])
        if next_review <= current_time:
            words_to_review.append(word)
    
    if not words_to_review:
        next_review_time = get_next_review_time(user_id)
        if next_review_time:
            time_str = format_time_until(next_review_time)
            bot.reply_to(
                message,
                f"üïí –°–µ–π—á–∞—Å –Ω–µ—Ç —Å–ª–æ–≤ –¥–ª—è –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è!\n\n–°–ª–µ–¥—É—é—â–µ–µ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–µ —á–µ—Ä–µ–∑: *{time_str}*",
                parse_mode='Markdown',
                reply_markup=get_main_keyboard()
            )
        else:
            bot.reply_to(
                message,
                "üïí –°–µ–π—á–∞—Å –Ω–µ—Ç —Å–ª–æ–≤ –¥–ª—è –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è!",
                reply_markup=get_main_keyboard()
            )
        return
    
    user_states[user_id].update({
        "words_to_review": words_to_review,
        "current_word_index": 0,
        "awaiting_answer": True
    })
    
    show_current_exercise(message.chat.id, user_id)

@bot.message_handler(func=lambda message: message.text == "üí° –ü–æ–¥—Å–∫–∞–∑–∫–∞")
def show_hint(message):
    """–ü–æ–∫–∞–∑ –ø–æ–¥—Å–∫–∞–∑–∫–∏"""
    user_id = message.from_user.id
    if user_id not in user_states or not user_states[user_id]["awaiting_answer"]:
        bot.reply_to(message, "‚ùå –°–Ω–∞—á–∞–ª–∞ –Ω–∞—á–Ω–∏—Ç–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ")
        return
        
    state = user_states[user_id]
    word = state["words_to_review"][state["current_word_index"]]
    word_data = VOCABULARY["–ë—É–¥—É –∏–∑—É—á–∞—Ç—å"][word["word"]]
    example = random.choice(word_data["–ø—Ä–∏–º–µ—Ä—ã"])
    
    if state["translation_direction"] == "ru_to_it":
        answer = example["–∏—Ç–∞–ª—å—è–Ω—Å–∫–∏–π"]
    else:
        answer = example["—Ä—É—Å—Å–∫–∏–π"]
    
    words = answer.split()
    hint_words = []
    for word in words:
        if len(word) > 0:
            hint_words.append(word[0] + '_' * (len(word)-1))
    hint = ' '.join(hint_words)
    
    bot.reply_to(
        message,
        f"üí° –ü–æ–¥—Å–∫–∞–∑–∫–∞:\n{hint}",
        reply_markup=get_exercise_keyboard()
    )

@bot.message_handler(func=lambda message: message.text in ["üîÑ –°–º–µ–Ω–∏—Ç—å –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ", "/switch"])
def switch_translation_direction(message):
    """–°–º–µ–Ω–∞ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–µ—Ä–µ–≤–æ–¥–∞"""
    user_id = message.from_user.id
    if user_id not in user_states:
        user_states[user_id] = {"translation_direction": "ru_to_it"}
        
    current_direction = user_states[user_id]["translation_direction"]
    new_direction = "it_to_ru" if current_direction == "ru_to_it" else "ru_to_it"
    user_states[user_id]["translation_direction"] = new_direction
    
    direction_text = "–∏—Ç–∞–ª—å—è–Ω—Å–∫–∏–π ‚Üí —Ä—É—Å—Å–∫–∏–π" if new_direction == "it_to_ru" else "—Ä—É—Å—Å–∫–∏–π ‚Üí –∏—Ç–∞–ª—å—è–Ω—Å–∫–∏–π"
    bot.reply_to(
        message,
        f"üîÑ –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–µ—Ä–µ–≤–æ–¥–∞ –∏–∑–º–µ–Ω–µ–Ω–æ –Ω–∞:\n*{direction_text}*",
        parse_mode='Markdown'
    )
    
    if user_states[user_id].get("awaiting_answer"):
        show_current_exercise(message.chat.id, user_id)

@bot.message_handler(func=lambda message: message.text == "‚è© –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å")
def skip_word(message):
    """–ü—Ä–æ–ø—É—Å–∫ —Ç–µ–∫—É—â–µ–≥–æ —Å–ª–æ–≤–∞"""
    user_id = message.from_user.id
    if user_id not in user_states or not user_states[user_id].get("awaiting_answer"):
        return
        
    state = user_states[user_id]
    word = state["words_to_review"][state["current_word_index"]]
    
    update_word_schedule(user_id, word, False)
    
    state["current_word_index"] += 1
    bot.reply_to(message, "‚è© –°–ª–æ–≤–æ –ø—Ä–æ–ø—É—â–µ–Ω–æ")
    show_current_exercise(message.chat.id, user_id)

@bot.message_handler(func=lambda message: message.text == "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
def show_statistics(message):
    """–ü–æ–∫–∞–∑ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –æ–±—É—á–µ–Ω–∏—è"""
    user_id = message.from_user.id
    schedule = load_user_schedule(user_id)
    
    if not schedule:
        bot.reply_to(message, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏")
        return
        
    active_words = len(schedule["words"])
    learned_words = len(schedule.get("learned_words", []))
    
    # –ü–æ–¥—Å—á–µ—Ç —Å–ª–æ–≤ –ø–æ –ø—Ä–æ–≥—Ä–µ—Å—Å—É
    not_started = 0
    in_progress = 0
    for word in schedule["words"]:
        correct_answers = word.get("correct_answers", 0)
        if correct_answers == 0:
            not_started += 1
        else:
            in_progress += 1
    
    stats_message = (
        "üìä *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ–±—É—á–µ–Ω–∏—è:*\n\n"
        f"üìö –í—Å–µ–≥–æ —Å–ª–æ–≤ –≤ —Ä–∞–±–æ—Ç–µ: {active_words}\n"
        f"üÜï –ù–µ –Ω–∞—á–∞—Ç–æ: {not_started}\n"
        f"üìù –í –ø—Ä–æ—Ü–µ—Å—Å–µ: {in_progress}\n"
        f"‚úÖ –ò–∑—É—á–µ–Ω–æ: {learned_words}\n\n"
        "–°–ª–æ–≤–æ —Å—á–∏—Ç–∞–µ—Ç—Å—è –∏–∑—É—á–µ–Ω–Ω—ã–º –ø–æ—Å–ª–µ 3 –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤\n"
        f"–í—Å–µ–≥–æ —Å–ª–æ–≤ –≤ —Å–ª–æ–≤–∞—Ä–µ: {len(VOCABULARY['–ë—É–¥—É –∏–∑—É—á–∞—Ç—å'])}"
    )
    
    bot.reply_to(
        message,
        stats_message,
        parse_mode='Markdown',
        reply_markup=get_main_keyboard()
    )

def normalize_text(text: str) -> str:
    """–ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è —Ç–µ–∫—Å—Ç–∞ –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è"""
    text = text.lower()
    
    replacements = {
        '√†': 'a', '√®': 'e', '√©': 'e',
        '√¨': 'i', '√≠': 'i', '√≤': 'o',
        '√≥': 'o', '√π': 'u', '√∫': 'u'
    }
    
    for old, new in replacements.items():
        text = text.replace(old, new)
    
    return ' '.join(text.split())

@bot.message_handler(func=lambda message: True)
def handle_answer(message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    user_id = message.from_user.id
    if user_id not in user_states or not user_states[user_id].get("awaiting_answer"):
        return

    state = user_states[user_id]
    word = state["words_to_review"][state["current_word_index"]]
    word_data = VOCABULARY["–ë—É–¥—É –∏–∑—É—á–∞—Ç—å"][word["word"]]
    example = random.choice(word_data["–ø—Ä–∏–º–µ—Ä—ã"])
    
    if state["translation_direction"] == "ru_to_it":
        correct_answer = example["–∏—Ç–∞–ª—å—è–Ω—Å–∫–∏–π"]
        alternatives = example.get("–∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤—ã_–∏—Ç", [])
    else:
        correct_answer = example["—Ä—É—Å—Å–∫–∏–π"]
        alternatives = example.get("–∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤—ã_—Ä—É—Å", [])

    user_answer = normalize_text(message.text.strip())
    correct_answer_norm = normalize_text(correct_answer)
    
    is_correct = False
    if user_answer == correct_answer_norm:
        is_correct = True
    else:
        for alt in alternatives:
            if user_answer == normalize_text(alt):
                is_correct = True
                break

    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    
    if is_correct:
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫ –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤
        current_progress = word.get("correct_answers", 0)
        progress_bar = "üü¢" * (current_progress + 1) + "‚ö™Ô∏è" * (2 - current_progress)
        
        response = (
            "‚úÖ *–ü—Ä–∞–≤–∏–ª—å–Ω–æ!*\n\n"
            f"–í–∞—à –æ—Ç–≤–µ—Ç: _{message.text}_\n"
            f"–ü—Ä–æ–≥—Ä–µ—Å—Å: {progress_bar}"
        )
        markup.row(types.KeyboardButton("‚û°Ô∏è –î–∞–ª–µ–µ"))
    else:
        response = (
            "‚ùå *–û—à–∏–±–∫–∞!*\n\n"
            f"–í–∞—à –æ—Ç–≤–µ—Ç: _{message.text}_\n"
            f"–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: *{correct_answer}*"
        )
        markup.row(types.KeyboardButton("üîÑ –ü–æ–≤—Ç–æ—Ä–∏—Ç—å"))
        markup.row(
            types.KeyboardButton("üí° –ü–æ–¥—Å–∫–∞–∑–∫–∞"),
            types.KeyboardButton("‚û°Ô∏è –î–∞–ª–µ–µ")
        )

    update_word_schedule(user_id, word, is_correct)
    
    bot.reply_to(
        message,
        response,
        parse_mode='Markdown',
        reply_markup=markup
    )
    
    if not is_correct:
        state["awaiting_answer"] = True
    else:
        state["awaiting_answer"] = False

def check_and_send_notifications():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
    while True:
        try:
            if os.path.exists('user_schedules'):
                for filename in os.listdir('user_schedules'):
                    if filename.startswith('schedule_') and filename.endswith('.json'):
                        user_id = int(filename.split('_')[1].split('.')[0])
                        
                        schedule = load_user_schedule(user_id)
                        if not schedule:
                            continue

                        current_time = datetime.datetime.now()
                        words_to_review = []
                        
                        for word in schedule["words"]:
                            next_review = datetime.datetime.fromisoformat(word["next_review"])
                            if next_review <= current_time:
                                words_to_review.append(word)
                        
                        if words_to_review:
                            try:
                                active_words = len(schedule["words"])
                                learned_words = len(schedule.get("learned_words", []))
                                
                                notification_text = (
                                    f"üîî *–ü–æ—Ä–∞ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å —Å–ª–æ–≤–∞!*\n\n"
                                    f"–£ –≤–∞—Å {len(words_to_review)} —Å–ª–æ–≤ –¥–ª—è –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è.\n"
                                    f"üìö –ê–∫—Ç–∏–≤–Ω—ã—Ö —Å–ª–æ–≤: {active_words}\n"
                                    f"‚úÖ –ò–∑—É—á–µ–Ω–æ —Å–ª–æ–≤: {learned_words}\n\n"
                                    "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /review –¥–ª—è –Ω–∞—á–∞–ª–∞ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è."
                                )
                                
                                bot.send_message(
                                    user_id,
                                    notification_text,
                                    parse_mode='Markdown',
                                    reply_markup=get_main_keyboard()
                                )
                            except Exception as e:
                                print(f"Error sending notification to user {user_id}: {e}")
                                
        except Exception as e:
            print(f"Error in notification check: {e}")
            
        time.sleep(3600)  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–∂–¥—ã–π —á–∞—Å

# @bot.message_handler(func=lambda message: message.text == "‚û°Ô∏è –î–∞–ª–µ–µ")
# def next_exercise(message):
    # """–ü–µ—Ä–µ—Ö–æ–¥ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—é"""
    # user_id = message.from_user.id
    # if user_id not in user_states:
        # return
        
    # state = user_states[user_id]
    # state["current_word_index"] += 1
    # state["awaiting_answer"] = True
    
    # show_current_exercise(message.chat.id, user_id)
@bot.message_handler(func=lambda message: message.text == "‚û°Ô∏è –î–∞–ª–µ–µ")
def next_exercise(message):
    """–ü–µ—Ä–µ—Ö–æ–¥ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—é"""
    user_id = message.from_user.id
    if user_id not in user_states:
        return
        
    state = user_states[user_id]
    state["current_word_index"] += 1
    state["awaiting_answer"] = True
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ
    schedule = load_user_schedule(user_id)
    if not schedule:
        return
        
    # –ü–æ–ª—É—á–∞–µ–º —Å–ª–æ–≤–∞ –¥–ª—è –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è
    current_time = datetime.datetime.now()
    words_to_review = []
    
    for word in schedule["words"]:
        next_review = datetime.datetime.fromisoformat(word["next_review"])
        if next_review <= current_time:
            words_to_review.append(word)
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ —Å–ª–æ–≤ –¥–ª—è –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è
    state["words_to_review"] = words_to_review
    
    show_current_exercise(message.chat.id, user_id)

def update_word_schedule(user_id: int, word: dict, was_correct: bool):
    """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –¥–ª—è —Å–ª–æ–≤–∞"""
    try:
        schedule = load_user_schedule(user_id)
        if not schedule:
            return

        # –ù–∞—Ö–æ–¥–∏–º —Å–ª–æ–≤–æ –≤ —Å–ø–∏—Å–∫–µ
        for w in schedule["words"]:
            if w["word"] == word["word"]:
                if was_correct:
                    w["correct_answers"] = w.get("correct_answers", 0) + 1
                    next_interval = calculate_next_interval(w, True)
                else:
                    next_interval = 1
                    w["correct_answers"] = 0
                
                w["current_interval"] = next_interval
                w["next_review"] = (datetime.datetime.now() + 
                                  datetime.timedelta(hours=next_interval)).isoformat()
                
                # –ï—Å–ª–∏ —Å–ª–æ–≤–æ –ø–æ–ª—É—á–∏–ª–æ 3 –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–∞
                if w["correct_answers"] >= 3 and next_interval >= 24:
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–ª–æ–≤
                    active_words = [word for word in schedule["words"] 
                                  if word.get("current_interval", 4) < 24]
                    
                    # –ï—Å–ª–∏ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–ª–æ–≤ –º–µ–Ω—å—à–µ 20, –¥–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ
                    if len(active_words) < 20:
                        all_words = set(VOCABULARY["–ë—É–¥—É –∏–∑—É—á–∞—Ç—å"].keys())
                        used_words = {word["word"] for word in schedule["words"]}
                        available_words = list(all_words - used_words)
                        
                        if available_words:
                            new_word = random.choice(available_words)
                            current_time = datetime.datetime.now()
                            schedule["words"].append({
                                "word": new_word,
                                "translation": VOCABULARY["–ë—É–¥—É –∏–∑—É—á–∞—Ç—å"][new_word]["–ø–µ—Ä–µ–≤–æ–¥"],
                                "next_review": current_time.isoformat(),
                                "current_interval": 4,
                                "repetitions": 0,
                                "correct_answers": 0
                            })
                break
        
        save_schedule(schedule, user_id)
        
    except Exception as e:
        print(f"Error updating schedule for user {user_id}: {e}")

def create_initial_schedule(user_id: int) -> dict:
    """–°–æ–∑–¥–∞–Ω–∏–µ –Ω–∞—á–∞–ª—å–Ω–æ–≥–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –¥–ª—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    current_time = datetime.datetime.now()
    all_words = list(VOCABULARY["–ë—É–¥—É –∏–∑—É—á–∞—Ç—å"].keys())
    initial_words = random.sample(all_words, min(20, len(all_words)))
    
    schedule = {
        "user_id": user_id,
        "words": [],
        "last_word_added": current_time.isoformat()
    }
    
    for word in initial_words:
        schedule["words"].append({
            "word": word,
            "translation": VOCABULARY["–ë—É–¥—É –∏–∑—É—á–∞—Ç—å"][word]["–ø–µ—Ä–µ–≤–æ–¥"],
            "next_review": current_time.isoformat(),
            "current_interval": 4,
            "repetitions": 0,
            "correct_answers": 0
        })
    
    save_schedule(schedule, user_id)
    return schedule
    

@bot.message_handler(func=lambda message: message.text == "üîÑ –ü–æ–≤—Ç–æ—Ä–∏—Ç—å")
def retry_answer(message):
    """–ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞"""
    user_id = message.from_user.id
    if user_id not in user_states:
        return
        
    state = user_states[user_id]
    state["awaiting_answer"] = True
    
    show_current_exercise(message.chat.id, user_id)

@bot.message_handler(commands=['help'])
def send_help(message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /help"""
    help_text = (
        "*–ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º:*\n\n"
        "1Ô∏è‚É£ *–ù–∞—á–∞–ª–æ —Ä–∞–±–æ—Ç—ã:*\n"
        "‚Ä¢ –ù–∞–∂–º–∏—Ç–µ 'üéØ –ù–∞—á–∞—Ç—å –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–µ'\n"
        "‚Ä¢ –í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–µ—Ä–µ–≤–æ–¥–∞\n\n"
        "2Ô∏è‚É£ *–í–æ –≤—Ä–µ–º—è —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è:*\n"
        "‚Ä¢ –í–≤–µ–¥–∏—Ç–µ –ø–µ—Ä–µ–≤–æ–¥ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω–æ–≥–æ —Å–ª–æ–≤–∞/—Ñ—Ä–∞–∑—ã\n"
        "‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ 'üí° –ü–æ–¥—Å–∫–∞–∑–∫–∞' –µ—Å–ª–∏ –Ω—É–∂–Ω–∞ –ø–æ–º–æ—â—å\n"
        "‚Ä¢ 'üîÑ –ü–æ–≤—Ç–æ—Ä–∏—Ç—å' - –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–∏\n"
        "‚Ä¢ '‚û°Ô∏è –î–∞–ª–µ–µ' - –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ —Å–ª–æ–≤–∞\n\n"
        "3Ô∏è‚É£ *–°–∏—Å—Ç–µ–º–∞ –∏–∑—É—á–µ–Ω–∏—è:*\n"
        "‚Ä¢ –ö–∞–∂–¥–æ–µ —Å–ª–æ–≤–æ –Ω—É–∂–Ω–æ –ø—Ä–∞–≤–∏–ª—å–Ω–æ –ø–µ—Ä–µ–≤–µ—Å—Ç–∏ 3 —Ä–∞–∑–∞\n"
        "‚Ä¢ –ü–æ—Å–ª–µ –∏–∑—É—á–µ–Ω–∏—è —Å–ª–æ–≤–∞ –¥–æ–±–∞–≤–ª—è–µ—Ç—Å—è –Ω–æ–≤–æ–µ\n"
        "‚Ä¢ –í—Å–µ–≥–¥–∞ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è –æ–∫–æ–ª–æ 20 –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–ª–æ–≤\n"
        "‚Ä¢ –ò–Ω—Ç–µ—Ä–≤–∞–ª—ã –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è —É–≤–µ–ª–∏—á–∏–≤–∞—é—Ç—Å—è –ø—Ä–∏ –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–∞—Ö\n\n"
        "4Ô∏è‚É£ *–ö–æ–º–∞–Ω–¥—ã:*\n"
        "/start - –ù–∞—á–∞—Ç—å —Å–Ω–∞—á–∞–ª–∞\n"
        "/review - –ù–∞—á–∞—Ç—å –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–µ\n"
        "/switch - –°–º–µ–Ω–∏—Ç—å –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–µ—Ä–µ–≤–æ–¥–∞\n"
        "/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ"
    )
    
    bot.reply_to(
        message,
        help_text,
        parse_mode='Markdown',
        reply_markup=get_main_keyboard()
    )
# def run_bot():
    # """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
    # print("Bot started...")
    
    # # –ó–∞–ø—É—Å–∫ –ø—Ä–æ–≤–µ—Ä–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
    # import threading
    # notification_thread = threading.Thread(target=check_and_send_notifications, daemon=True)
    # notification_thread.start()
    
    # # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    # try:
        # bot.infinity_polling(timeout=10, long_polling_timeout=5)
    # except Exception as e:
        # print(f"Error in bot polling: {e}")
        # time.sleep(5)
        # run_bot()  # –†–µ–∫—É—Ä—Å–∏–≤–Ω—ã–π –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫ –ø—Ä–∏ –æ—à–∏–±–∫–µ


    
def run_bot():
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
    print("Bot started...")
    
    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
    try:
        bot.remove_webhook()
        bot.get_updates(offset=-1)  # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –≤—Å–µ –Ω–∞–∫–æ–ø–ª–µ–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
    except Exception as e:
        print(f"Error clearing updates: {e}")
    
    # –ó–∞–ø—É—Å–∫ –ø—Ä–æ–≤–µ—Ä–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
    import threading
    notification_thread = threading.Thread(target=check_and_send_notifications, daemon=True)
    notification_thread.start()
    
    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    while True:
        try:
            print("Starting bot polling...")
            bot.infinity_polling(timeout=10, long_polling_timeout=5)
        except Exception as e:
            print(f"Bot polling error: {e}")
            if "Conflict: terminated by other getUpdates request" in str(e):
                print("Another instance is running. Waiting...")
                time.sleep(30)  # –ñ–¥–µ–º 30 —Å–µ–∫—É–Ω–¥ –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–æ–π
            else:
                time.sleep(5)  # –î–ª—è –¥—Ä—É–≥–∏—Ö –æ—à–∏–±–æ–∫ –∂–¥–µ–º 5 —Å–µ–∫—É–Ω–¥
                
if __name__ == "__main__":
    run_bot()